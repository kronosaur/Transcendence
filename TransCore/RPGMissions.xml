<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- MISSION SCREEN ============================================================

	gData uses the following fields:

	missionObj:			The mission that we are showing.

	nextScreen:			If specified, we navigate to the given screen when we're
						done. This may also be a list consisting of a screen and
						a pane.

						If nextScreen is equal to 'forceUndock, then we force 
						undock when we exit.

	MISSION OBJECT

	If the mission object has a data value named "rewardNextScreen" then it is used
	as a nextScreen parameter during debrief. This is used to implement things
	like promotions. If it has data "rewardNextScreenData", it's passed as data to that screen.

	We fire OnCanBrief just before the player receives a briefing (the first time 
	and all subsequent times). The even may return Nil to continue with the briefing
	or return a message to cancel the briefing.

	We fire OnAcceptedUndock after the mission has been accepted and the player has
	undocked.

	We fire OnCanDebrief when the player docks with the mission object and the 
	mission is completed. The mission type may return Nil to continue or a message
	to delay debriefing.
	
	We fire OnDebriefedUndock if we undock after debrief

-->

	<DockScreen UNID="&dsRPGMission;"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>
		<OnScreenInit>
			(block Nil
				; Store the mission object in screen data
				(scrSetData gScreen 'missionObj (@ gData 'missionObj))
				)
		</OnScreenInit>

		<InitialPane>
			(block (
				(missionObj (scrGetData gScreen 'missionObj))
				noBriefingMsg
				delayDebriefMsg
				)

				(switch
					(= (@ gData 'status) 'accept)
						"ReplyAccept"
						
					; If mission is available and player has not previously been
					; briefed, then start with intro...

					(msnGetProperty missionObj 'isOpen)
						(switch
							;	If we cannot yet brief (or if something happened to invalidate
							;	this mission), then we explain it here.

							(setq noBriefingMsg (msnFireEvent missionObj "OnCanBrief"))
								(block Nil
									(scrSetData gScreen 'NoBriefingMsg noBriefingMsg)
									"NoBriefing"
									)
									
							;	If no Intro, then go straight to briefing
							
							(not (msnTranslate missionObj 'Intro))
								"Briefing"

							;	If we don't have FirstIntro, then we go to Intro for
							;	the first and Briefing for subsequent times.
							
							(not (msnTranslate missionObj 'FirstIntro))
								(if (msnGetProperty missionObj 'isIntroShown)
									"Briefing"
									"Intro"
									)
									
							;	If we've already shown FirstIntro, then got to Intro.
							
							(msnGetProperty missionObj 'isIntroShown)
								"Intro"
								
							;	Otherwise, FirstIntro
							
							"FirstIntro"
							)

					; If this is an active mission, then handle it

					(msnGetProperty missionObj 'isActive)
						(switch
							;	If the mission has not yet been completed (success or failure)
							;	then we're in progress

							(not (msnGetProperty missionObj 'isCompleted))
								(block Nil
									;	Let the mission get a chance to set some state.
									(msnFireEvent missionObj "OnInProgress")
									"InProgress"
									)
								
							;	If cannot yet debrief, tell the player to wait

							(setq delayDebriefMsg (msnFireEvent missionObj "OnCanDebrief"))
								(block Nil
									(scrSetData gScreen 'DelayDebriefMsg delayDebriefMsg)
									"DelayDebrief"
									)

							;	Otherwise, we debrief success or failure.
							
							(msnGetProperty missionObj 'isSuccess)
								"Success"

							(msnGetProperty missionObj 'isFailure)
								"Failure"

							;	This should never happen

							"InProgress"
							)

					; If we've already been debriefed

					(msnGetProperty missionObj 'isDebriefed)
						"AlreadyDebriefed"

					; Otherwise, this is not a player mission

					"Unavailable"
					)
				)
		</InitialPane>

		<Panes>
			<FirstIntro>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'FirstIntro) 
							{
								actionDoneID: 'actionContinue
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block Nil
										(msnSetProperty (@ options 'missionObj) 'isIntroShown True)
										(scrSetData theScreen 'curPage Nil)
										(scrShowPane theScreen 'Briefing)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</FirstIntro>

			<Intro>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'Intro)
							{
								actionDoneID: 'actionContinue
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block Nil
										(msnSetProperty (@ options 'missionObj) 'isIntroShown True)
										(scrSetData theScreen 'curPage Nil)
										(scrShowPane theScreen 'Briefing)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</Intro>

			<Briefing>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'Briefing)
							{
								missionObj: missionObj
								onAcceptDecline: (lambda (theScreen acceptDecline pageDesc options)
									(switch
										;	If no decline, then we always accept and undock.
										
										(not (msnGetProperty (@ options 'missionObj) 'canBeDeclined))
											(block Nil
												(msnAccept (@ options 'missionObj))
												(scrSetData gScreen 'curPage Nil)

												;	Undock
												
												(scrExitScreen gScreen 'forceUndock)
												(setq aDockTarget gSource)
												(msnFireEvent missionObj "OnAcceptedUndock")

												;	Save the game

												(gamSave 'missionCheckpoint)
												)
												
										;	If we accept, then navigate to ReplyAccept
										
										(= acceptDecline 'accept)
											(block Nil
												(msnAccept (@ options 'missionObj))
												(scrSetData gScreen 'curPage Nil)

												;	If no ReplyAccept, then we're done
												(if (msnTranslate missionObj 'AcceptReply)
													(scrShowPane gScreen "ReplyAccept")
													(block Nil
														;	Undock
														(scrExitScreen gScreen 'forceUndock)
														(setq aDockTarget gSource)
														(msnFireEvent missionObj "OnAcceptedUndock")

														;	Save the game
														(gamSave 'missionCheckpoint)
														)
													)
												)
										
										;	Otherwise, we declined
										
										(block Nil
											(msnDecline (@ options 'missionObj))
											(scrSetData gScreen 'curPage Nil)

											;	If no ReplyDecline, then we're done
											(if (msnTranslate missionObj 'DeclineReply)
												(scrShowPane gScreen "ReplyDecline")
												(scrExitScreen gScreen)
												)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</Briefing>

			<NoBriefing>
				<OnPaneInit>
					(scrSetDesc gScreen (scrGetData gScreen 'NoBriefingMsg))
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(block (
							(missionObj (scrGetData gScreen 'missionObj))
							(screenOptions Nil)
							)
							
							;	Ask the mission if it wants a different screen.
							;	NOTE: The event could have destroyed the mission, so we check
							;	here to make sure it is still valid.
							
							(if (not (msnGetProperty missionObj 'isCompleted))
								(block Nil
									(setq aScreenType 'NoBriefing)
									(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))
									)
								)
							
							(switch
								(eq (@ screenOptions 'nextScreen) 'forceUndock)
									(scrExitScreen gScreen 'forceUndock)
									
								(@ screenOptions 'nextScreen)
									(block Nil
										(scrExitScreen gScreen)
										(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
										)
										
								(eq (@ gData 'nextScreen) 'forceUndock)
									(scrExitScreen gScreen 'forceUndock)

								(@ gData 'nextScreen)
									(block Nil
										(scrExitScreen gScreen)
										(scrShowScreen gScreen (@ gData 'nextScreen) (@ gData 'nextScreenData))
										)
									
								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</NoBriefing>

			<ReplyAccept>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'AcceptReply)
							{
								actionDoneID: 'actionDone
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block (
										(missionObj (@ options 'missionObj))
										(screenOptions Nil)
										)
							
										;	Ask the mission if it wants a different screen
							
										(setq aScreenType 'AcceptFollowUp)
										(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))

										(switch
							
											;	If so, navigate to that screen
								
											(@ screenOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
													)
										
											;	Otherwise, undock
								
											(block Nil
												(scrExitScreen gScreen 'forceUndock)
												(setq aDockTarget gSource)
												(msnFireEvent missionObj "OnAcceptedUndock")

												;	Save the game

												(gamSave 'missionCheckpoint)
												)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</ReplyAccept>

			<ReplyDecline>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'DeclineReply)
							{
								actionDoneID: 
									(if (= (@ gData 'nextScreen) 'forceUndock)
										'actionUndock
										)

								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block (
										(missionObj (@ options 'missionObj))
										(screenOptions Nil)
										)
							
										;	Ask the mission if it wants a different screen
							
										(setq aScreenType 'DeclineFollowUp)
										(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))
							
										(switch
											(eq (@ screenOptions 'nextScreen) 'forceUndock)
												(scrExitScreen gScreen 'forceUndock)
									
											(@ screenOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
													)
										
											(eq (@ gData 'nextScreen) 'forceUndock)
												(scrExitScreen gScreen 'forceUndock)

											(@ gData 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ gData 'nextScreen) (@ gData 'nextScreenData))
													)
									
											(scrExitScreen gScreen)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</ReplyDecline>

			<InProgress>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'InProgress)
							{
								actionDoneID: 'actionUndock
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block (
										(missionObj (@ options 'missionObj))
										(screenOptions Nil)
										)
							
										(msnSetPlayerTarget missionObj)
										;	Ask the mission if it wants a different screen
							
										(setq aScreenType 'InProgressFollowUp)
										(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))

										(switch
							
											;	If so, navigate to that screen

											(@ screenOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
													)

											;	Otherwise, undock
											(block Nil
												;	Exit screen before OnInProgressUndock because in some cases
												;	we want to be able to save the game.

												(scrExitScreen gScreen 'forceUndock)
												(setq aDockTarget gSource)
												(msnFireEvent missionObj "OnInProgressUndock")
												)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</InProgress>

			<DelayDebrief>
				<OnPaneInit>
					(scrSetDesc gScreen (scrGetData gScreen 'DelayDebriefMsg))
				</OnPaneInit>

				<Actions>
					<Action id="actionUndock" default="1" cancel="1">
						(scrExitScreen gScreen 'forceUndock)
					</Action>
				</Actions>
			</DelayDebrief>

			<Success>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)

						; If we haven't already, give the player the reward. We need
						; to call msnReward before getting the debriefing text because
						; we might have gotten a promotion (or something).

						(if (not (msnGetProperty missionObj 'isDebriefed))
							(block Nil
								(scrSetData gScreen 'successOptions (msnReward missionObj))
								(msnSetProperty missionObj 'isDebriefed True)
								)
							)

						; Get the debriefing text and page counts
						
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'SuccessDebrief)
							{
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block (
										(missionObj (@ options 'missionObj))
										(successOptions (scrGetData gScreen 'successOptions))
										(screenOptions nil)
										)
							
										;	Debrief complete
							
										(msnFireEvent missionObj "OnDebriefed")
							
										;	Ask the mission if it wants a different screen
							
										(setq aScreenType 'SuccessFollowUp)
										(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))

										(switch
											(eq (@ screenOptions 'nextScreen) 'forceUndock)
												(scrExitScreen gScreen 'forceUndock)
									
											(@ screenOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
													)
							
											(eq (@ successOptions 'nextScreen) 'forceUndock)
												(scrExitScreen gScreen 'forceUndock)
									
											(@ successOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ successOptions 'nextScreen) (@ successOptions 'nextScreenData))
													)
										
											(or (eq (@ gData 'nextScreen) 'forceUndock)
													(msnGetProperty missionObj 'forceUndockAfterDebrief)
													)
												(block Nil
													(scrExitScreen gScreen 'forceUndock)

													(setq aDockTarget gSource)
													(msnFireEvent missionObj "OnDebriefedUndock")
													)

											(@ gData 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ gData 'nextScreen))
													)

											(msnGetData missionObj 'rewardNextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (msnGetData missionObj 'rewardNextScreen) (msnGetData missionObj 'rewardNextScreenData))
													)

											(scrExitScreen gScreen)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</Success>

			<Failure>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen 
							(msnTranslate (scrGetData gScreen 'missionObj) 'FailureDebrief)
							{
								missionObj: missionObj
								onExitPane: (lambda (theScreen pageDesc options)
									(block (
										(missionObj (@ options 'missionObj))
										(screenOptions nil)
										)

										(msnSetProperty missionObj 'isDebriefed True)
							
										;	Debrief complete
							
										(msnFireEvent missionObj "OnDebriefed")
							
										;	Ask the mission if it wants a different screen
							
										(setq aScreenType 'FailureFollowUp)
										(setq screenOptions (msnFireEvent missionObj "OnGetNextScreen"))

										(switch
											(eq (@ screenOptions 'nextScreen) 'forceUndock)
												(scrExitScreen gScreen 'forceUndock)
									
											(@ screenOptions 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ screenOptions 'nextScreen) (@ screenOptions 'nextScreenData))
													)
							
											(or (eq (@ gData 'nextScreen) 'forceUndock)
													(msnGetProperty missionObj 'forceUndockAfterDebrief)
													)
												(block Nil
													(scrExitScreen gScreen 'forceUndock)

													(setq aDockTarget gSource)
													(msnFireEvent missionObj "OnDebriefedUndock")
													)

											(@ gData 'nextScreen)
												(block Nil
													(scrExitScreen gScreen)
													(scrShowScreen gScreen (@ gData 'nextScreen))
													)

											(scrExitScreen gScreen)
											)
										)
									)
								}
							)
						)
				</OnPaneInit>
			</Failure>

			<AlreadyDebriefed>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						(descText (msnTranslate missionObj 'AlreadyDebriefed "\"Welcome back! Thanks for the great work last time.\""))
						)

						(scrSetDesc gScreen descText)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(switch
							(not (@ gData 'nextScreen))
								(scrExitScreen gScreen)

							(eq (@ gData 'nextScreen) 'forceUndock)
								(scrExitScreen gScreen 'forceUndock)

							(block Nil
								(scrExitScreen gScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</AlreadyDebriefed>

			<Unavailable>
				<OnPaneInit>
					(block (
						(missionObj (scrGetData gScreen 'missionObj))
						)
						(rpgPagePaneInit gScreen
							(msnTranslate (scrGetData gScreen 'missionObj) 'Unavailable)
							{
								missionObj: missionObj
								}
							)
						)
				</OnPaneInit>
			</Unavailable>
		</Panes>

		<Events>
			<GetGlobalDockScreen>
				(block (missionObj)
					(switch
						; Find any mission that is completed and not yet debriefed

						(setq missionObj (@ (filter (msnFind gSource "aD") theMission (msnGetProperty theMission 'isCompleted)) 0))
							{	
								screen: &dsRPGMission;
								priority: 4

								data: {
									missionObj: missionObj
									}
								}

						; Otherwise, nothing

						Nil
						)
					)
			</GetGlobalDockScreen>
		</Events>
		
		<Language>
			<Text id="mission.rewardSummary">
				System: %systemName%\n
				Payment: %payment%
			</Text>
		</Language>
	</DockScreen>

<!-- DELIVERY MISSION SCREEN ===================================================

	gData uses the following fields:

	missionObj:			The mission that we are showing.

	MISSION OBJECT

	In order to take advantage of this screen, the mission object should have
	the following characteristics:

	1.	The mission type must have the "deliveryMission" attribute.

	2.	The mission object must have data of "destID" with the ID of the
		recipient of the delivery.

	3.	The mission type should handle an event called "OnDeliveryMissionCompleted"
		which handles the delivery (e.g., removing the appropriate object
		from the player's cargo. The event must call either msnSuccess or
		msnFailure. It must return a string to display to the user describing
		the result.

		The result of OnDeliveryMissionCompleted may also be a struct with the
		following fields:

		desc:			The screen descriptions
		forceUndock:	If non-nil, we undock after the delivery.

-->

	<DockScreen UNID="&dsRPGDeliveryMission;"
			nestedScreen=		"true"
			inherit=			"&dsDockScreenBase;"
			>
		<OnScreenInit>
			(block Nil
				; Store the mission object in screen data
				(scrSetData gScreen 'missionObj (@ gData 'missionObj))
				)
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (missionObj result)
						(setq missionObj (scrGetData gScreen 'missionObj))
						(setq result (msnFireEvent missionObj 'OnDeliveryMissionCompleted))

						(if (eq (typeof result) 'struct)
							(block Nil
								(scrSetData gScreen 'forceUndock (@ result 'forceUndock))
								(scrSetDesc gScreen (@ result 'desc))

								(if (@ result 'forceUndock)
									(scrSetActionLabel gScreen 'actionContinue "Undock" "U")
									)
								)

							(block Nil
								(scrSetData gScreen 'forceUndock Nil)
								(scrSetDesc gScreen result)
								)
							)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrExitScreen gScreen (scrGetData gScreen 'forceUndock))
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Events>
			<GetGlobalDockScreen>
				; Find a delivery mission that is not completed and whose recipient
				; is this station.

				(block (missionObj)
					(switch
						(setq missionObj (@ 
								(filter (msnFind gSource "a +deliveryMission;") theMission 
									(and
										(not (msnGetProperty theMission 'isCompleted))
										(eq gSource (objGetObjByID (msnGetData theMission 'destID)))
										)
									)
								0))
							{	
								screen: &dsRPGDeliveryMission;
								priority: 4

								data: {
									missionObj: missionObj
									}
								}

						; Otherwise, nothing

						Nil
						)
					)
			</GetGlobalDockScreen>
		</Events>
	</DockScreen>


<!-- PANE INIT MISSION =========================================================

	MISSION OBJECT

	In order to take advantage of this event, the mission object should have
	the following characteristics:

	1.	The mission type must have the "paneInitMission" attribute.

	2.	The mission object must have data of "paneID" with the ID of a station.

	3.	The mission type should provide an event called "OnPaneInit"
		which will be called when displaying dockscreens at the destination.

-->

	<Type UNID="&unidRPGPaneInitMission;">
		<Events>
			<OnGlobalPaneInit>
				(enum (msnFind Nil "a +paneInitMission;") theMission
					(if (and
							(not (msnGetProperty theMission 'isCompleted))
							(= (objGetID gSource) (msnGetData theMission 'paneID))
							)
						(msnFireEvent theMission 'OnPaneInit)
						)
					)
			</OnGlobalPaneInit>
		</Events>
	</Type>

<!-- GLOBAL FUNCTIONS ==========================================================

-->

	<Globals>
		(block Nil
			(setq rpgIsMissionActive (lambda (missionUNID)
				(and missionUNID (msnFind (cat "a +unid:" missionUNID ";")))
				))

			(setq rpgMissionAssignment (lambda (options)
			
				;	Options may contain the following fields
				;
				;		intervalPerStation: Time between mission given at this station
				;
				;		intervalPerType: Time between missions given by same station type
				;
				;		maxActive: Maximum number of missions (meeting missionCriteria) which can
				;				be active at the same time
				;
				;		maxPerStation: Maximum number of missions that we give out at
				;				this station.
				;
				;		missionCriteria: Criteria used to create new missions. [Required]
				;
				;		noMissionTextID: Language ID to display if there is no mission
				;				available at this station. [Required]
				;
				;		displayCriteria: If non-Nil, then we show open/active missions 
				;				that match this criteria. Otherwise, we show all missions
				;				for the mission source (gSource)
				
				(block (
					(noMissionTextID (@ options 'noMissionTextID))
					theMission theRumor
					)

					;	Show proper screen

					(switch
						;	Call rpgMissionGetAssignment to see if we have a mission.
						(setq theMission (rpgMissionGetAssignment options))
							(scrShowScreen gScreen &dsRPGMission; {	missionObj: theMission })

						;	Check if we can show a rumor instead
						(setq theRumor (rpgGetRumor options))
							(scrShowScreen gScreen &dsRPGRumor; theRumor)

						; Otherwise, nothing

						(scrShowScreen gScreen &dsRPGMessage; { desc:(scrTranslate gScreen noMissionTextID) })
						)
					)
				))

			(setq rpgMissionGetAssignment (lambda (options)
			
				;	Options may contain the following fields
				;
				;		intervalPerStation: Time between mission given at this station
				;
				;		intervalPerType: Time between missions given by same station type
				;
				;		maxActive: Maximum number of missions (meeting missionCriteria) which can
				;				be active at the same time
				;
				;		maxPerStation: Maximum number of missions that we give out at
				;				this station.
				;
				;		missionCriteria: Criteria used to create new missions. [Required]
				;
				;		displayCriteria: If non-Nil, then we show open/active missions 
				;				that match this criteria. Otherwise, we show all missions
				;				for the mission source (gSource)
				
				(block (
					(displayCriteria (@ options 'displayCriteria))
					theMission newMissions nextMissionTime
					)

					;	Show proper screen

					(switch
						;	If we have an active mission from this station then we return it.
						(setq theMission (msnFind gSource (cat "aSP " displayCriteria)))
							theMission

						;	If we have an open mission available then return it.
						(setq theMission (msnFind gSource (cat "oSP " displayCriteria)))
							theMission

						;	If the player has too many active missions from other stations, then no new mission
						(and (@ options 'maxActive)
								(geq (count (msnFind Nil (cat "a" (@ options 'missionCriteria)))) (@ options 'maxActive))
								)
							Nil

						;	Don't give out more than X mission per station
						(and (@ options 'maxPerStation)
								(geq (count (msnFind gSource "*S")) (@ options 'maxPerStation))
								)
							Nil

						;	If it's not time for a new mission, then nothing
						(and (setq nextMissionTime (objGetData gSource 'nextMissionTime))
								(@ options 'intervalPerStation)
								(gr nextMissionTime (unvGetTick)))
							Nil

						(and (setq nextMissionTime (objGetTypeData gSource 'nextMissionTime))
								(@ options 'intervalPerType)
								(gr nextMissionTime (unvGetTick)))
							Nil

						;	Make a list of available missions. We filter out any missions
						;	that are outside our system level. If we can't find anything, then we've got nothing.
						(not (setq newMissions (typFind (cat (@ options 'missionCriteria) " -special;"))))
							Nil

						;	Create a random mission from the list. If we succeed, then return it
						(setq theMission (msnCreate newMissions gSource))
							(block Nil
								;	And set next mission times if required
								(if (@ options 'intervalPerStation)
									(objSetData gSource 'nextMissionTime (+ (unvGetTick) (@ options 'intervalPerStation)))
									)
								(if (@ options 'intervalPerType)
									(objSetTypeData gSource 'nextMissionTime (+ (unvGetTick) (@ options 'intervalPerType)))
									)
								theMission
								)

						; Otherwise, nothing
						Nil
						)
					)
				))

			(setq rpgMissionAssignmentOnScreenInit (lambda (options)
			
				;	Options may contain the following fields
				;
				;		maxPerStation: Maximum number of missions that we give out at
				;				this station.
				;
				;		missionCriteria: Criteria used to create new missions. [Required]
				
				(block (newMissions)
					(switch
						;	If we have an active/open mission from this station then nothing to
						;	do. We go through the normal dock screen.

						(@ (msnFind gSource "aoS") 0)
							True

						;	Don't give out more than X mission per station
								
						(and (@ options 'maxPerStation) 
								(geq (count (msnFind gSource "*S")) (@ options 'maxPerStation))
								)
							True

						;	See if there are any missions for the ship that we should show directly
						;	when we dock (as opposed to when the player goes to the bridge).
						;
						;	If not, nothing to do.

						(not (setq newMissions (typFind (cat (@ options 'missionCriteria) " +onDockMission;"))))
							True

						;	Create a random mission from the list. If we fail, then just continue
						;	as normal.

						(not (setq theMission (msnCreate newMissions gSource)))
							True
						
						;	Otherwise, show the mission screen
					
						(scrShowScreen gScreen &dsRPGMission; { missionObj: theMission })
						)
					)
				))

			(setq rpgIsMissionDeclined (lambda (missionUNID)
				(block (missionObj)
					(and missionUNID 
						(setq missionObj (msnFind (cat "o +unid:" missionUNID ";")))
						(msnGetProperty missionObj 'isDeclined)
						)
					)
				))

			(setq rpgMissionAchievementString (lambda (missionsCompleted missionsFailed)
				(if (eq (int missionsFailed) 0)
					(int missionsCompleted)
					(cat missionsCompleted " (" missionsFailed " failed)")
					)
				))

			(setq rpgMissionAchievements (lambda (theType missionCriteria)
				(block (
					(successList (plyGetKeyEventStat gPlayer 'missionSuccess Nil missionCriteria))
					(failureList (plyGetKeyEventStat gPlayer 'missionFailure Nil missionCriteria))
					)
					(if (or successList failureList)
						(list
							(list
								(typTranslate theType 'rpg.missionTypeDesc)
								(rpgMissionAchievementString (count successList) (count failureList))
								(typTranslate &unidCommonText; 'missionsAndActivities)
								)
							)
						)
					)
				))

			(setq rpgMissionRewardPayment (lambda (theReward currency)
				(if currency
					(block Nil
						(plyCredit gPlayer currency theReward)
						(typIncGlobalData &svPlayer; "missionRewards" 
							(ecoExchange theReward 'credit currency)
							)
						)
					(block Nil
						(plyCredit gPlayer theReward)
						(typIncGlobalData &svPlayer; "missionRewards" theReward)
						)
					)
				))

			(setq rpgSetTarget (lambda (missionObj reasonCode targetObj command)
				(block (newTargetObj)
					(switch
						; If we just got debriefed then we clear our targets.

						(eq reasonCode 'debriefed)
							(shpCancelOrders gPlayerShip)

						; If the mission is complete, then we point towards the 
						; owner station.

						(msnGetProperty missionObj 'isCompleted)
							(switch
								;	If there is no debrief, then no need to point.

								(not (msnGetProperty missionObj 'hasDebrief))
									Nil

								;	If we still have a mission giver, point back to it for a debrief.
									
								(setq newTargetObj (objGetObjByID (msnGetProperty missionObj 'debrieferID)))
									(block Nil
										(shpCancelOrders gPlayerShip)
										(shpOrder gPlayerShip 'dock newTargetObj)
										)
								)

						; Otherwise, we point towards the target

						(if targetObj
							(block Nil
								(shpCancelOrders gPlayerShip)
								(shpOrder gPlayerShip (if command command 'attack) targetObj)
								)
							)
						)
					)
				))

			(setq intMissionAchievementString rpgMissionAchievementString)
			(setq intMissionRewardPayment rpgMissionRewardPayment)
			)
	</Globals>

</TranscendenceModule>

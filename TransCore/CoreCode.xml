<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- GLOBALS ===================================================================

	PREFIXES
	
	int			Internal functions (may change from version to version)
	math		General math functions
	obj			General object functions
	scr			General functions relating to dock screens
	str			General string functions
	sys			General functions relating to star systems
	
============================================================================ -->

	<Globals>
		(block Nil
			; Internal functions -----------------------------------------------

			(setq intArmorRepairAll (lambda (theShip repairTech minHPPercent)
				(block (repaired wasDamage tooMuchDamage noTech)
					(objEnumItems theShip "aI" theItem
						(block (
							(armorSeg (itmGetArmorInstalledLocation theItem))
							(type (objGetArmorType theShip armorSeg))
							(damage (objGetArmorDamage theShip armorSeg))
							(maxHP (shpGetArmorMaxHitPoints theShip armorSeg))
							)
							(if (gr damage 0) (setq wasDamage True))

							(switch
								; No need to repair if no damage
								(eq damage 0)
									Nil

								; If armor needs higher tech to repair, we can't do anything
								(and repairTech (gr (armGetRepairTech type) repairTech))
									(setq noTech True)

								; Can't repair if damage is too much. Check that minHPPercent is a number, not a string as used by old version.
								(and (or (eq (typeOf minHPPercent) 'int32) (eq (typeOf minHPPercent) 'real))
										(ls (- maxHP damage) (* maxHP minHPPercent 0.01))
									)
									(setq tooMuchDamage True)

								; Repair
								(block Nil
									(objRepairArmor theShip armorSeg)
									(setq repaired True)
									)
								)
							)
						)

					(switch
						repaired
							"repaired"

						(not wasDamage)
							"noDamage"

						noTech
							"noTech"

						tooMuchDamage
							"tooMuchDamage"

						"noRepair"
						)
					)
				))

			(setq intAutoInstall (lambda (theSource theItem)
				(if (itmIsInstalled theItem)

					; Uninstall item
					(block Nil
						(switch
							(gr (itmGetMass theItem) (objGetCargoSpaceLeft theSource))
								(objSendMessage theSource Nil "No room in cargo hold to uninstall")

							(block Nil
								(shpRemoveDevice theSource theItem)
								(objSendMessage theSource Nil (cat (itmGetName theItem 1) " uninstalled"))
								)
							)
						)

					; Install item
					(block (result)
						(setq result (shpCanInstallDevice theSource theItem))

						(switch
							(eq result 0)
								(block Nil
									(shpInstallDevice theSource theItem)
									(objSendMessage theSource Nil (cat (itmGetName theItem 1) " installed"))
									)

							(eq result 2)
								(objSendMessage theSource Nil "Ship cannot support another device")

							(eq result 6)
								(objSendMessage theSource Nil "Ship already has a missile launcher")

							(eq result 7)
								(objSendMessage theSource Nil "Reactor upgrade required")

							(objSendMessage theSource Nil (cat (itmGetName theItem 1) " cannot be installed"))
							)
						)
					)
				))

			(setq intCalcExplosionType (lambda (theObj)
				(block (totalExplosivePower)

					; Compute the explosive power of the items based on level and mass
					(setq totalExplosivePower 0)

					(objEnumItems theObj "*" theItem
						(block Nil
							(switch
								(or (itmMatches theItem "mf") (itmMatches theItem "* +Explosive;"))
									(block (level)
										; Missiles count for +1 level
										(setq level (itmGetLevel theItem))
										(if (or (itmMatches theItem "m") (itmHasAttribute theItem "Explosive"))
											(setq level (add level 1))
											)

										; Explosive power = level^2 * sqrt(mass-in-tons)
										; We compute mass in 10,000th of a tons and divide later (we divide by sqrt(10,000) or 100)

										(setq totalExplosivePower
											(add totalExplosivePower (multiply (power level 2) (sqrt (multiply 10 (itmGetMass theItem) (itmGetCount theItem)))))
											)
										)
								)
							)
						)

					; Convert to tons and tweak
					(setq totalExplosivePower (divide totalExplosivePower 100))
					(setq totalExplosivePower (divide (multiply 150 totalExplosivePower) 100))

					; Convert to explosion type
					(switch
						(geq totalExplosivePower 2750)
							&vtPlasmaExplosion2;

						(geq totalExplosivePower 2200)
							&vtPlasmaExplosion1;

						(geq totalExplosivePower 1730)
							&vtThermoExplosion4;

						(geq totalExplosivePower 1330)
							&vtThermoExplosion3;

						(geq totalExplosivePower 1000)
							&vtThermoExplosion2;

						(geq totalExplosivePower 730)
							&vtThermoExplosion1;

						(geq totalExplosivePower 510)
							&vtBlastExplosion4;

						(geq totalExplosivePower 345)
							&vtBlastExplosion3;

						(geq totalExplosivePower 215)
							&vtBlastExplosion2;

						(geq totalExplosivePower 125)
							&vtBlastExplosion1;

						(geq totalExplosivePower 65)
							&vtKineticExplosion4;

						(geq totalExplosivePower 25)
							&vtKineticExplosion3;

						(geq totalExplosivePower 10)
							&vtKineticExplosion2;

						(geq totalExplosivePower 5)
							&vtKineticExplosion1;

						Nil
						)
					)
				))
				
			(setq intComputeRandomEncounterPos (lambda (theTarget)
				(block (playerCourse)

					; Compute the player's current course
					(setq playerCourse (sysVectorAngle (objGetVel theTarget)))

					; Create a random position that is in front of the player
					; and not near anything
					(sysVectorRandom theTarget
						(lambda Nil
							(sysVectorPolarOffset 
								Nil 
								(modulo (add playerCourse 360 (random -80 80)) 360)
								120
								)
							)
						10
						"sTA"
						)
					)
				))

			(setq intComputeRandomEncounterCourse (lambda (theObj theTarget)
				(block (interceptPos)
				
					; Interception point is wherever the player will be in 100 ticks
					(setq interceptPos 
						(sysVectorPolarOffset theTarget (sysVectorAngle (objGetVel theTarget))
							(sysCalcTravelDistance (objGetVel theTarget) 100)
							)
						)

					; Compute course
					(sysVectorAngle (sysVectorSubtract interceptPos (objGetPos theObj)))
					)
				))

			(setq intComputeRandomEncounterPosEx (lambda ()
				(block (playerCourse startPos interceptPos encounterCourse ttime)
				
					; Compute the player's current course
					(setq playerCourse (sysVectorAngle (objGetVel gPlayerShip)))
					
					; Create a random position that is in front of the player
					; and not near anything
					(setq startPos (sysVectorRandom gPlayerShip
						(lambda Nil
							(sysVectorPolarOffset 
								Nil 
								(modulo (add playerCourse 360 (random -80 80)) 360)
								120
								)
							)
						10
						"sTA"
						))
						
					; Interception point is wherever the player will be in 100 ticks
					(setq interceptPos 
						(sysVectorPolarOffset gPlayerShip playerCourse 
							(sysCalcTravelDistance (objGetVel gPlayerShip) 100)
							)
						)
					
					; Compute course
					(setq encounterCourse (sysVectorAngle (sysVectorSubtract interceptPos startPos)))
					
					
					; Return start pos, course, and intercept pos
					(list startPos encounterCourse interceptPos)
					)
				))

			(setq intContainerGetExplosionType (lambda (theObj)
				(switch
					; If we were not destroyed by an internal explosion, then none is necessary
					(not (objGetData theObj "DestroyedByExplosion"))
						Nil

					; If the player planted the explosives, then return the appropriate damage cause.
					; Returning "playerCreatedExplosion" means that the damage will be blamed on the player
					; when calling (objGetOrderGiver)

					(objGetData theObj "PlayerExplosives")
						(list (intCalcExplosionType theObj) 0 'playerCreatedExplosion)

					; Otherwise, this is an internal explosion (return the UNID of the explosion)
					(intCalcExplosionType theObj)
					)
				))

			(setq intContainerOnDamage (lambda (theObj damageHP)
				(if (gr damageHP 0)
					(block (items)
						; Count the amount of explosive items on board
						(setq items (append (objGetItems theObj "mf") (objGetItems theObj "* +Explosive")))
						(if items
							(block (theChance totalExplosives maxHP damageAdj)

								; Add up the total mass of all explosive items. Items that are
								; "volatile" count much more
								(setq totalExplosives 0)
								(enum items theItem
									(setq totalExplosives 
										(add totalExplosives 
											(multiply 
												(if (itmHasAttribute theItem "Volatile") 5 1) 
												(itmGetCount theItem) 
												(itmGetMass theItem)
												)
											)
										)
									)

								; Convert to tons/10
								(setq totalExplosives (max 1 (divide totalExplosives 100)))

								; Compute the how powerful the damage is; 100 = enough to destroy all HP
								(setq maxHP (staGetMaxStructuralHP theObj))
								(if (gr maxHP 0)
									(setq damageAdj (max 1 (divide (multiply 100 damageHP) maxHP)))
									(block Nil
										(setq damageAdj 1)
										(setq maxHP 1)
										)
									)

								; Probability of explosion is proportional to the ratio explosives to structural hp
								(setq theChance (divide (multiply (min 25 damageAdj) 9 totalExplosives) (add maxHP 50)))

								;(dbgOutput "maxHP = " maxHP)
								;(dbgOutput "damageAdj = " damageAdj)
								;(dbgOutput "totalExplosives = " totalExplosives)
								;(dbgOutput "chance = " theChance)

								; If the explosives blow up, convert the damage to a very high number so that
								; the container is destroyed
								(if (leq (random 1 100) theChance)
									(block Nil
										; Set data so that we know that we exploded
										(objSetData theObj "DestroyedByExplosion" True)

										; Very high damage
										1000000
										)
									damageHP
									)
								)
							damageHP
							)
						)
					)
				))

			(setq intDeviceRepairAll (lambda (theObj)

			; intDeviceRepairAll repairs all installed devices. Repairs normal
			; damage and disruptions.

				(block (allDevices)

					; First, make sure none of the devices are disrupted

					(enum (objGetItems theObj "dI") theDevice
						(if (objGetItemProperty theObj theDevice 'disrupted)
							(objSetItemProperty theObj theDevice 'disrupted Nil)
							)
						)

					; Next, repair all damaged devices

					(enum (objGetItems theObj "dID") theDevice
						(objSetItemProperty theObj theDevice 'damaged Nil)
						)
					)
				))

			(setq intIsGateToSystem (lambda (nodeID gateID destSystem nodesChecked)
				(block (destNode)
					(setq destNode (sysGetStargateDestinationNode nodeID gateID))
					(if (eq destNode destSystem)
						True

						(block (stargates)
							(setq nodesChecked (append nodesChecked (list nodeID)))
							(setq stargates (filter (sysGetStargates destNode) theGate
								(not (find nodesChecked (sysGetStargateDestinationNode destNode theGate)))
								))

							(if stargates
								(filter stargates theGate (intIsGateToSystem destNode theGate destSystem nodesChecked))
								Nil
								)
							)
						)
					)
				))

			; Math functions ---------------------------------------------------
			
			(setq mathAngleDiffDegrees (lambda (first second)
				(block (diff)
					(setq diff (mod (- first second) 360))
					(switch
						(gr diff 180)
							(- diff 360)
						(ls diff -180)
							(+ diff 360)
						diff
						)
					)
				))
			
			(setq mathDecToHex (lambda (decimal)
				(block (tokens result negative)
					(setq tokens '(0 1 2 3 4 5 6 7 8 9 A B C D E F))
					(setq decimal (convertTo 'int32 decimal))
					(if (ls decimal 0)
						(block Nil
							(setq decimal (- decimal 0x80000000))
							(setq negative True)
							)
						)
					(if (eq decimal 0)
						(setq result 0)
						(loop (gr decimal 0)
							(block Nil
								(setq result (cat (@ tokens (modulo decimal 16)) result))
								(setq decimal (divide decimal 16))
								)
							)
						)
					(if negative
						(block Nil
							(for i 1 (- 8 (count result))
								(setq result (cat 0 result))
								)
							(setq result (cat (@ tokens (+ (subset result 0 1) 8))
											(subset result 1)
											)
								)
							)
						)
					(cat "0x" result)
					)
				))
			
			(setq mathPermutePairs (lambda (theList)

			;	Given a list (a b c) we return a list of all possible pairs:
			;
			;	((a b) (a c) (b c))

				(switch
					(ls (count theList) 2)
						Nil

					(= (count theList) 2)
						(list theList)

					(block (
						(first (@ theList 0))
						result
						)
						(for i 1 (- (count theList) 1)
							(setq result (append result (list (list first (@ theList i)))))
							)

						;	Recurse

						(append result (mathPermutePairs (subset theList 1)))
						)
					)
				))
				
			(setq mathProbTableLookup (lambda (probTable)
			
			; probTable is a table of probabilities of the following format:
			;
			; ( (totalProbability Nil)
			;   ([prob 0] [value 0])
			;	...
			;	([prob n] [value n])
			;	)
			;
			; The function returns a random value in the table in proportion to
			; its probability.
			
				(block (theRoll theEntry theProb)
					(setq theRoll (random 1 (item (item probTable 0) 0)))
					(setq theEntry 1)
					(loop (and (setq theProb (item (item probTable theEntry) 0))
							(gr theRoll theProb)
							)
						(block Nil
							(setq theRoll (subtract theRoll theProb))
							(setq theEntry (add theEntry 1))
							)
						)
						
					(item (item probTable theEntry) 1)
					)
				))

			(setq mathScale (lambda (x fromMin fromMax toMin toMax gamma)

			;	Scales x, which must be in the range fromMin to fromMax to the
			;	destination scale, toMin to Max.
			;
			;	gamma is an optional parameter that scales based on a power
			;	function. At 100, the mapping is linear. At 50 we use a square
			;	root function; at 200 we square it.

				(block (toRange result)

					(setq toRange (subtract toMax toMin))

					;	Map to the result range

					(setq result
						(divide
							(multiply
								(subtract 
									(min (max fromMin x) fromMax)
									fromMin
									)
								toRange
								)
							(subtract fromMax fromMin)
							)
						)

					;	If we have a gamma parameter, adjust it

					(if gamma
						(setq result
							(@ (power (list result toRange) (list gamma 100)) 0)
							)
						)

					;	Done

					(if (ls toRange 0)
						(subtract toMin result)
						(add result toMin)
						)
					)
				))
				
			; Object functions -------------------------------------------------
			
			(setq objAddItemByValue (lambda (theObj theItem theValue theCurrency)
				(block Nil
					(setq itemPrice (itmGetPrice theItem theCurrency))
					
					(switch
						(eq itemPrice 0)
							(objAddItem theObj theItem theValue)
							
						(gr itemPrice theValue)
							(if (leq (random 1 itemPrice) theValue)
								(objAddItem theObj theItem 1)
								)
								
						(block Nil
							(objAddItem theObj theItem (divide theValue itemPrice))
							(if (leq (random 1 itemPrice) (modulo theValue itemPrice))
								(objAddItem theObj theItem 1)
								)
							)
						)
					)
				))
				
			(setq objGetFitCount (lambda (theObj theItem)
			
			; objGetFitCount returns the number of the given item that will fit
			; in the cargo space of the given object, but never more than the
			; specified number of items.
			
				(block (itemMass)
				
					(setq itemMass (itmGetMass theItem))
					
					(if (eq itemMass 0)
						(itmGetCount theItem)
						
						(min (divide (objGetCargoSpaceLeft theObj) itemMass) (itmGetCount theItem))
						)
					)
				))
				
			; String functions -------------------------------------------------

			(setq strG (lambda (genome humanMaleWord humanFemaleWord)
				(switch
					(eq genome 'humanFemale)
						humanFemaleWord

					(eq genome 'humanMale)
						humanMaleWord

					humanMaleWord
					)
				))
				
			(setq strItemList (lambda (itemList nameFlags)
			
			;	Returns a string describing the items in the list. For example:
			;
			;	"a ton of titanium ore, 2 segments of reactive armor, and
			;	a slave coffin"
			
				(block (i result lastItem nameList newList pos)
				
					(if (not nameFlags)	(setq nameFlags 0x08))
					
					(enum itemList theItem
						(block (
							(singularName (itmGetName (itmSetCount theItem 1) nameFlags))
							(pos (find nameList singularName))
							)
							(if pos
								(block ((matchingItem (@ newList pos)))
									(set@ newList pos (itmSetCount matchingItem (+ (itmGetCount matchingItem) (itmGetCount theItem))))
									)
								(block Nil
									(lnkAppend newList theItem)
									(lnkAppend nameList singularName)
									)
								)
							)
						)
						
					(setq i 0)
					(setq lastItem (subtract (count newList) 1))
					
					(enum newList theItem
						(block nil
							(switch
								(eq i 0)
									(setq result (itmGetName theItem nameFlags))
										
								(eq i 1 lastItem)
									(setq result (cat result
													(typTranslate 0x00010071 'listAnd) ; unidCommonText entity isn't loaded yet
													(itmGetName theItem nameFlags)
													)
										)
									
								(eq i lastItem)
									(setq result (cat result
													(typTranslate 0x00010071 'listCommaAnd)
													(itmGetName theItem nameFlags)
													)
										)
										
								(setq result (cat result
												(typTranslate 0x00010071 'listComma)
												(itmGetName theItem nameFlags)
												)
									)
								)

							(setq i (add i 1))
							)
						)
						
					result
					)
				))

			(setq strMassString (lambda (mass)
			
			; Returns a string for the mass with appropriate units. The mass
			; argument is in kilograms. This function returns strings of the
			; following forms:
			;
			; n kg
			; n.m tons
			; ------------------------------------------------------------------
			
				(block Nil
					(switch
						(eq mass 1)
							"1 kg"

						(ls mass 1000)
							(cat mass " kg")

						(block (tons remainder)
							(setq tons (divide mass 1000))
							(setq remainder (divide (add (subtract mass (multiply tons 1000)) 50) 100))
							(if (eq remainder 10)
								(block Nil
									(setq tons (add tons 1))
									(setq remainder 0)
									)
								)
							(cat tons "." remainder " tons")
							)
						)
					)
				))
				
			(setq strNumber (lambda (theValue)
			
			; If the number is small (less than 30) we spell out the number in
			; English. Otherwise we just use arabic numerals.
			; ------------------------------------------------------------------

				(switch
					(ls theValue 0)
						theValue

					(leq theValue 20)
						(item 
							'("zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten"
								"eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen" "twenty")
							theValue
							)

					(ls theValue 30)
						(cat "twenty-" (strNumber (subtract theValue 20)))

					theValue
					)
				))
				
			(setq substitute (lambda (source old new)
			
			; Replaces all instances of one substring in a string, one series of items in a list, or one value in a struct with another.
			; ------------------------------------------------------------------

				(block (result oldLength position)
					(switch
						(eq (typeOf source) 'string)
							(block Nil
								(setq oldLength (count old))
								(loop (setq position (find source old))
									(block Nil
										(setq result (cat result (subset source 0 position) new))
										(setq source (subset source (+ position oldLength)))
										)
									)
								(cat result source)
								)
								
						(eq (typeOf source) 'list)
							(block Nil
								(setq oldLength (count old))
								(loop (setq position (find source (@ old 0)))
									(if (eq old (subset source position oldLength))
										(block Nil
											(setq result (append result (subset source 0 position) new))
											(setq source (subset source (+ position oldLength)))
											)
										(block Nil
											(setq result (append result (subset source 0 (+ position 1))))
											(setq source (subset source (+ position 1)))
											)
										)
									)
								(append result source)
								)
								
						(eq (typeOf source) 'struct)
							(apply struct (map source theItem
											(if (eq (@ theItem 1) old)
												(set@ theItem 1 new)
												theItem
												)
											)
								)
							
						source
						)
					)
				))
				
			; Topology functions -------------------------------------------------
			
			(setq sysGetStargateLeadingToCore (lambda ()
				(block (
					(corewardNode (typGetStaticData (@ (typFind "a") 0) 'defaultCorewardNode))
					)
					(switch
						(not corewardNode)
							Nil
							
						(= (sysGetNode) corewardNode)
							Nil
							
						(sysGetStargateLeadingToNode corewardNode)
						)
					)
				))

			(setq sysGetStargateLeadingToNode (lambda (nodeID)
			
			; Returns the stargate object that leads to the given nodeID from 
			; the current system. Nil if the node is unreachable.
			; ------------------------------------------------------------------

				(sysGetObjectByName
					(map (sysGetStargates) '(excludeNil reduceMin original) gateID
						(sysGetTopologyDistance (sysGetStargateDestinationNode gateID) nodeID)
						)
					)
				))

			; Debug functions -------------------------------------------------

			(setq debugUnitTest (lambda (title testSuite)
				(block (
					(testNum 0)
					(successTests 0)
					(failedTests 0)
					)
					(print title)

					(enum testSuite theTest
						(errblock (errorResult result)
							(setq testNum (add testNum 1))
							(setq result (eval (@ theTest 'code)))
							(switch
								(and (@ theTest 'resultCode)
										(= result (eval (@ theTest 'resultCode)))
										)
									(block ()
										; (print "[" testNum "] PASS")
										(setq successTests (add successTests 1))
										)

								(eq result (@ theTest 'result))
									(block ()
										; (print "[" testNum "] PASS")
										(setq successTests (add successTests 1))
										)

								(block ()
									(print "[" testNum "] FAIL: " (@ theTest 'code) " -&gt; " result " (expected " (@ theTest 'result) ")")
									(setq failedTests (add failedTests 1))
									)
								)

							;	Error

							(block ()
								(print "[" testNum "] ERROR: " errorResult)
								(setq failedTests (add failedTests 1))
								)
							)
						)

					;	Print final results

					(if (eq testNum successTests)
						(print "COMPLETED " testNum " " (if (eq testNum 1) "test" "tests") " successfully.")
						(print "FAILED " failedTests " " (if (eq failedTests 1) "test" "tests") " out of " testNum ".")
						)

					;	Return empty string

					""
					)
				))
			)
	</Globals>
</TranscendenceModule>
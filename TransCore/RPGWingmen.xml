<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Wingman Base Class

		USAGE NOTES
		
		Do not rely on the implementation of this class across versions. If you wish
		to inherit from this class in an Extension, you should copy the class into
		your own Extension and then inherit from that.

		EXTRA DATA
		
		The following data is stored on the wingman object. These track internal state
		used by the base class. You should not change these values nor make assumptions
		about their meaning.
		
		behavior:			Ship's current behavior
								Nil						= nothing
								'attackingAtWill		= attacking any target in range
								'attackingTarget		= attacking a target
								'escorting				= escorting the player
								'goingHome				= wingman wants to go home
								'repairingArmor			= docking with station to repair
								'waiting				= waiting for the player

		homeSystem			System nodeID where we were created
		nextArmorRepairMsg	Tick at which we should tell player about armor damage
		welcomeMsg			True if we already said hello to player

		GLOBAL DATA

		status:				Ship's status
								Nil						= never encountered
								'joined					= Has joined the player
								'declined				= Player has declined escort
								'destroyed				= Dead
								'destroyedByPlayer		= Killed by player
								'returnedHome			= Left the player to return home
								
		ORDERS
		
		orderJoinPlayer:	Fire this event to order the wingman to join the player. The
							object will receive an OnWingmanJoinedPlayer event.
								
		OPTIONS
		
		These variables may be set in StaticData to alter the behavior of wingmen.
		
		maxSystemLevel:		If set, the wingman will leave the player if they exceed
							this system level.
							
		EVENTS
		
		The wingman type may override these events.
		
		OnWingmanJoinedPlayer: Fired when the wingman joins the player.
								
	-->

	<Type UNID="&baStdWingmanBase;">

		<Communications>
			<Message id="msgAttackTarget" name="Attack target" key="A">
				<OnShow>
					(and (objGetTarget gSender)
						(not (eq (objGetTarget gSender) (objGetTarget gSource)))
						(not (eq (objGetData gSource "behavior") 'goingHome))
						)
				</OnShow>
				
				<Invoke>
					(block ((target (objGetTarget gSender)))
						(switch
							(eq target gSource)
								(objSendMessageTranslate gSender gSource 'IcantAttackMyself)
							
							(not target)
								(objSendMessageTranslate gSender gSource 'NoTarget)
							
							(not (objIsAngryAt target gPlayerShip))
								(objSendMessageTranslate gSender gSource 'IcantAttackFriends)

							(block Nil
								(objSetData gSource "behavior" 'attackingTarget)
								(shpCancelOrders gSource)
								(shpOrder gSource 'attack target)
								(objSendMessageTranslate gSender gSource 'AttackTargetAck)
								)
							)
						)
				</Invoke>
			</Message>
			
			<Message id="msgBreakAndAttack" name="Break &amp; attack" key="B">
				<OnShow>
					(not (find '(goingHome attackingAtWill) (objGetData gSource 'behavior)))
				</OnShow>
				
				<Invoke>
					(intOrderBreakAndAttack gSource gSender True)
				</Invoke>
			</Message>

			<Message id="msgFormUp" name="Form up" key="F">
				<OnShow>
					(not (find '(escorting goingHome) (objGetData gSource 'behavior)))
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource "behavior"))
						(switch
							(eq behavior 'escorting)
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessageTranslate gSender gSource 'FormUpAck)
									)

							(block Nil
								(objSetData gSource "behavior" 'escorting)
								(if (or (eq behavior 'attackingTarget) (eq behavior 'attackingAtWill))
									(objSendMessageTranslate gSender gSource 'CancelAttackAck)
									(objSendMessageTranslate gSender gSource 'FormUpAck)
									)
									
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)
								)
							)
						)
				</Invoke>
			</Message>
			
			<Message id="msgStatus" name="Status" key="S">
				<OnShow>
					True
				</OnShow>
				
				<Invoke>
					(block (behavior armorDamage shieldLevel)
						(setq behavior (objGetData gSource "behavior"))
						
						(objSendMessage gSender gSource
							(switch
								(or (eq behavior 'attackingTarget) (eq behavior 'attackingAtWill))
									(objTranslate gSource 'StatusAttackingTarget)

								(eq behavior 'goingHome)
									(objTranslate gSource 'StatusGoingHome)
								
								(eq behavior 'repairingArmor)
									(objTranslate gSource 'StatusRepairingArmor)
									
								(eq behavior 'waiting)
									(objTranslate gSource 'StatusWaiting)
									
								(and (eq (setq armorDamage (objGetVisibleDamage gSource)) 0)
										(or (eq (setq shieldLevel (objGetShieldLevel gSource)) 100) (eq shieldLevel -1))
										)
									(objTranslate gSource 'Status100Percent)

								(eq armorDamage 0)
									(objTranslate gSource 'StatusShieldsDamaged { shieldLevel:shieldLevel } )
								
								(objTranslate gSource 'StatusArmorDamaged { armorDamage:armorDamage } )
								)
							)
							
						(objSetShowAsDestination gSource Nil 'autoclear)
						)
				</Invoke>
			</Message>

			<Message id="msgWait" name="Wait" key="W">
				<OnShow>
					(not (find '(waiting goingHome) (objGetData gSource 'behavior)))
				</OnShow>

				<Invoke>
					(block Nil
						(objSetData gSource "behavior" 'waiting)
						(objSendMessageTranslate gSender gSource 'WaitAck)
						
						(shpCancelOrders gSource)
						(shpOrder gSource 'hold)
						)
				</Invoke>
			</Message>
		</Communications>
		
		<Language>
			<String id="ArmorRepaired">"Armor repairs completed"</String>
			<String id="AttackTargetAck">"Acknowledged"</String>
			<String id="CancelAttackAck">"Acknowledged"</String>
			<Text id="EscortReportingIn">
				(if (not (objGetData gSource "welcomeMsg"))
					(block Nil
						(objSetData gSource "welcomeMsg" True)
						(objTranslate gSource 'WingmanJoined)
						)
					""
					)
			</Text>
			<String id="FormUpAck">"Acknowledged"</String>
			<String id="IcantAttackFriends">"Unable to comply"</String>
			<String id="IcantAttackMyself">"Unable to comply"</String>
			<String id="ImFarFromHome">"I'm far from home"</String>
			<String id="ImGoingHome">"Going home"</String>
			<String id="ImRepairingArmor">"Docking to repair armor"</String>
			<String id="ImTooFarFromHome">"I'm too far from home"</String>
			<String id="MyArmorNeedsRepair">"Armor repair needed"</String>
			<String id="NiceShooting">"Nice shooting!"</String>
			<String id="NoTarget">"No target selected"</String>
			<String id="NoTargetInRange">"No target in range"</String>
			<String id="Status100Percent">"No damage"</String>
			<String id="StatusArmorDamaged">"Armor is %armorDamage%% damaged"</String>
			<String id="StatusAttackingTarget">"Engaging target"</String>
			<String id="StatusGoingHome">"Returning home"</String>
			<String id="StatusRepairingArmor">"Repairing armor"</String>
			<String id="StatusShieldsDamaged">"Shields down to %shieldLevel%%"</String>
			<String id="StatusWaiting">"Waiting"</String>
			<String id="WaitAck">"Acknowledged"</String>
			<String id="WatchYourTargets">"Watch your targets!"</String>
			<String id="WingmanJoined">"Ready"</String>
			<String id="WingmanKilled">Wingman killed</String>

			<Text id="msgRefusesToDowngradeShip">

				%name% refuses to switch to an inferior ship.

			</Text>
		</Language>
		
		<Events>
			<OnBehavior>
				(block (behavior theTarget nextTime maxSystemLevel armorDamage)
					(setq behavior (objGetData gSource "behavior"))
					
					(switch
						; If we're injured and we're near a base that repairs armor then
						; dock with the base and get repaired

						(and (eq behavior 'escorting)
								(geq (setq armorDamage (objGetVisibleDamage gSource)) 10)
								(not (objIsUnderAttack gSource))
								)
							(switch
								; Some wingmen (like Jenna) doesn't want to proceed beyond a certain point
								(and (setq maxSystemLevel (objGetStaticData gSource "MaxSystemLevel"))
										(gr (sysGetLevel) maxSystemLevel)
										)
									(block Nil
										(objSetData gSource "behavior" 'goingHome)
										(objSendMessageTranslate gPlayerShip gSource 'ImGoingHome)
										
										(shpCancelOrders gSource)
										(shpOrder gSource 'hold 30)
										(shpOrder gSource 'gate (intGetGateToSystem gSource (objGetData gSource "homeSystem")))
										)
								
								; If there is a station that can repair armor, dock with it
								(setq theTarget (srvFindRepairArmor gSource 60 (itmGetLevel (shpGetArmor gSource 0))))
									(block Nil
										(objSetData gSource "behavior" 'repairingArmor)
										(objSendMessageTranslate gPlayerShip gSource 'ImRepairingArmor)
										
										(shpCancelOrders gSource)
										(shpOrder gSource 'dock theTarget)
										(shpOrder gSource 'wait (random 3 8))
										)
									
								; Otherwise, tell the player that we need repairs
								(and (geq armorDamage 50)
										(or (not (setq nextTime (objGetData gSource "nextArmorRepairMsg")))
											(geq (unvGetTick) nextTime)
											)
										)
									(block Nil
										(objSendMessageTranslate gPlayerShip gSource 'MyArmorNeedsRepair)
										(objSetData gSource "nextArmorRepairMsg" (add (unvGetTick) 3600))
										)
								)
						
						; If we're attempting to repair at a station that doesn't have enough free ports, go back to normal behavior.
						(and (eq behavior 'repairingArmor)
							(setq theTarget (shpGetOrderTarget gSource))
							(ls (objGetOpenDockingPortCount theTarget) 1)
							(not (find (staGetDockedShips theTarget) gSource)) ; Have to check this way because the station knows the ship is docking
																			   ; once the port is reserved, but the ship doesn't consider itself docked yet.
							gPlayerShip
							)
							(block nil
								(objSetData gSource 'behavior 'escorting)
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)
								)
						
						(and (neq behavior 'goingHome)
							(eq (shpGetOrder gSource) 'gate)
							gPlayerShip
							)
							(block ((message (cat "Warning: " (objGetName gSource) " was gating but not going home")))
								(objSetData gSource 'behavior 'escorting)
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)
								(printTo 'log message)
								(plyMessage gPlayer message)
								)
						
						)
					)
			</OnBehavior>

			<OnCreate>
				(block Nil
					(objSetData gSource "homeSystem" (sysGetNode))
					(sysAddObjRecurringTimerEvent 60 gSource "OnBehavior")
					)
			</OnCreate>

			<OnDestroy>
				(switch
					(= aDestroyReason 'removedFromSystem)
						Nil

					(= (objGetCharacterData gSource 'status) 'returnedHome)
						Nil

					(and gPlayerShip (eq aOrderGiver gPlayerShip))
						(objSetCharacterData gSource 'status 'destroyedByPlayer)

					(block Nil
						(objSetCharacterData gSource 'status 'destroyed)
						(plyMessage gPlayer (objTranslate gSource 'WingmanKilled))
						)
					)
			</OnDestroy>
			
			<OnEnteredGate>
				(if (eq (objGetData gSource "behavior") 'goingHome)
					(objSetCharacterData gSource 'status 'returnedHome)
					)
			</OnEnteredGate>
			
			<OnEnteredSystem>
				(block (maxSystemLevel)
					(setq maxSystemLevel (objGetStaticData gSource "MaxSystemLevel"))
					(switch
						(not maxSystemLevel)
							Nil
							
						(eq (objGetData gSource "homeSystem") (sysGetNode))
							Nil

						(geq (sysGetLevel) maxSystemLevel)
							(objSendMessageTranslate gPlayerShip gSource 'ImTooFarFromHome)

						(eq (sysGetLevel) (subtract maxSystemLevel 1))
							(objSendMessageTranslate gPlayerShip gSource 'ImFarFromHome)
						)
					)
			</OnEnteredSystem>

			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "behavior"))
					
					(if (eq behavior 'repairingArmor)
						(block Nil
							(intArmorRepairAll gSource)
							(objSendMessageTranslate gPlayerShip gSource 'ArmorRepaired)
							)
						)
					
					; Set orders and state
					
					(switch
						(not gPlayerShip)
							(block Nil
								(objSetData gSource 'behavior 'waiting)
								(shpOrder gSource 'hold)
								)
							
						(and (eq behavior 'attackingAtWill)
							(intOrderBreakAndAttack gSource gPlayerShip Nil)
							)
							Nil
								
						;	Default: return to formation.
						(block Nil
							(objSetData gSource 'behavior 'escorting)
							(shpOrder gSource 'follow gPlayerShip)
							)
						)
					)
			</OnOrdersCompleted>
			
			<OnPlayerLeftSystem>
				(block (behavior)
					(setq behavior (objGetData gSource "behavior"))
					(switch
						(or (not behavior)
								(eq behavior 'goingHome)
								)
							Nil

						; If we're waiting, stay in this system and wait for the player
						(or (eq behavior 'waiting)
								(eq behavior 'repairingArmor)
								)
							'waitForPlayer

						; Otherwise, follow the player through the gate
						'followPlayer
						)
					)
			</OnPlayerLeftSystem>
			
			<OnTranslateMessage>
				(switch
					(eq aMessage 'EscortReportingIn)
						(if (not (objGetData gSource "welcomeMsg"))
							(block Nil
								(objSetData gSource "welcomeMsg" True)
								(objTranslate gSource 'WingmanJoined)
								)
							""
							)
							
					(eq aMessage 'WatchYourTargets)
						(objTranslate gSource 'WatchYourTargets)
						
					(eq aMessage 'NiceShooting)
						(objTranslate gSource 'NiceShooting)
						
					Nil
					)
			</OnTranslateMessage>

			<OrderJoinPlayer>
				(block Nil
					(objSetProperty gSource 'playerWingman True)
					(objSetCharacterData gSource 'status 'joined)
					(objFireEvent gSource "OnWingmanJoinedPlayer")
					)
			</OrderJoinPlayer>
			
			<OrderLeavePlayer>
				(block Nil
					(objSetProperty gSource 'playerWingman Nil)
					(objSetData gSource "behavior" 'goingHome)
					
					(shpCancelOrders gSource)
					(shpOrder gSource 'hold 30)
					(shpOrder gSource 'gate)
					
					(objFireEvent gSource "OnWingmanLeftPlayer")
					)
			</OrderLeavePlayer>

			<CanUpgradeTo>
				;	This event is called when the player wants to give the wingman
				;	a new ship. By default, we only accept if the new ship is
				;	better (cost more) than the old one.

				(switch

					;	If the new ship is cheaper than this ship, then we do not
					;	allow the upgrade.

					(leq (objGetProperty (@ gData 'newShipObj) 'price) (objGetProperty gSource 'price))
						(objTranslate gSource 'msgRefusesToDowngradeShip {
							name: (objGetName gSource 0)
							})

					;	Otherwise, we allow it.

					True
					)
			</CanUpgradeTo>
		</Events>
	</Type>

<!-- Wingman encounter screen ==================================================

	Screen for meeting wingmen. 

	DATA
		wingman: The UNID of the wingman character (or, for backwards 
				compatibility, the type of the wingman ship).
	
	NOTES:

	*	Just supports join/reject for now.
	*	Code based on rpgPagePaneInit / dsRPGMission / dsRPGDialog.
	*	Could add support for multiple encounters / leaving / rejoining etc.

-->

	<DockScreen UNID="&dsRPGWingmanEncounter;"
		nestedScreen=	"true"
		inherit=		"&dsDockScreenBase;"
		>
		<OnScreenInit>
			(scrSetData gScreen 'wingman (@ gData 'wingman))
		</OnScreenInit>

		<InitialPane>
			(switch
				(not (typGetGlobalData (scrGetData gScreen 'wingman) 'status))
					"Intro"

				"AlreadyMeet"
				)
		</InitialPane>

		<Panes>
			<AlreadyMeet>
				<OnPaneInit>
					; Do nothing if already met
					(scrExitScreen gScreen)
				</OnPaneInit>
			</AlreadyMeet>

			<Intro>
				<OnPaneInit>
					(block (
						(wingman (scrGetData gScreen 'wingman))
						(textDesc (typTranslate wingman 'Intro))

						(pageCount (rpgPageCount textDesc))
						(pageNo (if (scrGetData gScreen 'curPage) (scrGetData gScreen 'curPage) 0))
						(pageDesc (rpgPageDesc textDesc pageNo))

						(actions (@ pageDesc 'actions))
						(atLastPage (= pageNo (- pageCount 1)))

						(nextActionID 0)
						)

						;	Set the page text
						(scrSetDesc gScreen (@ pageDesc 'desc))

						;	Add all the appropriate actions
						(switch
							;	If we're on the last page show the Accept/Decline actions.
							atLastPage
								(setq actions (list
									{
										label: (or (@ pageDesc 'acceptLabel)
											(typTranslate wingman 'AcceptLabel)
											(scrTranslate gScreen 'actionAccept)
											)
										code: (@ pageDesc 'acceptCode)
										nextPage: 'wingmanAccept
										}
									{
										label: (or (@ pageDesc 'declineLabel)
											(typTranslate wingman 'DeclineLabel)
											(scrTranslate gScreen 'actionDecline)
											)
										code: (@ pageDesc 'declineCode)
										nextPage: 'wingmanDecline
										}
									))

							;	If we don't have a list of actions, then we auto-generate
							;	them based on variables on the page descriptor.
							(!= (typeof actions) 'list)
								(setq actions (list {
									label: (or (@ pageDesc 'label) (@ pageDesc 'nextLabel) (scrTranslate gScreen 'actionContinue))
									nextPage: (or (@ pageDesc 'nextPage) 'nextPage)
									code: (or (@ pageDesc 'code) (@ pageDesc 'nextCode))
									}))
							)

						(enum actions actionDesc
							(block Nil
								(scrAddAction
									gScreen
									(cat "action" nextActionID)
									Nil
									(@ actionDesc 'label)
									Nil
									(switch
										(= (count (@ pageDesc 'actions)) 1)
											(list "default" "cancel")
										(= nextActionID 0)
											"default"
										(= nextActionID (- (count (@ pageDesc 'actions)) 1))
											"cancel"
										Nil
										)
									(lambda ()
										(block (
											(nextPage (or (@ actionDesc 'nextPage) (@ actionDesc 'nextPane)))
											)
											(if (@ actionDesc 'code)
												((@ actionDesc 'code))
												)

											(switch
												(not nextPage)
													(scrExitScreen gScreen)

												(= nextPage 'exitScreen)
													(scrExitScreen gScreen)

												(= nextPage 'forceUndock)
													(scrExitScreen gScreen 'forceUndock)

												(= nextPage 'wingmanAccept)
													(scrShowPane gScreen "ReplyAccept")

												(= nextPage 'wingmanDecline)
													(scrShowPane gScreen "ReplyDecline")

												(block Nil
													(scrSetData gScreen 'curPage (if (= nextPage 'nextPage) (+ pageNo 1) (rpgFindIndexByID gData nextPage)))
													(scrShowPane gScreen "Intro")
													)
												)
											)
										)
									)
								(setq nextActionID (add nextActionID 1))
								)
							)
						)
				</OnPaneInit>
				<Actions>
				</Actions>
			</Intro>


			<ReplyAccept>
				<OnPaneInit>
					(scrSetDesc gScreen (typTranslate (scrGetData gScreen 'wingman) 'AcceptReply))
				</OnPaneInit>
				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(block (
							(wingman (scrGetData gScreen 'wingman))

							wingmanObj
							)
							;	Create the wingman

							(switch
								;	First ask the type to create it.

								(setq wingmanObj (typFireEvent wingman 'OrderCreateShip { pos:(objGetPos gSource) status:'wingman }))
									Nil

								;	Otherwise, we assume the type is a ship class

								(setq wingmanObj (sysCreateShip wingman gSource (typGetProperty wingman 'defaultSovereign)))
								)

							;	Order them to follow the player

							(objFireEvent wingmanObj 'OrderJoinPlayer)

							;	Done

							(scrExitScreen gScreen)
							)
					</Action>
				</Actions>
			</ReplyAccept>

			<ReplyDecline>
				<OnPaneInit>
					(scrSetDesc gScreen (typTranslate (scrGetData gScreen 'wingman) 'DeclineReply))
				</OnPaneInit>
				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(block Nil
							(typSetGlobalData (scrGetData gScreen 'wingman) 'status 'declined)
							(scrExitScreen gScreen)
							)
					</Action>
				</Actions>
			</ReplyDecline>

		</Panes>
	</DockScreen>
	
	<Globals>
		(block Nil
			(setq intOrderBreakAndAttack (lambda (receiver sender acknowledge)
				(block (theTarget)
					(setq theTarget (or
						
						;	Get the closest angry target to the sender that the sender can detect.
						;	Store the result so we only have to check once each tick.
						(if (eq (unvGetTick) (objGetData sender 'closestTargetCheckTick))
						
							(objGetData sender 'closestBreakAndAttackTarget)
							
							(block Nil
								(objSetData sender 'closestTargetCheckTick (unvGetTick))
								(setq theTarget (sysFindObject sender "sTYAPN N:100;"))
								(objSetData sender 'closestBreakAndAttackTarget theTarget)
								theTarget
								)
							)
						
						;	If we're already attacking something, don't change target.
						(if (eq (shpGetOrder receiver) 'attack)
							(shpGetOrderTarget receiver)
							)
						
						;	Attack the closest target to ourself that we can detect, if any.
						(sysFindObject receiver "sTYAPN N:100;")
						))
					
					(switch
						(not theTarget)
							;	Nothing to attack.	
							(if acknowledge (objSendMessageTranslate sender receiver 'NoTargetInRange))
						
						(not (objMatches theTarget Nil 'stA))
							(block ((message (cat "Warning: " (objGetName receiver) " tried to break and attack an inactive object: " (objGetName theTarget))))
								(printTo 'log message)
								(plyMessage gPlayer message)
								(setq theTarget Nil)
								)
						
						(block Nil
							(objSetData receiver 'behavior 'attackingAtWill)
							(if acknowledge (objSendMessageTranslate sender receiver 'AttackTargetAck))
							(shpCancelOrders receiver)
							(shpOrder receiver 'attack theTarget)
							)
						)
					
					;	Return the target
					theTarget
					)
				))
			)
	</Globals>

</TranscendenceModule>

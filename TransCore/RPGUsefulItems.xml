<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- RPG USE ITEM ON ARMOR =====================================================

	This screen allows the player to use an item on an armor segment.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnArmor;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="armorSelector"
				dataFrom=	"player"
				list=		"aI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Armor Segment</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON DEVICE ====================================================

	This screen allows the player to use an item on an installed device.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnDevice;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="deviceSelector"
				dataFrom=	"player"
				list=		"dI"
				noEmptySlots="true"
				/>

		<Panes>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Device</Text>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM ON CARGO =====================================================

	This screen allows the player to use an item on an item in the cargo bay.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemOnCargo;"
			inherit=			"&dsRPGUseItemBase;"
			nestedScreen=		"true"
			>

		<Display type="itemPicker"
				dataFrom=	"player"
				list=		"*U"
				>
			<OnDisplayInit>
				(block (
					(useItem (scrGetData gScreen 'useItem))
					)
					(scrAddListFilter gScreen 'filterAll "All" (lambda (theItem)
							(and (itmMatches theItem "*U") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterInstallable "Devices &amp; Armor" (lambda (theItem)
							(and (itmMatches theItem "adUN") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterInstallable "Damaged Items" (lambda (theItem)
							(and (itmMatches theItem "adUD") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterGeneral "General" (lambda (theItem)
							(and (itmMatches theItem "*~admU") (not (itmIsEqual theItem useItem)))
							))
					(scrAddListFilter gScreen 'filterAmmo "Ammo" (lambda (theItem)
							(and (itmMatches theItem "mU") (not (itmIsEqual theItem useItem)))
							))

					;	Do not need to reproduce details shown in itemPicker list
					(scrSetData gScreen 'hideCurrent True)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
		</Panes>

		<Language>
		</Language>
	</DockScreen>

<!-- RPG USE ITEM BASE =========================================================

	Base class for the various Use Item on XYZ dockscreens.

	gData uses the following fields:

		useItem:	The item being used. If not specifed we check gItem instead

		screenSet:	An RPG Screen Set structure (if we've been called from the
					primary use item screen

-->

	<DockScreen UNID="&dsRPGUseItemBase;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			name=				"=(itmGetName (or (@ gData 'useItem) gItem) 'capitalize)"
			>

		<OnScreenInit>
			(scrSetData gScreen 'useItem (or (@ gData 'useItem) gItem))
		</OnScreenInit>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(useItem (@ (filter (objGetItems gPlayerShip '*) theItem (itmIsEqual theItem (scrGetData gScreen 'useItem))) 0))
						(theShip gPlayerShip)
						(dstItem (scrGetItem gScreen))
						(useInfo (itmFireEvent useItem 'CanUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								} ))
						)

						;	Set the description
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem '(capitalize count))
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(switch
							(not dstItem)
								(scrSetDescTranslate gScreen 'descNoItemsHere)

							(@ useInfo 'desc)
								(scrSetDesc gScreen (@ useInfo 'desc))

							(scrSetDescTranslate gScreen 'descCanNotUse {
								useItem: (itmGetName useItem 'article)
								dstItem: (itmGetName dstItem 'article)
								})
							)
						(scrEnableAction gScreen 'actionUse (@ useInfo 'canUse))

						(rpgInitScreenSet (@ gData 'screenSet))
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionUse" default="1">
						(block (
							(useItem (scrGetData gScreen 'useItem))
							(theShip gPlayerShip)
							(dstItem (scrGetItem gScreen))
							(theCursor (scrGetListCursor gScreen))
							result
							)
							;	Use the item
							(setq result (itmFireEvent useItem 'OnUseOnItem {
								itemToUseOn: dstItem
								shipObj: theShip
								}))
								
							(if (not (itmIsKnown dstItem))
								(typSetData &dsRPGUseItemBase; 'hasUsedUnidentifiedItem True)
								)

							;	Restore the cursor position
							(scrSetListCursor gScreen theCursor)

							;	Store result and display it
							(scrSetData gScreen 'usageResult result)
							(scrShowPane gScreen 'ShowResult)
							)
					</Action>
				</Actions>
			</Default>

			<ShowResult noListNavigation="true">
				<OnPaneInit>
					(block (
						(useItem (scrGetData gScreen 'useItem))
						(dstItem (scrGetItem gScreen))
						(theShip gPlayerShip)
						(result (scrGetData gScreen 'usageResult))
						)
						(scrSetControlValue gScreen 'useItem {
							title: (itmGetName useItem 'capitalize)
							desc: (itmGetProperty useItem 'description)
							})

						(if (not (scrGetData gScreen 'hideCurrent))
							(scrSetControlValue gScreen 'currentItem {
								source: theShip
								item: dstItem
								})
							)

						(scrSetDesc gScreen (@ result 'desc))

						(if (and (objHasItem theShip useItem 1) (not (@ result 'nextScreen)))
							(scrShowAction gScreen 'actionDone Nil)
							(scrShowAction gScreen 'actionContinue Nil)
							)
						)
				</OnPaneInit>

				<Controls>
					<ItemDisplay id="useItem"/>
					<ItemDisplay id="currentItem"/>
				</Controls>

				<Actions>
					<Action id="actionContinue" default="1" cancel="1">
						(scrShowPane gScreen 'Default)
					</Action>
					<Action id="actionDone" default="1" cancel="1">
						(block (
							(result (scrGetData gScreen 'usageResult))
							)
							(if (@ gData 'screenSet)
								(scrExitScreen gScreen)
								)
							(switch
								(= (@ result 'nextScreen) 'forceUndock)
									(scrExitScreen gScreen 'forceUndock)

								(= (@ result 'nextScreen) 'forceExit)
									(scrExitScreen gScreen)

								(@ result 'nextScreen)
									(block Nil
										(scrExitScreen gScreen)
										(scrShowScreen gScreen (@ result 'nextScreen) (@ result 'nextScreenData))
										)

								(scrExitScreen gScreen)
								)
							)
					</Action>
				</Actions>
			</ShowResult>
		</Panes>

		<Language>
			<Text id="actionUse">[U]se on this Item</Text>

			<Text id="descCanNotUse">You cannot use %useItem% on %dstItem%.</Text>
		</Language>
		<Events>
			<GetGlobalAchievements>
				(if (not (typGetData &dsRPGUseItemBase; 'hasUsedUnidentifiedItem))
					(list (list "Never used any unidentified items" Nil (typTranslate &unidCommonText; 'notes)))
					)
			</GetGlobalAchievements>
		</Events>
	</DockScreen>


<!-- BASE CLASSES -->

	<!-- Armor Repair Item Base Class

	Armor repair items should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnArmor.

	EVENTS
		CanRepairItem - override this event to limit which types of armor can be repaired

	STATIC DATA
		RepairHP - number of HP repaired in a typical use of this item

    -->

	<Type UNID="&baStdArmorRepair;">
		<Events>
			<CanRepairItem>True</CanRepairItem>

			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(shipObj (@ gData 'shipObj))
					(armorNoun (cat (objGetArmorName shipObj dstItem) " " (itmGetName dstItem 'noModifiers)))
					(skillLevel (typGetData &baStdArmorRepair; 'skillLevel))
					(useDesc (switch
						(ls skillLevel 2)	'descUsageOK1
						(ls skillLevel 5)	'descUsageOK2
						(ls skillLevel 10)	'descUsageOK3
											'descUsageOK4
						))
					(minArmorLevel (max 1 (- (itmGetLevel gItem) 3)))
					(maxArmorLevel (+ (itmGetLevel gItem) 4))
					(armorLevel (itmGetProperty dstItem 'repairLevel))
					)
					(switch
						;	Armor repair items only work on armor
						(not (itmMatches dstItem "a"))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageNotArmor {
									useItem: (itmGetName gItem 'plural)
									dstItem: (itmGetName dstItem 'article)
									})
								}

						;	Disallow uninstalled armor as it does not record HP
						(not (itmIsInstalled dstItem))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageInstalledOnly {
									useItem: (itmGetName gItem 'plural)
									dstItem: (itmGetName dstItem 'article)
									})
								}

						;	Item is unidentified (assume it is a barrel for now)
						(not (itmIsKnown gItem))
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageUnknown {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	Armor segment is not damaged
						(= (objGetArmorDamage shipObj dstItem) 0)
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageArmorNotDamaged {
									useItem: (itmGetName gItem)
									dstItem: (itmGetName dstItem)
									armorNoun: armorNoun
									})
								}

						;	Check if we can repair armor with the given item
						(not (and (setq aItemToRepair dstItem)
								(objFireItemEvent shipObj gItem 'CanRepairItem { itemToRepair:dstItem })
								))
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descUsageCanNotRepair {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	We cannot repair armor that is too low level
						(ls armorLevel minArmorLevel)
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descArmorTooPrimitive {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	We cannot repair armor that is too high level
						(gr armorLevel maxArmorLevel)
							{
								canUse: Nil
								desc: (itmTranslate gItem 'descArmorTooAdvanced {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}

						;	Otherwise OK
						{
							canUse: True
							desc: (itmTranslate gItem useDesc {
								useItem: (itmGetName gItem 'article)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(shipObj (@ gData 'shipObj))
					(repair (eval (itmGetStaticData gItem 'RepairHP)))
					(descIntro (itmTranslate gItem 'descResultIntro))
					(minArmorLevel (max 1 (- (itmGetLevel gItem) 3)))
					(maxArmorLevel (+ (itmGetLevel gItem) 4))
					(armorLevel (itmGetProperty dstItem 'repairLevel))
					resultDesc hpRepaired
					)

					(switch
						(not (itmMatches dstItem "a"))
							(setq resultDesc 'descResultNotArmor)

						;	NOTE: We need to check some of these conditions again because if this
						;	was an unknown item, we don't know that it won't work until we try it.

						(= (objGetArmorDamage shipObj dstItem) 0)
							(setq resultDesc 'descResultNotDamaged)

						(not (objFireItemEvent shipObj gItem 'CanRepairItem { itemToRepair:dstItem }))
							(setq resultDesc 'descResultCannotRepair)

						;	We cannot repair armor that is too low level
						(ls armorLevel minArmorLevel)
							(setq resultDesc 'descResultArmorTooPrimitive)

						;	We cannot repair armor that is too high level
						(gr armorLevel maxArmorLevel)
							(setq resultDesc 'descResultArmorTooAdvanced)

						(not repair)
							(setq resultDesc 'descResultItemError)

						(block (
							(armorSeg (itmGetArmorInstalledLocation dstItem))
							(skillLevel (typGetData &baStdArmorRepair; 'skillLevel))

							;	As skill level increased, the player's failure chance
							;	decreases. Also the amount of hp repaired increased.
							(failureChance (switch
								(ls skillLevel 2)	20
								(ls skillLevel 5)	10
								(ls skillLevel 10)	5
													0
								))
							(repairScale (switch
								(ls skillLevel 2)	80
								(ls skillLevel 5)	100
								(ls skillLevel 10)	110
									(min (+ 70 (* skillLevel 5)) 200)
								))
							(usedUp 100)
							)
							;	If the repairing item is damaged armor, then we don't repair as much
							(if (itmMatches theItem "aD")
								(setq repair (/ repair 2))
								)

							;	Scale repair HP with skill level
							(setq repair (/ (* repair repairScale) 100))

							;	Do the repairs
							(switch
								(leq (random 1 100) failureChance)
									(if (= (random 1 2) 1)
										;	Sometimes we fail and damage the armor
										(block Nil
											(shpDamageArmor shipObj armorSeg 7 (/ (* repair (random 20 100)) 100))
											(setq resultDesc 'descResultDamagedMore)
											)

										;	Sometimes we fail without damaging further
										(setq resultDesc 'descResultFailed)
										)

								(block ()
									(setq hpRepaired (objRepairArmor shipObj dstItem repair))
									(setq resultDesc 'descResultRepaired)
										
									;	How much of the kit did we use?
									(if (gr repair 0)
										(setq usedUp (/ (* 100 hpRepaired) repair))
										)

									;	Skill level increases
									(typIncData &baStdArmorRepair; 'skillLevel)
									)
								)

							;	Use up the item
							(if (or (ls skillLevel 10)
									(geq usedUp 20)
									(leq (random 1 100) (add usedUp 20))
									)
								(objRemoveItem shipObj gItem 1)

								; Item is not used up
								(setq resultDesc 'descResultReusable)
								)
							)
						)

					;	Identify the item
					(itmSetKnown gItem)

					{
						desc: (cat
							descIntro (if descIntro " ")
							(itmTranslate gItem resultDesc {
								useItem: (itmGetName gItem)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								hpRepaired: (fmtNoun (typTranslate &baStdArmorRepair; 'nounHitPoints) hpRepaired 'countAlways)
								})
							)
						}
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descUsageArmorNotDamaged">The ship's %armorNoun% is not damaged.</Text>
			<Text id="descUsageCanNotRepair">Unfortunately, you cannot repair %dstItem% with %useItem%.</Text>
			<Text id="descUsageInstalledOnly">%UseItem% can only be used on installed armor segments.</Text>
			<Text id="descUsageNotArmor">%UseItem% are used for repairing armor and will not function on %dstItem%.</Text>
			<Text id="descUsageUnknown">The barrel seems to contain some kind of armor paste. You can use it on %dstItem%.</Text>
			<Text id="descArmorTooPrimitive">Unfortunately, %dstItem% is too primitive to be repaired with %useItem%.</Text>
			<Text id="descArmorTooAdvanced">Unfortunately, %dstItem% is too advanced to be repaired with %useItem%.</Text>

			<Text id="descUsageOK1">You can attempt to repair %dstItem% with %useItem%, though you do not have much experience repairing armor.</Text>
			<Text id="descUsageOK2">You can attempt to repair %dstItem% with %useItem%; you have some experience repairing armor.</Text>
			<Text id="descUsageOK3">You can attempt to repair %dstItem% with %useItem%; you are proficient at repairing armor.</Text>
			<Text id="descUsageOK4">You can attempt to repair %dstItem% with %useItem%; you are an expert at repairing armor.</Text>

			<Text id="descResultCanNotRepair">Unfortunately, you cannot repair %dstItem% with it.</Text>
			<Text id="descResultDamagedMore">Unfortunately, your attempt to repair the armor has only damaged it further.</Text>
			<Text id="descResultFailed">Unfortunately, your attempt to repair the armor was unsuccessful and the %useItem% was ruined in the process.</Text>
			<Text id="descResultItemError">ERROR: &lt;RepairHP&gt; static data not found.</Text>
			<Text id="descResultNotArmor">That is not an armor segment.</Text>
			<Text id="descResultNotDamaged">That armor segment is not damaged. There is no need to attempt repairs.</Text>
			<Text id="descResultRepaired">You have successfully repaired %hpRepaired% of damage to your armor.</Text>
			<Text id="descResultArmorTooPrimitive">Unfortunately, %dstItem% is too primitive to be repaired with it.</Text>
			<Text id="descResultArmorTooAdvanced">Unfortunately, %dstItem% is too advanced to be repaired with it.</Text>
			<Text id="descResultReusable">
				You have successfully repaired %hpRepaired% of damage to your armor.

				There is still enough of the %useItem% left to repair other segments.
			</Text>
			
			<Text id="nounHitPoints">hit point(s)</Text>
		</Language>
	</Type>

	<!-- Paste Barrel Item Base Class

	Armor coating barrels should inherit from this class. Typically they should
	set useScreen to dsRPGUseItemOnArmor.

	STATIC DATA
		enhancement - enhancement to apply to armor
		enhancementTable - table of criteria and enhancements for different armor types / levels

    -->

	<Type UNID="&baStdPasteBarrel;">
		<Events>
			<CanUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					)
					(switch
						(not (itmMatches dstItem "a"))
							Nil

						(itmIsKnown gItem)
							{
								canUse: True
								desc: (itmTranslate gItem 'descUsageOK {
									useItem: (itmGetName gItem 'article)
									dstItem: (itmGetName dstItem '(demonstrative noModifiers))
									})
								}
						{
							canUse: True
							desc: (itmTranslate gItem 'descUsageUnknown {
								useItem: (itmGetName gItem)
								dstItem: (itmGetName dstItem '(demonstrative noModifiers))
								})
							}
						)
					)
			</CanUseOnItem>

			<OnUseOnItem>
				(block (
					(dstItem (@ gData 'itemToUseOn))
					(enhancement (itmGetStaticData gItem 'enhancement))
					(enhancementTable (itmGetStaticData gItem 'enhancementTable))
					enhancementInfo
					)
					;	Search the enhancementTable for first matching entry
					(enumWhile enhancementTable (not enhancementInfo) theEntry
						(if (and (@ theEntry 'criteria) (itmMatches dstItem (@ theEntry 'criteria)))
							(setq enhancementInfo theEntry)
							))

					;	General enhancement has higher priority than table
					(if enhancement (set@ enhancementInfo 'enhancement enhancement))

					(switch
						(not (itmMatches dstItem "aI"))
							"only installed armor for now"

						(not enhancementInfo)
							"ERROR: not implemented yet"

						(block (result)
							;	Apply enhancement
							(setq result (shpEnhanceItem gPlayerShip dstItem (@ enhancementInfo 'enhancement)))

							;	Remove the armor paste from the player's cargo
							(objRemoveItem gPlayerShip gItem 1)

							;	Identify the item
							(itmSetKnown gItem)

							{
								desc: (cat
									(itmTranslate gItem 'descResultIntro)
									(intArmorEnhanceStatus result)
									(if (@ enhancementInfo 'descID) " ")
									(itmTranslate gItem (cat "descResult" (@ enhancementInfo 'descID)))
									)
								}
							)
						)
					)
			</OnUseOnItem>
		</Events>

		<Language>
			<Text id="descUsageOK">You can use %useItem% on %dstItem%.</Text>
			<Text id="descUsageUnknown">The barrel seems to contain some kind of armor paste. You can use it on %dstItem%.</Text>

			<Text id="descResultTooAdvanced">Unfortunately, your armor is too strong for the nanomachines.</Text>
			<Text id="descResultTooPrimitive">Unfortunately, your armor is too primitive for the nanomachines.</Text>
		</Language>
	</Type>

<!-- CODE -->

	<Globals>
		(block Nil
			;	Just a wrapper to save some typing
			(setq itmTranslate (lambda (theItem textID data default)
				(typTranslate (itmGetType theItem) textID data default)
				))
			)
	</Globals>

</TranscendenceModule>

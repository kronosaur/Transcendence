<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	
<!-- SHIP BROKER ===============================================================

	This screen allows the player to trade in their ship for a new one.
	
	gData uses the following fields:
	
		checkMilitaryID: If True, we don't sell military ships without an ID.
		createCriteria: Criteria of ship types to create (optional)
		maxCount: Maximum number of ships to create.

-->
	
	<DockScreen unid="&dsRPGShipBroker;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		
		<OnScreenInit>
			(block (
				(maxCount (if (@ gData 'maxCount) (@ gData 'maxCount) (random 3 5)))
				(shipIDList (objGetData gSource 'shipBroker.list))
				)
				
				;	If there are no ships in our list, then we need to create some
				
				(if (not shipIDList)
					(setq shipIDList (rpgCreateShipsToSell gSource maxCount (@ gData 'createCriteria)))
					)
				)
		</OnScreenInit>
		
		<Display type="carouselSelector"
				style="shipList"
				>
			<OnDisplayInit>
				(map (objGetData gSource 'shipBroker.list) shipID
					(block (
						(shipObj (objGetObjByID shipID))
						(shipClass (objGetType shipObj))
						)
						{
						title: (objGetName shipObj 'generic)
						icon: (shpGetImageDesc shipClass { rotation:0 })

						largeIcon: (shpGetImageDesc shipClass { type:'schematic })
						details: 
							(or (objFireEvent shipObj 'GetShipDetails { })
								(rpgGetShipDetails shipObj { })
								)

						shipObj: shipObj
						}
						)
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(switch
						
						;	No selection

						(not (scrGetListEntry gScreen))
							(block ()
								(scrSetDescTranslate gScreen 'descNoShipsForSale)
								(scrEnableAction gScreen 'actionBuyShip Nil)
								(scrShowAction gScreen 'actionBuyForWingman Nil)
								)

						;	Ship selected

						(block (
							(theEntry (scrGetListEntry gScreen))
							(selObj (@ theEntry 'shipObj))
							(currency (objGetProperty gSource 'currency))
						
							;	Compute some prices
						
							(playerBalance (objGetBalance gPlayerShip currency))
							(playerShipPrice (or (objGetShipBuyPrice gSource gPlayerShip) 0))
							(newShipPrice (objGetShipSellPrice gSource selObj))
							(tradeInPrice (- newShipPrice playerShipPrice))
						
							;	Compute some descriptions
						
							(newShipDesc (objGetProperty selObj 'playerDesc))

							;	Wingmen
						
							(allWingmen (sysFindObject gPlayerShip "s +property:playerWingman; +property:character;"))
							(validWingmen Nil)

							;	Vars
						
							(canBuy Nil)
							(canUpgradeResult Nil)
							)
						
							;	Set the description
						
							(scrSetDesc gScreen
								(if (geq tradeInPrice 0)
									(scrTranslate gScreen 'descPrices {
										fullPrice: (fmtCurrency currency newShipPrice)
										playerShipPrice: (fmtCurrency currency playerShipPrice)
										tradeInPrice: (fmtCurrency currency tradeInPrice)
										})
									(scrTranslate gScreen 'descPricesRebate {
										fullPrice: (fmtCurrency currency newShipPrice)
										playerShipPrice: (fmtCurrency currency playerShipPrice)
										tradeInRebate: (fmtCurrency currency (- tradeInPrice))
										})
									)

								"\n"
								"\n"

								newShipDesc
								)

							;	See if the player can upgrade to this ship.

							(switch

								;	See if the ship can be traded

								(!= (setq canUpgradeResult (objFireEvent gPlayerShip 'CanUpgradeTo { newShipObj:selObj })) True)
									(block ()
										(scrEnableAction gScreen 'actionBuyShip Nil)
										(scrSetActionDesc gScreen 'actionBuyShip canUpgradeResult)
										(dbgOutput "Fail: " canUpgradeResult)
										)

								(!= (setq canUpgradeResult (objFireEvent selObj 'CanUpgradeFrom { oldShipObj:gPlayerShip })) True)
									(block ()
										(scrEnableAction gScreen 'actionBuyShip Nil)
										(scrSetActionDesc gScreen 'actionBuyShip canUpgradeResult)
										)

								;	If a military ID is required, check

								(and (@ gData 'checkMilitaryID)
										(objHasAttribute selObj 'military)
										(not (objGetItems gPlayerShip "* +militaryID;"))
										)
									(block ()
										(scrEnableAction gScreen 'actionBuyShip Nil)
										(scrSetActionDesc gScreen 'actionBuyShip (scrTranslate gScreen 'descNeedMilitaryID))
										)

								;	If the player cannot afford the ship, then say so

								(gr tradeInPrice (objGetBalance gPlayerShip currency))
									(block ()
										(scrEnableAction gScreen 'actionBuyShip Nil)
										(scrSetActionDesc gScreen 'actionBuyShip (scrTranslate gScreen 'descCantAffordToBuy))
										)

								;	If we have too much cargo, then say so

								(gr (objGetProperty gPlayerShip 'cargoSpaceUsedKg) (objGetProperty selObj 'cargoSpaceFreeKg))
									(block ()
										(scrEnableAction gScreen 'actionBuyShip Nil)
										(scrSetActionDesc gScreen 'actionBuyShip (scrTranslate gScreen 'descTooMuchCargo))
										)

								;	If we get a rebate

								(ls tradeInPrice 0)
									(scrSetActionDesc gScreen 'actionBuyShip (scrTranslate gScreen 'descBuyShipRebate { price: (fmtCurrency currency (- tradeInPrice)) }))

								;	Allow buy

								(block ()
									(scrSetActionDesc gScreen 'actionBuyShip (scrTranslate gScreen 'descBuyShip { price: (fmtCurrency currency tradeInPrice) }))
									)
								)

							;	If we have wingmen, then enable the button to buy a ship for wingmen

							(switch
								(not allWingmen)
									(scrShowAction gScreen 'actionBuyForWingman Nil)

								;	If a military ID is required, check

								(and (@ gData 'checkMilitaryID)
										(objHasAttribute selObj 'military)
										(not (objGetItems gPlayerShip "* +militaryID;"))
										)
									(block ()
										(scrEnableAction gScreen 'actionBuyForWingman Nil)
										(scrSetActionDesc gScreen 'actionBuyForWingman (scrTranslate gScreen 'descNeedMilitaryID))
										)

								;	If none of the wingmen want this ship

								(not (setq validWingmen
										(filter allWingmen wingmanObj
											(and (= (objFireEvent wingmanObj 'CanUpgradeTo { newShipObj:selObj }) True)
												(= (objFireEvent selObj 'CanUpgradeFrom { oldShipObj:wingmanObj }) True)
												)
											)
										))
									(block ()
										(scrEnableAction gScreen 'actionBuyForWingman Nil)
										(scrSetActionDesc gScreen 'actionBuyForWingman (scrTranslate gScreen 'descAllWingmenRefuse))
										)

								;	See if we can afford it

								(not (filter validWingmen wingmanObj
										(geq (objGetBalance gPlayerShip currency)
											(- newShipPrice (or (objGetShipBuyPrice gSource wingmanObj) 0))
											)
										))
									(block ()
										(scrEnableAction gScreen 'actionBuyForWingman Nil)
										(scrSetActionDesc gScreen 'actionBuyForWingman (scrTranslate gScreen 'descCantAffordForWingmen))
										)

								;	OK

								(block ()
									(scrShowAction gScreen 'actionBuyForWingman True)
									(scrSetActionDesc gScreen 'actionBuyForWingman (scrTranslate gScreen 'descBuyForWingman))
									)
								)

							;	Remember some calculations
						
							(scrSetData gScreen 'buyPrice newShipPrice)
							(scrSetData gScreen 'tradeInPrice tradeInPrice)
							(scrSetData gScreen 'playerShipPrice playerShipPrice)
							)
						)
				</OnPaneInit>
				
				<Actions>
					<Action id="actionBuyShip">
						(block (
							(theEntry (scrGetListEntry gScreen))
							(selObj (@ theEntry 'shipObj))
							)
							(scrShowScreen gScreen &dsRPGShipBrokerConfirm; {
								newShipID: (objGetID selObj)
								newShipPrice: (scrGetData gScreen 'buyPrice)
								oldShipID: (objGetID gPlayerShip)
								oldShipPrice: (scrGetData gScreen 'playerShipPrice)
								price: (scrGetData gScreen 'tradeInPrice)
								})
							)
					</Action>

					<Action id="actionBuyForWingman">
						(block (
							(theEntry (scrGetListEntry gScreen))
							(selObj (@ theEntry 'shipObj))
							(allWingmen (sysFindObject gPlayerShip "s +property:playerWingman; +property:character;"))
							(wingmanObj (if (= (count allWingmen) 1) (@ allWingmen 0)))
							(wingmanPrice (or (objGetShipBuyPrice gSource wingmanObj) 0))
							)
							(switch
								;	If we only have a single wingman, then go directly to the
								;	confirm screen.

								wingmanObj
									(scrShowScreen gScreen &dsRPGShipBrokerConfirm; {
										newShipID: (objGetID selObj)
										newShipPrice: (scrGetData gScreen 'buyPrice)
										oldShipID: (objGetID wingmanObj)
										oldShipPrice: wingmanPrice
										price: (- (scrGetData gScreen 'buyPrice) wingmanPrice)
										})

								;	Otherwise, we need to select a wingman

								(scrShowScreen gScreen &dsRPGShipBrokerWingman; {
									newShipID: (objGetID selObj)
									price: (scrGetData gScreen 'buyPrice)
									})
								)
							)
					</Action>

					<Action id="actionDone" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
		
		<Language>
			<Text id="actionBuyShip">[B]uy Ship</Text>
			<Text id="actionBuyForWingman">Buy for [W]ingman</Text>
			<Text id="actionTradeShip">[T]rade Ship</Text>
			
			<Text id="descPrices">
				Price: %fullPrice%\n
				Trade-in Price: %tradeInPrice%
			</Text>
			<Text id="descPricesRebate">
				Price: %fullPrice%\n
				Trade-in Rebate: %tradeInRebate%
			</Text>

			<Text id="descBuyShip">
				Trade in your ship for %price%.
			</Text>
			<Text id="descBuyShipRebate">
				Receive %price% when you trade in your ship.
			</Text>
			<Text id="descCantAffordToBuy">
				You cannot afford to buy this ship.
			</Text>
			<Text id="descTooMuchCargo">
				You have too much cargo to fit into this ship's cargo hold.
			</Text>
			<Text id="descNoShipsForSale">
				We do not have any ships for sale.
			</Text>

			<Text id="descBuyForWingman">
				Trade in a wingman's ship.
			</Text>
			<Text id="descAllWingmenRefuse">
				Your wingmen do not want this ship.
			</Text>
			<Text id="descCantAffordForWingmen">
				You cannot afford to buy this ship.
			</Text>
			<Text id="descNeedMilitaryID">
				Requires a military ID
			</Text>
		</Language>
	</DockScreen>

<!-- SHIP BROKER CONFIRM

	DATA

	newShipID: ID of ship being sold
	oldShipID: ID of ship being traded in
	newShipPrice: Price of new ship
	oldShipPrice: Price of old ship
	price: Price of trade in (may be negative if we're paying the player)

-->

	<DockScreen unid="&dsRPGShipBrokerConfirm;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Display type="carouselSelector"
				style="shipCompare"
				>
			<OnDisplayInit>
				(map (list (@ gData 'oldShipID) (@ gData 'newShipID)) shipID 
					(block (
						(shipObj (objGetObjByID shipID))
						(shipClass (objGetType shipObj))
						)
						{
						title: (objGetName shipObj 'generic)
						icon: (shpGetImageDesc shipClass { rotation:0 })

						largeIcon: (shpGetImageDesc shipClass { type:'schematic })
						details:
							(or (objFireEvent shipObj 'GetShipDetails { })
								(rpgGetShipDetails shipObj { })
								)

						shipObj: shipObj
						})
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(currency (objGetProperty gSource 'currency))

						(newShipObj (objGetObjByID (@ gData 'newShipID)))
						(newShipPrice (@ gData 'newShipPrice))
						(oldShipObj (objGetObjByID (@ gData 'oldShipID)))
						(oldShipPrice (@ gData 'oldShipPrice))
						(price (@ gData 'price))

						(oldShipName
							(switch
								(= oldShipObj gPlayerShip)
									(scrTranslate gScreen 'phraseYourShip)

								(scrTranslate gScreen 'phraseWingmanShip { name:(objGetName oldShipObj) className:(objGetName oldShipObj 'generic) })
								)
							)

						(canTrade Nil)
						(confirmDesc Nil)
						(result Nil)
						)

						;	See if we can trade this ship

						(switch
							;	If we cannot afford this ship, then gray out

							(gr price (objGetBalance gPlayerShip currency))
								(block ()
									(setq confirmDesc (scrTranslate gScreen 'descCantAfford))
									)

							;	If we're trading our own ship...

							(= oldShipObj gPlayerShip)
								(block ()
									(setq confirmDesc (scrTranslate gScreen 'descTradeYourShipConfirm {
										newShipName:(objGetName newShipObj 'article)
										}))
									(setq canTrade True)
									)

							;	Ask the wingman if they want the trade. If not, then we fail

							(!= (setq result (objFireEvent oldShipObj 'CanUpgradeTo { newShipObj:newShipObj })) True)
								(block ()
									(setq confirmDesc result)
									)

							;	Ask the new class if it is allowed to replace the wingman

							(!= (setq result (objFireEvent newShipObj 'CanUpgradeFrom { oldShipObj:oldShipObj })) True)
								(block ()
									(setq confirmDesc result)
									)

							;	Wingman has too much cargo

							(gr (objGetProperty oldShipObj 'cargoSpaceUsedKg) (objGetProperty newShipObj 'cargoSpaceFreeKg))
								(setq confirmDesc (scrTranslate gScreen 'descTooMuchCargo {
									wingmanName:(objGetName oldShipObj 0)
									newShipName:(objGetName newShipObj 'article)
									}))

							;	Otherwise, we're trading one of our wingmen...

							(block ()
								(setq confirmDesc (scrTranslate gScreen 'descTradeWingmanShipConfirm {
									wingmanName:(objGetName oldShipObj 0)
									newShipName:(objGetName newShipObj 'article)
									}))
								(setq canTrade True)
								)
							)

						;	If we're getting a refund, then warn the player that this ship might be worse

						(if (and canTrade (ls price 0))
							(scrSetControlValue gScreen 'descWarning (scrTranslate gScreen 'descTooCheapWarning))
							)

						;	Set the description
						
						(scrSetDesc gScreen
							(switch
								(= oldShipPrice 0)
									(scrTranslate gScreen 'descPricesNoTradeIn {
										fullPrice: (fmtCurrency currency price)
										oldShipName: oldShipName
										})

								(ls price 0)
									(scrTranslate gScreen 'descPricesRefund {
										fullPrice: (fmtCurrency currency newShipPrice)
										oldShipName: oldShipName
										oldShipPrice: (if oldShipPrice (fmtCurrency currency oldShipPrice) "N/A")
										tradeInPrice: (if oldShipPrice (fmtCurrency currency (- price)) "N/A")
										})
									
								(scrTranslate gScreen 'descPrices {
									fullPrice: (fmtCurrency currency newShipPrice)
									oldShipName: oldShipName
									oldShipPrice: (if oldShipPrice (fmtCurrency currency oldShipPrice) "N/A")
									tradeInPrice: (if oldShipPrice (fmtCurrency currency price) "N/A")
									})
								)

							"\n\n"

							confirmDesc
							)

						;	Enable action

						(scrEnableAction gScreen 'actionConfirm canTrade)
						)
				</OnPaneInit>

				<Controls>
					<Text id="desc"/>
					<Text id="descWarning" style="warning"/>
				</Controls>

				<Actions>
					<Action id="actionConfirm" default="1">
						(block (
							(selObj (objGetObjByID (@ gData 'newShipID)))

							(currency (objGetProperty gSource 'currency))
							(tradeInPrice (@ gData 'price))
							
							(shipIDList (objGetData gSource 'shipBroker.list))
							
							(oldShip (objGetObjByID (@ gData 'oldShipID)))
							(portPos nil)
							)
							
							;	Move all the cargo from the old ship to the new ship
							
							(enum (objGetItems oldShip "*U") theItem
								(block ()
									(objRemoveItem oldShip theItem)
									(objAddItem selObj theItem)
									)
								)
								
							;	Remove the ship from our list of ships to sell
							
							(setq shipIDList (filter shipIDList theID (!= theID (objGetID selObj))))
							(objSetData gSource 'shipBroker.list shipIDList)
							
							;	Charge the player
							
							(if (geq tradeInPrice 0)
								(objCharge gPlayerShip currency tradeInPrice)
								(objCredit gPlayerShip currency (- tradeInPrice))
								)
								
							;	Trade ships
							
							(objResume selObj)
							(switch
								(= oldShip gPlayerShip)
									(plyChangeShip gPlayer selObj {
										transferEquipment: True
										})

								(rpgChangeWingmanShip oldShip selObj)
								)

							;	Identify all the installed devices on the new ship

							(enum (objGetItems selObj "adI") theItem
								(itmSetKnown theItem)
								)

							;	Figure out what to do with the old ship
							
							(switch
								;	If we have an event handler, then we destroy the ship
								;	immediately. We need to do this for old wingman ships, which
								;	might otherwise try to follow the player through a gate.

								(objGetEventHandler oldShip)
									(block ()
										(objDestroy oldShip)
										)
									
								;	The old ship is suspended and possibly available for sale
								;	(But only if we can sell it).
							
								(objGetShipSellPrice gSource oldShip)
									(block ()
										(setq shipIDList (append shipIDList (objGetID oldShip)))
										(objSetData gSource 'shipBroker.list shipIDList)
										(shpCancelOrders oldShip)
										(objSuspend oldShip)
										)

								;	Otherwise, we temporarily dock here and eventually leave.
								
								(block ()
									(shpCancelOrders oldShip)
									(shpOrder oldShip 'dock gSource)
									(shpOrder oldShip 'wait (random 10 15))
									(shpOrder oldShip 'gate)
									)
								)
								
							;	Position the new ship near a docking port
							
							(setq portPos
								(@	(random
										(filter (objGetProperty gSource 'dockingPorts) portDesc
											(= (@ portDesc 'status) 'empty)
											)
										)
									'pos
									)
								)
							(if portPos
								(objSetPos selObj portPos)
								)
								
							(scrExitScreen gScreen 'forceUndock)
							)
					</Action>

					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionConfirm">[B]uy Ship</Text>

			<Text id="descPrices">
				Full price: %fullPrice%\n
				Value of %oldShipName%: %oldShipPrice%\n
				Trade-in price: %tradeInPrice%
			</Text>
			<Text id="descPricesRefund">
				Full price: %fullPrice%\n
				Value of %oldShipName%: %oldShipPrice%\n
				Trade-in refund: %tradeInPrice%
			</Text>
			<Text id="descPricesNoTradeIn">
				Full price: %fullPrice%\n
				Value of %oldShipName%: N/A\n
				Trade-in price: %fullPrice%
			</Text>
			<Text id="descTradeYourShipConfirm">
				Do you wish to replace your ship with %newShipName%?
			</Text>
			<Text id="descTradeWingmanShipConfirm">
				Do you wish to replace %wingmanName%'s ship with %newShipName%?
			</Text>

			<Text id="descCantAfford">
				Unfortunately, you cannot afford the cost.
			</Text>
			<Text id="descTooMuchCargo">
				Unfortunately, %wingmanName% has too much cargo to fit into %newShipName%.
			</Text>
			<Text id="descTooCheapWarning">
				The ship you are about to buy is cheaper than your current ship and may be less capable.
			</Text>

			<Text id="phraseYourShip">your ship</Text>
			<Text id="phraseWingmanShip">%name%'s ship</Text>
		</Language>
	</DockScreen>

<!-- SHIP BROKER WINGMAN

	DATA

	newShipID: ID of ship being sold
	price: Price for ship being sold

-->

	<DockScreen unid="&dsRPGShipBrokerWingman;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Display type="customPicker"
				rowHeight="80"
				iconWidth="80"
				iconHeight="80"
				>
			<OnDisplayInit>
				(map (sysFindObject gPlayerShip "s +property:playerWingman; +property:character") wingmanObj
					(block (
						(currency (objGetProperty gSource 'currency))
						(wingmanClass (objGetType wingmanObj))
						(wingmanPrice (or (objGetShipBuyPrice gSource wingmanObj) 0))
						)
						{
						title: (objGetName wingmanObj 0)
						icon: (objGetImageDesc wingmanObj)
						desc: 
							(scrTranslate gScreen 'descWingmanPrice {
								shipClass:(objGetName wingmanObj 'generic)
								price:(fmtCurrency currency wingmanPrice)
								})

						wingmanID: (objGetID wingmanObj)
						wingmanPrice: wingmanPrice
						}
						)
					)
			</OnDisplayInit>
		</Display>
		
		<Panes>
			<Default>
				<OnPaneInit>
					(block (
						(theEntry (scrGetListEntry gScreen))
						(oldShipObj (objGetObjByID (@ theEntry 'wingmanID)))
						(newShipObj (objGetObjByID (@ gData 'newShipID)))
						(tradeInPrice (- (@ gData 'price) (@ theEntry 'wingmanPrice)))
						(currency (objGetProperty gSource 'currency))

						(introDesc (scrTranslate gScreen 'descOffer {
							wingmanName: (objGetName oldShipObj 0)
							newShipName: (objGetName newShipObj '(article generic))
							currency: currency
							price: tradeInPrice
							}))

						(result Nil)
						)
						(switch
							;	Ask the wingman if they want the trade. If not, then we fail

							(!= (setq result (objFireEvent oldShipObj 'CanUpgradeTo { newShipObj:newShipObj })) True)
								(block ()
									(scrEnableAction gScreen 'actionBuyFor Nil)
									(scrSetDesc gScreen introDesc
										"\n\n"
										result
										)
									)

							;	Ask the new class if it is allowed to replace the wingman

							(!= (setq result (objFireEvent newShipObj 'CanUpgradeFrom { oldShipObj:oldShipObj })) True)
								(block ()
									(scrEnableAction gScreen 'actionBuyFor Nil)
									(scrSetDesc gScreen introDesc
										"\n\n"
										result
										)
									)

							;	If we cannot afford it

							(ls (objGetBalance gPlayerShip currency) tradeInPrice)
								(block ()
									(scrEnableAction gScreen 'actionBuyFor Nil)
									(scrSetDesc gScreen introDesc
										"\n\n"
										(scrTranslate gScreen 'descCantAfford)
										)
									)

							;	Wingman has too much cargo

							(gr (objGetProperty oldShipObj 'cargoSpaceUsedKg) (objGetProperty newShipObj 'cargoSpaceFreeKg))
								(block ()
									(scrEnableAction gScreen 'actionBuyFor Nil)
									(scrSetDesc gScreen introDesc
										"\n\n"
										(scrTranslate gScreen 'descTooMuchCargo {
											wingmanName:(objGetName oldShipObj 0)
											newShipName:(objGetName newShipObj 'article)
											})
										)
									)

							;	OK

							(block ()
								(scrSetDesc gScreen introDesc)
								)
							)
						)
				</OnPaneInit>

				<Actions>
					<Action id="actionBuyFor" default="1">
						(block (
							(theEntry (scrGetListEntry gScreen))
							(confirmData {
								newShipID: (@ gData 'newShipID)
								newShipPrice: (@ gData 'price)
								oldShipID: (@ theEntry 'wingmanID)
								oldShipPrice: (@ theEntry 'wingmanPrice)
								price: (- (@ gData 'price) (@ theEntry 'wingmanPrice))
								})
							)
							;	Exit this screen because we don't want to come back to it.

							(scrExitScreen gScreen)

							;	Confirm

							(scrShowScreen gScreen &dsRPGShipBrokerConfirm; confirmData)
							)
					</Action>
					<Action id="actionCancel" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionBuyFor">[B]uy for this Wingman</Text>

			<Text id="descOffer">
				(if (ls (@ gData 'price) 0)
					(scrTranslate gScreen 'descOfferRebate {
						wingmanName:(@ gData 'wingmanName) 
						newShipName:(@ gData 'newShipName) 
						price:(fmtCurrency (@ gData 'currency) (- (@ gData 'price)))
						})
					(scrTranslate gScreen 'descOfferPay {
						wingmanName:(@ gData 'wingmanName) 
						newShipName:(@ gData 'newShipName) 
						price:(fmtCurrency (@ gData 'currency) (@ gData 'price))
						})
					)
			</Text>
			<Text id="descOfferPay">
				You offer to trade in %wingmanName%'s ship for %newShipName% at a cost of %price%.
			</Text>
			<Text id="descOfferRebate">
				You offer to trade in %wingmanName%'s ship for %newShipName% and get %price% back.
			</Text>
			<Text id="descCantAfford">
				Unfortunately, you cannot afford the cost.
			</Text>
			<Text id="descTooMuchCargo">
				Unfortunately, %wingmanName% has too much cargo to fit into %newShipName%.
			</Text>

			<Text id="descWingmanPrice">
				Value of %shipClass%: %price%.
			</Text>
		</Language>
	</DockScreen>

	<DockScreen unid="&dsStdFollowerScreen;"
			inherit=			"&dsDockScreenBase;"
			nestedScreen=		"true"
			>
		<Display type="detailsPane"
				>
			<OnDisplayInit>
				(block (
					(shipObj gSource)
					(shipClass (objGetType shipObj))
					)
					{
					largeIcon: (shpGetImageDesc shipClass { type:'schematic })
					details: 
						(or (objFireEvent shipObj 'GetShipDetails { })
							(rpgGetShipDetails shipObj { noDevices:True })
							)

					shipObj: shipObj
					}
					)
			</OnDisplayInit>
		</Display>

		<Panes>
			<Default>
				<OnPaneInit>
				</OnPaneInit>

				<Actions>
					<Action id="actionPilot" default="1">
						(block (
							(newShipObj gSource)
							(oldShipObj gPlayerShip)
							)
							;	Exit dock screen so that we don't try to change ships
							;	while we're docked.

							(scrExitScreen gScreen)

							;	Prepare the new ship

							(objSetEventHandler newShipObj Nil)

							;	Switch

							(plyChangeShip gPlayer newShipObj)

							;	Turn the old ship into a follower

							(objSetProperty oldShipObj 'sovereign &svFriendlyAuton;)
							(objSetEventHandler oldShipObj &evStdFollowerBehavior;)
							)
					</Action>

					<Action id="actionLoot">
						(scrShowScreen gScreen &dsRPGLoot;)
					</Action>

					<Action id="actionJettison">
						(scrShowScreen gScreen &dsRPGJettison;)
					</Action>

					<Action id="actionUndock" cancel="1">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>

		<Language>
			<Text id="actionPilot">[P]ilot</Text>
		</Language>
	</DockScreen>

<!-- BEHAVIOR -->

	<Type unid="&evStdFollowerBehavior;">
		<Communications>
			<Message id="msgFormUp" name="Form up" key="F">
				<OnShow>
					(and (neq (objGetData gSource 'behavior) 'escorting)
						(objGetProperty gSource 'playerWingman)
						)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource 'behavior))
						(switch
							(or (not behavior) (eq behavior 'escorting))
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck))
									)

							(block Nil
								(objSetData gSource 'behavior 'escorting)
								(objSendMessage gSender gSource (objTranslate gSource 'FormUpAck))
								
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)
								)
							)
						)
				</Invoke>
			</Message>
			
			<Message id="msgWait" name="Wait" key="W">
				<OnShow>
					(and (neq (objGetData gSource 'behavior) 'waiting)
						(objGetProperty gSource 'playerWingman)
						)
				</OnShow>

				<Invoke>
					(block Nil
						(objSetData gSource 'behavior 'waiting)
						(objSendMessage gSender gSource (objTranslate gSource 'WaitAck))
						
						(shpCancelOrders gSource)
						(shpOrder gSource 'hold)
						)
				</Invoke>
			</Message>
		</Communications>

		<Events>
			<OnEventHandlerInit>
				(block ()
					(objSetProperty gSource 'playerWingman True)
					(objSetData gSource 'behavior 'escorting)

					;	Set some AI settings to true, but remember the previous values 
					;	so we can restore them.

					(enum (list 'noAttackOnThreat 'nonCombatant 'noNavPaths) theSetting
						(block ()
							(objSetData gSource (cat "rpg.saved." theSetting) (shpGetAISetting gSource theSetting))
							(shpSetAISetting gSource theSetting True)
							)
						)

					(shpCancelOrders gSource)
					(shpOrder gSource 'follow gPlayerShip)
					)
			</OnEventHandlerInit>

			<OnEventHandlerTerm>
				(block ()
					(objSetProperty gSource 'playerWingman Nil)
					(objSetData gSource 'behavior Nil)

					;	Restore AI settings.

					(enum (list 'noAttackOnThreat 'nonCombatant 'noNavPaths) theSetting
						(shpSetAISetting gSource theSetting (objGetData gSource (cat "rpg.saved." theSetting)))
						)
					)
			</OnEventHandlerTerm>

			<OnPlayerLeftSystem>
				(block (behavior)
					(setq behavior (objGetData gSource 'behavior))
					(switch
						(not (objGetProperty gSource 'playerWingman))
							Nil
							
						; If we're waiting, stay in this system and wait for the player
						
						(eq behavior 'waiting)
							'waitForPlayer

						; Otherwise, follow the player through the gate
						
						'followPlayer
						)
					)
			</OnPlayerLeftSystem>

			<GetDockScreen>
				(list &dsStdFollowerScreen; { } 4)
			</GetDockScreen>
		</Events>

		<Language>
			<String id="FormUpAck">"Order acknowledged"</String>
			<String id="NiceShooting"></String>
			<String id="UnableToComply">"Unable to comply"</String>
			<String id="WaitAck">"Order acknowledged"</String>
			<String id="WatchYourTargets"></String>
		</Language>
	</Type>
	
<!-- GLOBALS -->
	
	<Globals>
		(block Nil
			(setq rpgChangeWingmanShip (lambda (oldShipObj newShipObj)
				(block (
					namePattern
					)
					;	Transfer the event handler to the new ship

					(objSetEventHandler newShipObj (objGetEventHandler oldShipObj))
					(objSetEventHandler oldShipObj Nil)

					;	Transfer wingman flag

					(objSetProperty newShipObj 'playerWingman (objGetProperty oldShipObj 'playerWingman))
					(objSetProperty oldShipObj 'playerWingman Nil)

					;	Transfer the character

					(objSetProperty newShipObj 'character (objGetProperty oldShipObj 'character))
					(objSetProperty oldShipObj 'character Nil)

					;	Transfer the name

					(setq namePattern (objGetProperty oldShipObj 'namePattern))
					(objSetName newShipObj (@ namePattern 'pattern) (@ namePattern 'flags))
					(objSetName oldShipObj Nil)
					)
				))

			(setq rpgCreateShipsToSell (lambda (sellerObj maxCount createCriteria)
				(block (
					(shipObj Nil)
					(shipList Nil)
					(extraList Nil)
					(shipIDList Nil)

					;	Make a list of all possible ship classes that we sell.

					(allClasses (typFind (or createCriteria "s +shipBroker;")))

					;	Filter out any ship classes that we do not sell

					(classesForSale (filter allClasses theClass (objGetShipSellPrice sellerObj { shipClass:theClass })))

					;	Now create a list of types to create. Some types are duplicated if
					;	the class has variants (i.e., different device load-outs).

					(shipsToCreate 
						(apply append
							(map classesForSale theClass
								(if (typGetProperty theClass 'hasVariants)
									(map (make 'sequence (random 1 3)) i theClass)
									(list theClass)
									)
								)
							)
						)
					)

					(dbgOutput createCriteria)
					(dbgOutput allClasses)

					;	Create a list of ships to sell
					
					(setq shipList
						(map shipsToCreate 'excludeNil theClass
							(switch
						
								;	Create a ship of this class
								;	(If that fails, for some reason, then we skip it.
							
								(not (setq shipObj (sysCreateShip theClass (objGetPos sellerObj) (objGetSovereign sellerObj))))
									Nil
							
								;	If we don't sell this kind of ship, then skip it.
							
								(not (objGetShipSellPrice sellerObj shipObj))
									(block Nil
										(objDestroy shipObj)
										Nil
										)
									
								;	Otherwise, return it
							
								shipObj
								)
							)
						)
						
					;	Shuffle them
					
					(setq shipList (shuffle shipList))

					;	Split the list in two, with the second list being extra
					;	ships that we don't need.
					
					(setq extraList (subset shipList maxCount))
					(setq shipList (subset shipList 0 maxCount))
					
					;	Delete the extra ones
					
					(enum extraList shipObj (objDestroy shipObj))
					
					;	Suspend the ships
					
					(enum shipList shipObj (objSuspend shipObj))
					
					;	Store the list of ID with the seller object
					
					(setq shipIDList (map shipList shipObj (objGetID shipObj)))
					(objSetData sellerObj 'shipBroker.list shipIDList)
					
					;	Return it
					
					shipIDList
					)
				))

			(setq rpgGetShipDetails (lambda (shipObj options)
				(block (
					(showDevices (not (@ options 'noDevices)))

					;	Reactor stats
					
					(reactorItem (@ (objGetItems shipObj "rI") 0))
					(reactorText (if reactorItem (itmGetName reactorItem 0x00) (cat (objGetName shipObj 0x80) " reactor")))
					(reactorIcon (if reactorItem (itmGetImageDesc reactorItem) (resCreateImageDesc &rsItems1; 288 288 96 96)))
					(reactorPowerText (fmtNumber 'power (objGetProperty shipObj 'power)))
					(reactorEfficiency (objGetProperty shipObj 'fuelEfficiencyBonus))
					(reactorEfficiencyText
						(switch
							(gr reactorEfficiency 0)
								(cat "+" reactorEfficiency "%")
										
							(ls reactorEfficiency 0)
								(cat reactorEfficiency "%")
										
							"standard"
							)
						)
					(reactorFuel
						(map 
							(map (itmGetTypes "f -notForSale; -notStandardFuel; -notStandard;") 'excludeNil fuelType 
								(if (shpIsFuelCompatible shipObj (itmCreate fuelType 1))
									(itmCreate fuelType 1)
									)
								)
							(list 'reduceMin 'original)
							fuelItem
							(itmGetLevel fuelItem)
							)
						)
						
					;	Drive Stats
					
					(driveItem (@ (objGetItems shipObj "vI") 0))
					(driveText (if driveItem (itmGetName driveItem 0x00) (cat (objGetName shipObj 0x80) " drive")))
					(driveIcon (if driveItem (itmGetImageDesc driveItem) (resCreateImageDesc &rsItems1; 96 384 96 96)))
					
					;	Cargo Stats
					
					(cargoItem (@ (objGetItems shipObj "cI") 0))
					(cargoIcon (if cargoItem (itmGetImageDesc cargoItem) (resCreateImageDesc &rsItems1; 96 192 96 96)))

					;	Armor

					(armorItem (@ (objGetItems shipObj "aI") 0))

					;	Shields

					(shieldItem (@ (objGetItems shipObj "sI") 0))

					;	Weapons

					(allWeapons (objGetItems shipObj "w~lI"))
					(weaponItem1 (@ allWeapons 0))
					(weaponItem2 (@ allWeapons 1))

					;	Launcher

					(launcherItem (@ (objGetItems shipObj "lI") 0))

					;	Misc devices

					(allMisc (objGetItems shipObj "d~wsrvcI"))
					(miscItem1 (@ allMisc 0))
					
					;	Slots
					
					(deviceSlots (objGetProperty shipObj 'deviceSlots))
					(maxWeaponSlots (objGetProperty shipObj 'deviceSlotsWeapons))
					(maxNonWeaponSlots (objGetProperty shipObj 'deviceSlotsNonWeapons))
					(availDeviceSlots (objGetProperty shipObj 'availableDeviceSlots))
					(availWeaponSlots (objGetProperty shipObj 'availableWeaponSlots))
					(availNonWeaponSlots (objGetProperty shipObj 'availableNonWeaponSlots))
					)

					(list 
						{
						icon: (shpGetImageDesc (objGetType shipObj) 0)
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; manufacturer:} " (objGetProperty shipObj 'manufacturer) "\n"
									"{/f:MediumBold;/c:#79828c; size:} " (objGetProperty shipObj 'size) " meters\n"
									"{/f:MediumBold;/c:#79828c; mass:} " (objGetProperty shipObj 'hullMass) " tons\n"
								"}"
								)
						}

						{
						icon: reactorIcon
						title: reactorText
						desc: 
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; max. output:} " reactorPowerText "\n"
									"{/f:MediumBold;/c:#79828c; fuel:} " (itmGetName reactorFuel 0x02) "\n"
									"{/f:MediumBold;/c:#79828c; fuel efficiency:} " reactorEfficiencyText "\n"
								"}"
								)
						}
						
						{
						icon: driveIcon
						title: driveText
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; max. speed:} " (fmtNumber 'speed (objGetProperty shipObj 'maxSpeed)) "\n"
									"{/f:MediumBold;/c:#79828c; thrust//mass:} " (fmtNumber 'real (/ (objGetProperty shipObj 'thrustToWeight) 1000)) "\n"
									"{/f:MediumBold;/c:#79828c; maneuverability:} " (fmtNumber 'real (/ (objGetProperty shipObj 'maneuver) 1000)) "\n"
								"}"
								)
						}

						{
						icon: cargoIcon
						title: (if cargoItem (itmGetName cargoItem 0))
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; cargo space:} " (fmtNumber (objGetProperty shipObj 'cargoSpace)) " tons\n"
									"{/f:MediumBold;/c:#79828c; max. expansion:} " (objGetProperty shipObj 'maxCargoSpace) " tons\n"
								"}"
								)
						}
						
						(if showDevices
							{
							icon: (itmGetImageDesc armorItem)
							title: (itmGetName armorItem '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel armorItem) "\n"
										"{/f:MediumBold;/c:#79828c; max. armor:} " (fmtNumber (/ (objGetProperty shipObj 'maxArmorMass) 1000)) " tons\n"
									"}"
									)
							}
							{
							icon: (itmGetImageDesc armorItem)
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; max. armor:} " (fmtNumber (/ (objGetProperty shipObj 'maxArmorMass) 1000)) " tons\n"
									"}"
									)
							}
							)

						(if (and shieldItem showDevices) {
							icon: (itmGetImageDesc shieldItem)
							title: (itmGetName shieldItem '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel shieldItem) "\n"
									"}"
									)
							})

						(if (and weaponItem1 showDevices) {
							icon: (itmGetImageDesc weaponItem1)
							title: (itmGetName weaponItem1 '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel weaponItem1) "\n"
									"}"
									)
							})

						(if (and weaponItem2 showDevices) {
							icon: (itmGetImageDesc weaponItem2)
							title: (itmGetName weaponItem2 '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel weaponItem2) "\n"
									"}"
									)
							})

						(if (and launcherItem showDevices) {
							icon: (itmGetImageDesc launcherItem)
							title: (itmGetName launcherItem '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel launcherItem) "\n"
									"}"
									)
							})

						(if (and miscItem1 showDevices) {
							icon: (itmGetImageDesc miscItem1)
							title: (itmGetName miscItem1 '(short actual))
							desc:
								(cat
									"{/rtf "
										"{/f:MediumBold;/c:#79828c; level:} " (itmGetLevel miscItem1) "\n"
									"}"
									)
							})

						{
						icon: (resCreateImageDesc &rsItems1; 96 768 96 96)
						desc:
							(cat
								"{/rtf "
									"{/f:MediumBold;/c:#79828c; device slots:} " deviceSlots " (" availDeviceSlots " free)\n"
							
									(if (!= deviceSlots maxWeaponSlots)
										(cat "{/f:MediumBold;/c:#79828c; for weapons:} " maxWeaponSlots " (" availWeaponSlots " free)\n")
										)
									(if (!= deviceSlots maxNonWeaponSlots)
										(cat "{/f:MediumBold;/c:#79828c; for non-weapons:} " maxNonWeaponSlots " (" availNonWeaponSlots " free)\n") 
										)
								"}"
								)
						})
					)
				))
				
			(setq rpgSetShipStatsDisplay (lambda (shipObj options)
				(block (
					;	Reactor stats
					
					(reactorItem (@ (objGetItems shipObj "rI") 0))
					(reactorText (if reactorItem (itmGetName reactorItem 0x00) (cat (objGetName shipObj 0x80) " reactor")))
					(reactorPowerText (fmtNumber 'power (objGetProperty shipObj 'power)))
					(reactorEfficiency (objGetProperty shipObj 'fuelEfficiencyBonus))
					(reactorEfficiencyText
						(switch
							(gr reactorEfficiency 0)
								(cat "+" reactorEfficiency "%")
										
							(ls reactorEfficiency 0)
								(cat reactorEfficiency "%")
										
							"standard"
							)
						)
					(reactorFuel
						(map 
							(map (itmGetTypes "f -notForSale; -notStandardFuel; -notStandard;") 'excludeNil fuelType 
								(if (shpIsFuelCompatible shipObj (itmCreate fuelType 1))
									(itmCreate fuelType 1)
									)
								)
							(list 'reduceMin 'original)
							fuelItem
							(itmGetLevel fuelItem)
							)
						)
						
					;	Drive Stats
					
					(driveItem (@ (objGetItems shipObj "vI") 0))
					(driveText (if driveItem (itmGetName driveItem 0x00) (cat (objGetName shipObj 0x80) " drive")))
					
					;	Cargo Stats
					
					(cargoItem (@ (objGetItems shipObj "cI") 0))
					
					;	Slots
					
					(deviceSlots (objGetProperty shipObj 'deviceSlots))
					(maxWeaponSlots (objGetProperty shipObj 'deviceSlotsWeapons))
					(maxNonWeaponSlots (objGetProperty shipObj 'deviceSlotsNonWeapons))
					(availDeviceSlots (objGetProperty shipObj 'availableDeviceSlots))
					(availWeaponSlots (objGetProperty shipObj 'availableWeaponSlots))
					(availNonWeaponSlots (objGetProperty shipObj 'availableNonWeaponSlots))
					)
					
					;	Set the background image
						
					(scrSetBackgroundImage gScreen {
						type: 'schematic
						obj: shipObj
						})
						
					;	Set the left column of stats

					(scrSetDisplayText gScreen 'leftCol
						(cat
							"{/rtf "
								"{/f:MediumBold;/c:#79828c; reactor:} " reactorText "\n"
								"{/f:MediumBold;/c:#79828c; max. output:} " reactorPowerText "\n"
								"{/f:MediumBold;/c:#79828c; fuel:} " (itmGetName reactorFuel 0x02) "\n"
								"{/f:MediumBold;/c:#79828c; fuel efficiency:} " reactorEfficiencyText "\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; drive:} " driveText "\n"
								"{/f:MediumBold;/c:#79828c; max. speed:} " (fmtNumber 'speed (objGetProperty shipObj 'maxSpeed)) "\n"
								"{/f:MediumBold;/c:#79828c; thrust//mass:} " (/ (objGetProperty shipObj 'thrustToWeight) 1000) "\n"
								"{/f:MediumBold;/c:#79828c; maneuverability:} " (/ (objGetProperty shipObj 'maneuver) 1000) "\n"
							"}"
							)
						)
						
					;	Set the right column of stats
					
					(scrSetDisplayText gScreen 'rightCol
						(cat
							"{/rtf "
								(if cargoItem (cat "{/f:MediumBold;/c:#79828c; cargo:} " (itmGetName cargoItem 0x00) "\n"))
								"{/f:MediumBold;/c:#79828c; cargo space:} " (fmtNumber (objGetProperty shipObj 'cargoSpace)) " tons\n"
								"{/f:MediumBold;/c:#79828c; max. expansion:} " (objGetProperty shipObj 'maxCargoSpace) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; device slots:} " deviceSlots " (" availDeviceSlots " free)\n"
							
								(if (!= deviceSlots maxWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for weapons:} " maxWeaponSlots " (" availWeaponSlots " free)\n")
									)
								(if (!= deviceSlots maxNonWeaponSlots)
									(cat "{/f:MediumBold;/c:#79828c; for non-weapons:} " maxNonWeaponSlots " (" availNonWeaponSlots " free)\n") 
									)
								"\n"
								"{/f:MediumBold;/c:#79828c; max. armor:} " (/ (objGetProperty shipObj 'maxArmorMass) 1000) " tons\n"
								"\n"
								"{/f:MediumBold;/c:#79828c; manufacturer:} " (objGetProperty shipObj 'manufacturer) "\n"
								"{/f:MediumBold;/c:#79828c; size:} " (objGetProperty shipObj 'size) " meters\n"
								"{/f:MediumBold;/c:#79828c; mass:} " (objGetProperty shipObj 'hullMass) " tons\n"
							"}"
							)
						)
					)
				))
			)
	</Globals>
	
</TranscendenceModule>

<?xml version="1.0" ?>

<!DOCTYPE TranscendenceUniverse
	[
	<!ENTITY ssEarthSpaceStandard		"0x00000001">
	<!ENTITY ssEarthSpaceRedDwarf		"0x00000002">
	<!ENTITY ssEarthSpaceAsteroids		"0x00000003">
	<!ENTITY ssEarthSpaceDesert			"0x00000004">
	<!ENTITY ssEarthSpaceNebulae		"0x00000005">
	<!ENTITY ssEarthSpaceVolcanic		"0x00000006">
	<!ENTITY ssEarthSpaceIceRing		"0x00000007">
	<!ENTITY ssEarthSpaceBinary			"0x00000008">
	<!ENTITY ssEarthSpaceAsteroids2		"0x00000009">
	<!ENTITY ssEarthSpaceDesert2		"0x0000000A">
	<!ENTITY tbBasicSystemParts			"0x0000000B">

	<!ENTITY svPlayer					"0x00001001">
	<!ENTITY svCommonwealth				"0x00001002">
	<!ENTITY svIndependent				"0x00001003">
	<!ENTITY svIndependentTrader		"0x00001004">
	<!ENTITY svPirates					"0x00001005">
	<!ENTITY svOutlaw					"0x00001006">
	<!ENTITY svAres						"0x00001007">
	<!ENTITY svAnarchists				"0x00001008">
	<!ENTITY svSettlers					"0x00001009">
	<!ENTITY svCult						"0x0000100A">
	<!ENTITY svRogueFleet				"0x0000100B">
	<!ENTITY svSung						"0x0000100C">
	<!ENTITY svSungSlaves				"0x0000100D">
	<!ENTITY svDestructiveChaos			"0x0000100E">
	<!ENTITY svFriendlyAuton			"0x0000100F">
	<!ENTITY svDestructiveOrder			"0x00001010">
	<!ENTITY svCorporate				"0x00001011">
	<!ENTITY svBlackMarket				"0x00001012">
	<!ENTITY svDefectiveAuton			"0x00001013">
	<!ENTITY svFerianMiners				"0x00001014">
	<!ENTITY svRingers					"0x00001015">
	<!ENTITY svFerianMinersAngry		"0x00001016">

	<!ENTITY stShipwreck				"0x00002001">
	<!ENTITY stStargate					"0x00002002">
	<!ENTITY stCargoCrate				"0x00002003">
	<!ENTITY stNavBeacon				"0x00002004">
	<!ENTITY stNavSign					"0x00002005">
	<!ENTITY stDebugDepot				"0x00002006">
	<!ENTITY stBarricade1				"0x00002007">
	<!ENTITY stBarricade2				"0x00002008">
	<!ENTITY stBarricade3				"0x00002009">
	<!ENTITY stStargateBeacon			"0x0000200A">
	<!ENTITY stMinedOre					"0x0000200B">
	<!ENTITY stLogBuoy					"0x0000200C">

	<!ENTITY stO-TypeStar				"0x00002100">
	<!ENTITY stA-TypeStar				"0x00002101">
	<!ENTITY stG-TypeStar				"0x00002102">
	<!ENTITY stM-TypeStar				"0x00002103">
	<!ENTITY stWhiteDwarfStar			"0x00002104">
	<!ENTITY stRedDwarfStar				"0x00002105">
	<!ENTITY stBlueGiantStar			"0x00002106">
	<!ENTITY stRedGiantStar				"0x00002107">

	<!ENTITY stSmallAsteroid			"0x00002200">
	<!ENTITY stMediumAsteroid			"0x00002201">
	<!ENTITY stLargeAsteroid			"0x00002202">
	<!ENTITY stSmallIceAsteroid			"0x00002203">
	<!ENTITY stLargeIceAsteroid			"0x00002204">
	<!ENTITY stPlanetoid				"0x00002205">
	<!ENTITY stCrateredPlanet			"0x00002206">
	<!ENTITY stIcePlanet				"0x00002207">
	<!ENTITY stGreenhousePlanet			"0x00002208">
	<!ENTITY stBiospherePlanet			"0x00002209">
	<!ENTITY stDesertPlanet				"0x0000220A">
	<!ENTITY stHydrogenGasGiant			"0x0000220B">
	<!ENTITY stRingedGasGiant			"0x0000220C">
	<!ENTITY stMethaneGasGiant			"0x0000220D">
	<!ENTITY stSmallVolcanicAsteroid	"0x0000220E">
	<!ENTITY stMediumVolcanicAsteroid	"0x0000220F">
	<!ENTITY stVolcanicPlanet			"0x00002210">
	<!ENTITY stSmallFrostAsteroid		"0x00002211">
	<!ENTITY stMediumFrostAsteroid		"0x00002212">
	<!ENTITY stSmallMetallicAsteroid	"0x00002213">
	<!ENTITY stMediumMetallicAsteroid	"0x00002214">

	<!ENTITY stOreSmallAsteroid			"0x00002300">
	<!ENTITY stOreSmallFrostAsteroid	"0x00002301">
	<!ENTITY stOreSmallVolcanicAsteroid	"0x00002302">
	<!ENTITY stOreMediumAsteroid		"0x00002303">
	<!ENTITY stOreMediumFrostAsteroid	"0x00002304">
	<!ENTITY stOreMediumVolcanicAsteroid	"0x00002305">
	<!ENTITY stOreSmallMetallicAsteroid	"0x00002306">
	<!ENTITY stOreMediumMetallicAsteroid	"0x00002307">

	<!ENTITY scEI100					"0x00003001">
	<!ENTITY scRoninA					"0x00003002">
	<!ENTITY scRoninB					"0x00003003">
	<!ENTITY scRoninC					"0x00003004">
	<!ENTITY scTenhoveSentinel			"0x00003005">
	<!ENTITY scEI100M					"0x00003006">
	<!ENTITY scMikeno					"0x00003007">
	<!ENTITY scSapphireYacht			"0x00003008">
	<!ENTITY scT31ArmedTransport		"0x00003009">
	<!ENTITY scAutoSentinel				"0x0000300A">
	<!ENTITY scMuleAuton				"0x0000300B">
	<!ENTITY sc300DDefenderAuton		"0x0000300C">
	<!ENTITY sc1MBattleAuton			"0x0000300D">
	<!ENTITY sc1MiBattleAuton			"0x0000300E">
	<!ENTITY sc310AAegisAuton			"0x0000300F">
	<!ENTITY scEI500					"0x00003010">
	<!ENTITY scWolfen					"0x00003011">
	<!ENTITY baStdWingmanBase			"0x00003012">
	<!ENTITY baStdAutonBase				"0x00003013">
	<!ENTITY evStdPatrolEncounterBehavior	"0x00003014">
	<!ENTITY evStdConvoyEncounterBehavior	"0x00003015">
	<!ENTITY evStdZoneEncounterBehavior	"0x00003016">

	<!ENTITY scSapphirePlayer			"0x00003801">
	<!ENTITY scEI100XPlayer				"0x00003802">
	<!ENTITY scWolfenPlayer				"0x00003803">

	<!ENTITY itLightTitaniumPlate		"0x00004001">
	<!ENTITY itHeavyReactiveArmor		"0x00004002">
	<!ENTITY itReactiveArmor			"0x00004003">
	<!ENTITY itDuralloyArmor			"0x00004004">
	<!ENTITY itPlasteelPlate			"0x00004005">
	<!ENTITY itStealthPlate				"0x00004006">
	<!ENTITY itCarbideCarapace			"0x00004007">
	<!ENTITY itHeavyPlasteelPlate		"0x00004008">
	<!ENTITY itTransuranicPlate			"0x00004009">
	<!ENTITY itNeutroniumPlate			"0x0000400A">
	<!ENTITY itDarkMatterPlate			"0x0000400B">
	<!ENTITY itHierosteelPlate			"0x0000400C">
	<!ENTITY itLaserCannon				"0x0000400D">
	<!ENTITY itRecoillessCannon			"0x0000400E">
	<!ENTITY itParticleBeamWeapon		"0x0000400F">
	<!ENTITY itNAMIMissileLauncher		"0x00004010">
	<!ENTITY itKM100Missile				"0x00004011">
	<!ENTITY itDualLaserCannon			"0x00004012">
	<!ENTITY itDualRecoillessCannon		"0x00004013">
	<!ENTITY itXM300Missile				"0x00004014">
	<!ENTITY itKM500Missile				"0x00004015">
	<!ENTITY itXRayLaserCannon			"0x00004016">
	<!ENTITY itPlasmaCannon				"0x00004017">
	<!ENTITY itMuleAuton				"0x00004018">
	<!ENTITY itXM900Missile				"0x00004019">
	<!ENTITY itCalligraphyScroll		"0x0000401A">
	<!ENTITY itPromethiumCrystal		"0x0000401B">
	<!ENTITY it310AAegisAuton			"0x0000401C">
	<!ENTITY itHeavyCeramicPlate		"0x0000401D">
	<!ENTITY itKilotonCannonShell		"0x0000401E">
	<!ENTITY itPatchSpider				"0x0000401F">
	<!ENTITY itKilotonCannon			"0x00004020">
	<!ENTITY itAbsolutionCannon			"0x00004021">
	<!ENTITY itScrambleAlgorithm		"0x00004022">
	<!ENTITY itMnemonicProcessor		"0x00004023">
	<!ENTITY itTitaniumOre				"0x00004024">
	<!ENTITY itHydrocarbons				"0x00004025">
	<!ENTITY itWaterIce					"0x00004026">
	<!ENTITY itFrozenSupplies			"0x00004027">
	<!ENTITY itPlasteelOre				"0x00004028">
	<!ENTITY itCarbonSpool				"0x00004029">
	<!ENTITY itDuralloyOre				"0x0000402A">
	<!ENTITY itMedicalSupplies			"0x0000402B">
	<!ENTITY itPteracniumOre			"0x0000402C">
	<!ENTITY itUraniumRods				"0x0000402D">
	<!ENTITY itBiofactorPaste			"0x0000402E">
	<!ENTITY itHyperfiberRoll			"0x0000402F">
	<!ENTITY itGoldOre					"0x00004030">
	<!ENTITY itPlatinumOre				"0x00004031">
	<!ENTITY itHumanOrgans				"0x00004032">
	<!ENTITY itMicrosaur				"0x00004033">
	<!ENTITY itNeutroniumOre			"0x00004034">
	<!ENTITY itOmniLaserCannon			"0x00004035">
	<!ENTITY itClass1Deflector			"0x00004036">
	<!ENTITY itClass2Deflector			"0x00004037">
	<!ENTITY itClass3Deflector			"0x00004038">
	<!ENTITY itPlasmaShieldGenerator	"0x00004039">
	<!ENTITY itTrentonFieldGenerator	"0x0000403A">
	<!ENTITY itLazarusShieldGenerator	"0x0000403B">
	<!ENTITY itHelium3FuelRod			"0x0000403C">
	<!ENTITY itMiningLaser				"0x0000403D">
	<!ENTITY itAblativeArmorCoating		"0x0000403E">
	<!ENTITY itCarbonWeaverNanos		"0x0000403F">
	<!ENTITY itDegeneratingNanos		"0x00004040">
	<!ENTITY itOrganicAcid				"0x00004041">
	<!ENTITY itReactiveArmorCoating		"0x00004042">
	<!ENTITY itReflectiveArmorCoating	"0x00004043">
	<!ENTITY itRegeneratingNanos		"0x00004044">
	<!ENTITY itRepairingNanos			"0x00004045">
	<!ENTITY itSiliconArmorPatch		"0x00004046">
	<!ENTITY itSRSDamageROM				"0x00004047">
	<!ENTITY itEnhanceShieldsROM		"0x00004048">
	<!ENTITY itAutopilotROM				"0x00004049">
	<!ENTITY itSystemMapROM				"0x0000404A">
	<!ENTITY itTritiumPropulsionUpgrade	"0x0000404B">
	<!ENTITY itTitanFusionDrive			"0x0000404C">
	<!ENTITY itPteracniumMegadrive		"0x0000404D">
	<!ENTITY itPhotorepairArmor			"0x0000404E">
	<!ENTITY itCeramicPlate				"0x0000404F">
	<!ENTITY itDiamondLatticeArmor		"0x00004050">
	<!ENTITY itPolymeshArmor			"0x00004051">
	<!ENTITY itTempusSyrette			"0x00004052">
	<!ENTITY itBootleg3DV				"0x00004053">
	<!ENTITY itMartianNori				"0x00004054">
	<!ENTITY itLaudanumAmpule			"0x00004055">
	<!ENTITY itBlackMarketID			"0x00004056">
	<!ENTITY itTitaniumPlate			"0x00004057">
	<!ENTITY itFragmentationMissile		"0x00004058">
	<!ENTITY itTargetingComputerROM		"0x00004059">
	<!ENTITY itLightPlasteelPlate		"0x0000405A">
	<!ENTITY itSmartCannon				"0x0000405B">
	<!ENTITY itSmartCannonShell			"0x0000405C">
	<!ENTITY itBlaster					"0x0000405D">
	<!ENTITY itArbalestCannon			"0x0000405E">
	<!ENTITY itKineticEnhancer			"0x0000405F">
	<!ENTITY itUnknownBarrel			"0x00004060">
	<!ENTITY itUnknownROM				"0x00004061">
	<!ENTITY itHeavyTitaniumPlate		"0x00004062">
	<!ENTITY itTurbolaserCannon			"0x00004063">
	<!ENTITY itDualParticleBeamWeapon	"0x00004064">
	<!ENTITY itDragonflyMissileSystem	"0x00004065">
	<!ENTITY itDragonflyCartridge		"0x00004066">
	<!ENTITY itXMHArmor					"0x00004067">
	<!ENTITY itSolonShieldGenerator		"0x00004068">
	<!ENTITY itFlenserCannon			"0x00004069">
	<!ENTITY itPolyceramicPlate			"0x0000406A">
	<!ENTITY itTevlarCompositeArmor		"0x0000406B">
	<!ENTITY itSmallArmorPatch			"0x0000406C">
	<!ENTITY itLargeArmorPatch			"0x0000406D">
	<!ENTITY itMAGLauncher				"0x0000406E">
	<!ENTITY it400HexageneMAG			"0x0000406F">
	<!ENTITY it600HexageneMAG			"0x00004070">
	<!ENTITY it800HexageneMAG			"0x00004071">
	<!ENTITY itZG24ClusterMAG			"0x00004072">
	<!ENTITY it3KSiegeMAG				"0x00004073">
	<!ENTITY itHighFluxMAG				"0x00004074">
	<!ENTITY itDualTurbolaserCannon		"0x00004075">
	<!ENTITY itDualFlenserCannon		"0x00004076">
	<!ENTITY itIonCannon				"0x00004077">
	<!ENTITY itWasteCannon				"0x00004078">
	<!ENTITY itCargoHoldExpansion		"0x00004079">
	<!ENTITY itAdvancedReactiveArmor	"0x0000407A">
	<!ENTITY itHardenedPlasteelPlate	"0x0000407B">
	<!ENTITY itSolarArmor				"0x0000407C">
	<!ENTITY itSuperconductingShields	"0x0000407D">
	<!ENTITY itSuperconductingCoil		"0x0000407E">
	<!ENTITY itSolarPanelArray			"0x0000407F">
	<!ENTITY itSmugglersCargoHold		"0x00004080">
	<!ENTITY itHeavyRecoillessCannon	"0x00004081">
	<!ENTITY itReinforcedTitanium2		"0x00004082">
	<!ENTITY itGradeBGrains				"0x00004083">
	<!ENTITY itWhiteRice				"0x00004084">
	<!ENTITY itStimuzine				"0x00004085">
	<!ENTITY itVenusianRum				"0x00004086">
	<!ENTITY itBeefCylinders			"0x00004087">
	<!ENTITY itSalmonite				"0x00004088">
	<!ENTITY itCharlesRiverWater		"0x00004089">
	<!ENTITY itGradeAGrains				"0x0000408A">
	<!ENTITY itNeolinen					"0x0000408B">
	<!ENTITY itMartianMerlot			"0x0000408C">
	<!ENTITY itSyntheticChicken			"0x0000408D">
	<!ENTITY itRedNebulaBeer			"0x0000408E">
	<!ENTITY itEridaniWater				"0x0000408F">
	<!ENTITY itPhotocotton				"0x00004090">
	<!ENTITY itAustralianChardonay		"0x00004091">
	<!ENTITY itEuropanIceVodka			"0x00004092">
	<!ENTITY itMegathereMeat			"0x00004093">
	<!ENTITY itNeolinenSuit				"0x00004094">
	<!ENTITY itPalladiumOre				"0x00004095">
	<!ENTITY itSegway					"0x00004096">
	<!ENTITY itCentauriRice				"0x00004097">
	<!ENTITY itKobeWater				"0x00004098">
	<!ENTITY itSilk						"0x00004099">
	<!ENTITY itBombaySapphireGin		"0x0000409A">
	<!ENTITY itCaliforniaCabernet		"0x0000409B">
	<!ENTITY itTerranEggs				"0x0000409C">
	<!ENTITY itHogeiSalmon				"0x0000409D">
	<!ENTITY itEuropanIceMoss			"0x0000409E">
	<!ENTITY itSilkSuit					"0x0000409F">
	<!ENTITY itMisatoSake				"0x000040A0">
	<!ENTITY itExileStarportChampagne	"0x000040A1">
	<!ENTITY itHennessyCognac			"0x000040A2">
	<!ENTITY itNaturalHam				"0x000040A3">
	<!ENTITY itHeartAndLungsProsthesis	"0x000040A4">
	<!ENTITY itNaturalPeriweed			"0x000040A5">
	<!ENTITY itLeatherBoots				"0x000040A6">
	<!ENTITY itRowenaVol1				"0x000040A7">
	<!ENTITY itRowenaVol2				"0x000040A8">
	<!ENTITY itRowenaVol3				"0x000040A9">
	<!ENTITY itRowenaVol4				"0x000040AA">
	<!ENTITY itRowenaVol5				"0x000040AB">
	<!ENTITY itReinforcedTitanium1		"0x000040AC">
	<!ENTITY itReinforcedTitanium3		"0x000040AD">
	<!ENTITY itHeliumAssembly			"0x000040AE">
	<!ENTITY itPteracniumFuelRod		"0x000040AF">
	<!ENTITY itLaserAmplifier			"0x000040B0">
	<!ENTITY itStarCannon				"0x000040B1">
	<!ENTITY itTridentCannon			"0x000040B2">
	<!ENTITY itHullPlateIonizer			"0x000040B3">
	<!ENTITY itFastFireLaserCannon		"0x000040B4">
	<!ENTITY itPartisanCannon			"0x000040B5">
	<!ENTITY itLaserArray				"0x000040B6">
	<!ENTITY itSlamCannon				"0x000040B7">
	<!ENTITY itArmorRepairDevice		"0x000040B8">
	<!ENTITY itUnknownID				"0x000040B9">
	<!ENTITY itUnknownHyperglyph		"0x000040BA">
	<!ENTITY itHeavyWater				"0x000040BB">
	<!ENTITY itEnhanceSRSROM			"0x000040BC">
	<!ENTITY itDeconGel					"0x000040BD">
	<!ENTITY itRadioactiveWaste			"0x000040BE">
	<!ENTITY itStargateControlRod		"0x000040BF">
	<!ENTITY itBlastPlate				"0x000040C0">
	<!ENTITY itAkan30Cannon				"0x000040C1">
	<!ENTITY itAkan30CannonShell		"0x000040C2">
	<!ENTITY itHardenedReactiveArmor	"0x000040C3">
	<!ENTITY itDisposableLauncher		"0x000040C4">
	<!ENTITY itLightRecoillessCannon	"0x000040C5">
	<!ENTITY itFusionTrigger			"0x000040C6">
	<!ENTITY itMilitaryID				"0x000040C7">
	<!ENTITY itMedalOfDistinction		"0x000040C8">
	<!ENTITY itMedalOfHonor				"0x000040C9">
	<!ENTITY itLancerCannon				"0x000040CA">
	<!ENTITY itMarkIHowitzer			"0x000040CB">
	<!ENTITY itLaserEnhancer			"0x000040CC">
	<!ENTITY itYoroiS100				"0x000040CD">
	<!ENTITY itYoroiS500				"0x000040CE">
	<!ENTITY itYoroiMX					"0x000040CF">
	<!ENTITY itGusokuArmor				"0x000040D0">
	<!ENTITY itSunflareCannon			"0x000040D1">
	<!ENTITY itBlinderCannon			"0x000040D2">
	<!ENTITY itMonopoleDeflector		"0x000040D3">
	<!ENTITY itNeutronBlaster			"0x000040D4">
	<!ENTITY itUnknownHaloGem			"0x000040D5">
	<!ENTITY itUnknownAlienDevice		"0x000040D6">
	<!ENTITY itParticleBoltCannon		"0x000040D7">
	<!ENTITY itParticleBoltCartridge	"0x000040D8">
	<!ENTITY itAkan600Turret			"0x000040D9">
	<!ENTITY itHanzoBlaster				"0x000040DA">
	<!ENTITY itMarkIIIHowitzer			"0x000040DB">
	<!ENTITY itTeV9Blaster				"0x000040DC">
	<!ENTITY itUnknownAuton				"0x000040DD">
	<!ENTITY itUnknownMnemonicCube		"0x000040DE">
	<!ENTITY itLightMeteorsteel			"0x000040DF">
	<!ENTITY itHeavyMeteorsteel			"0x000040E0">
	<!ENTITY itMissileDefense			"0x000040E1">
	<!ENTITY itWorldshipArmorPlate		"0x000040E2">
	<!ENTITY itGemOfContrition			"0x000040E3">
	<!ENTITY itRasiermesserLauncher		"0x000040E4">
	<!ENTITY itGotha10Missile			"0x000040E5">
	<!ENTITY itGotha400Seeker			"0x000040E6">
	<!ENTITY itP120HexphaseArmor		"0x000040E7">
	<!ENTITY itP210HexphaseArmor		"0x000040E8">
	<!ENTITY itP1000HexphaseArmor		"0x000040E9">
	<!ENTITY it1MiBattleAuton			"0x000040EA">
	<!ENTITY itTranspaceJumpdrive		"0x000040EB">
	<!ENTITY itOmniParticleCannon		"0x000040EC">
	<!ENTITY itAutoSentinel				"0x000040ED">
	<!ENTITY it300DDefenderAuton		"0x000040EE">
	<!ENTITY it1MBattleAuton			"0x000040EF">
	<!ENTITY itCashCardBlue				"0x000040F0">
	<!ENTITY itCashCardGold				"0x000040F1">
	<!ENTITY itCashCardPlatinum			"0x000040F2">
	<!ENTITY itDefectiveAuton			"0x000040F3">
	<!ENTITY itHypermycin				"0x000040F4">
	<!ENTITY itArtificialPlasma			"0x000040F5">
	<!ENTITY itRejuvTankFluid			"0x000040F6">
	<!ENTITY itGemOfDespair				"0x000040F7">
	<!ENTITY itOpticalKnowledgeArray	"0x000040F8">
	<!ENTITY itPlasmaTorch				"0x000040F9">
	<!ENTITY itR1Deflector				"0x000040FA">
	<!ENTITY itR5Deflector				"0x000040FB">
	<!ENTITY itMorningStarCannon		"0x000040FC">
	<!ENTITY itUraniumOre				"0x000040FD">
	<!ENTITY itHeliumRegolith			"0x000040FE">
	<!ENTITY itCobaltThoriumOre			"0x000040FF">
	<!ENTITY itXenotiteOre				"0x00004100">
	<!ENTITY itChronimiumGas			"0x00004101">
	<!ENTITY itBosonCondensate			"0x00004102">
	<!ENTITY itQuantumVacuum			"0x00004103">
	<!ENTITY itHadronArcheolith			"0x00004104">
	<!ENTITY itBooster					"0x00004105">
	<!ENTITY itDeathDrugs				"0x00004106">
	<!ENTITY it25MWReactor				"0x00004107">
	<!ENTITY it100MWReactor				"0x00004108">
	<!ENTITY it250MWReactor				"0x00004109">
	<!ENTITY it1GWReactor				"0x0000410A">
	<!ENTITY itInertialessDrive			"0x0000410B">
	<!ENTITY itDualTeV9Blaster			"0x0000410C">
	<!ENTITY itDamageWeaponROM			"0x0000410D">
	<!ENTITY itIonDisruptor				"0x0000410E">
	<!ENTITY itDeathCube				"0x0000410F">
	<!ENTITY itThermoCannon				"0x00004110">
	<!ENTITY itThermoCannonShell		"0x00004111">
	<!ENTITY itOmniTurbolaserCannon		"0x00004112">
	<!ENTITY itOmniTeV9Blaster			"0x00004113">
	<!ENTITY itOmniThermoCannon			"0x00004114">
	<!ENTITY itOmniIonBlaster			"0x00004115">
	<!ENTITY itHeavySlamCannon			"0x00004116">
	<!ENTITY itMakayevLauncher			"0x00004117">
	<!ENTITY itStrelkaWhite				"0x00004118">
	<!ENTITY itStrelkaGreen				"0x00004119">
	<!ENTITY itStrelkaRed				"0x0000411A">
	<!ENTITY itStrelkaBlack				"0x0000411B">
	<!ENTITY itAmmoBoxAkan30			"0x0000411C">
	<!ENTITY itAmmoBoxStrelka1			"0x0000411D">
	<!ENTITY itAmmoBoxMAG				"0x0000411E">
	<!ENTITY itAmmoBoxThermo			"0x0000411F">
	<!ENTITY itAmmoBoxStrelka2			"0x00004120">
	<!ENTITY itAmmoBoxRadioactive		"0x00004121">
	<!ENTITY itAmmoBoxContraband		"0x00004122">
	<!ENTITY itAmmoBoxParalysis			"0x00004123">
	<!ENTITY it500MWReactor				"0x00004124">
	<!ENTITY itKytrynLauncher			"0x00004125">
	<!ENTITY itKytrynPlasmaSeed			"0x00004126">
	<!ENTITY itUnknownAlienDevice10		"0x00004127">
	<!ENTITY itIonFlameCannon			"0x00004128">
	<!ENTITY itHeavyIonBlaster			"0x00004129">
	<!ENTITY itTritiumCannon			"0x0000412A">
	<!ENTITY itAdvancedTritiumCannon	"0x0000412B">
	<!ENTITY itFusionfireHowitzer		"0x0000412C">
	<!ENTITY itNAMIMineLauncher			"0x0000412D">
	<!ENTITY itStaticMine				"0x0000412E">
	<!ENTITY itTrackingMine				"0x0000412F">
	<!ENTITY itAdvancedPlasteelPlate	"0x00004130">
	<!ENTITY itLightOrthoSteel			"0x00004131">
	<!ENTITY itOrthoSteel				"0x00004132">
	<!ENTITY itHeavyOrthoSteel			"0x00004133">
	<!ENTITY itCeralloyArmor			"0x00004134">
	<!ENTITY itHeavyCeralloyArmor		"0x00004135">
	<!ENTITY itAdvancedCeralloyArmor	"0x00004136">
	<!ENTITY itQuadroCarbideArmor		"0x00004137">
	<!ENTITY itHexaCarbideArmor			"0x00004138">
	<!ENTITY itOctoCarbideArmor			"0x00004139">
	<!ENTITY itLightBlastPlate			"0x0000413A">
	<!ENTITY itHeavyBlastPlate			"0x0000413B">
	<!ENTITY itLightIthaliumArmor		"0x0000413C">
	<!ENTITY itIthaliumArmor			"0x0000413D">
	<!ENTITY itHeavyIthaliumArmor		"0x0000413E">
	<!ENTITY itCeralloyOre				"0x0000413F">
	<!ENTITY itOrthoSteelOre			"0x00004140">
	<!ENTITY itIthaliumOre				"0x00004141">
	<!ENTITY itNephrenP25				"0x00004142">
	<!ENTITY itNephrenB700				"0x00004143">
	<!ENTITY itNephrenX1				"0x00004144">
	<!ENTITY itInvincibleDeflector		"0x00004145">
	<!ENTITY itIonReflector				"0x00004146">
	<!ENTITY itTaikon10Deflector		"0x00004147">
	<!ENTITY itTaikon200Deflector		"0x00004148">
	<!ENTITY itJotunDeflector			"0x00004149">
	<!ENTITY itGreenEtheriumCrystal		"0x0000414A">
	<!ENTITY itBlueEtheriumCrystal		"0x0000414B">
	<!ENTITY itYellowEtheriumCrystal	"0x0000414C">
	<!ENTITY itDecayedEtheriumCrystal	"0x0000414D">
	<!ENTITY itMolbidiumCrystal			"0x0000414E">
	<!ENTITY itDiamondCrystal			"0x0000414F">
	<!ENTITY itShieldOptimizer			"0x00004150">
	<!ENTITY itDefectiveShieldOptimizer	"0x00004151">
	<!ENTITY itShieldPowerSaver			"0x00004152">
	<!ENTITY itParticleResistCoating	"0x00004153">
	<!ENTITY itRadiationImmuneCoating	"0x00004154">
	<!ENTITY itEMPImmuneCoating			"0x00004155">
	<!ENTITY itIonResistCoating			"0x00004156">
	<!ENTITY itShieldInterfereCoating	"0x00004157">
	<!ENTITY itIonEffectImmuneCoating	"0x00004158">
	<!ENTITY itThermoResistCoating		"0x00004159">
	<!ENTITY itCarbonWeaver2Coating		"0x0000415A">
	<!ENTITY itUnknownBarrel5			"0x0000415B">
	<!ENTITY itJinnKahn					"0x0000415C">
	<!ENTITY itIcelandicSalmon			"0x0000415D">
	<!ENTITY itCyanavir					"0x0000415E">
	<!ENTITY itHumanCadaver				"0x0000415F">
	<!ENTITY itCDMArchive				"0x00004160">
	<!ENTITY itNeurosPMP				"0x00004161">
	<!ENTITY itRingerSpice				"0x00004162">
	<!ENTITY itPrimeBeef				"0x00004163">
	<!ENTITY itDigitalWristComputer		"0x00004164">
	<!ENTITY itPortableAutodoc			"0x00004165">
	<!ENTITY itBarianiOliveOil			"0x00004166">
	<!ENTITY itTetramiteOre				"0x00004167">
	<!ENTITY itNewCoke					"0x00004168">
	<!ENTITY itCrystallineUranium		"0x00004169">
	<!ENTITY itIthaliumWatch			"0x0000416A">
	<!ENTITY itJasminePearlTea			"0x0000416B">
	<!ENTITY itMalachiteCrystal			"0x0000416C">
	<!ENTITY itRingerAmbrosia			"0x0000416D">
	<!ENTITY itHyperonicOre				"0x0000416E">
	<!ENTITY itEtheriumOre				"0x0000416F">
	<!ENTITY itImperialCaviar			"0x00004170">
	<!ENTITY itCerusiteCrystal			"0x00004171">
	<!ENTITY itNeuranase				"0x00004172">
	<!ENTITY itKytrynBlaster			"0x00004173">
	<!ENTITY itTM7Cannon				"0x00004174">
	<!ENTITY itTM7Warhead				"0x00004175">
	<!ENTITY itIM90Blaster				"0x00004176">
	<!ENTITY itMarkVHowitzer			"0x00004177">
	<!ENTITY it50MWReactor				"0x00004178">
	<!ENTITY itIocrymRepeller			"0x00004179">
	<!ENTITY it150MWReactor				"0x0000417A">
	<!ENTITY itXenotiteFuelRod			"0x0000417B">
	<!ENTITY itHadronVacuumFuelCell		"0x0000417C">
	<!ENTITY itMammoth25Deflector		"0x0000417D">
	<!ENTITY itMammoth50Deflector		"0x0000417E">
	<!ENTITY itMammoth100Deflector		"0x0000417F">
	<!ENTITY itMilitaryMapROM			"0x00004180">
	<!ENTITY itShtormRepeater			"0x00004181">
	<!ENTITY itV10PoweredArmor			"0x00004182">
	<!ENTITY itV300PoweredArmor			"0x00004183">
	<!ENTITY itR9Deflector				"0x00004184">
	<!ENTITY itNAMIHeavyLauncher		"0x00004185">
	<!ENTITY itM2Missile				"0x00004186">
	<!ENTITY itM5Missile				"0x00004187">
	<!ENTITY itS3Missile				"0x00004188">
	<!ENTITY itGemOfSacrifice			"0x00004189">
	<!ENTITY itKineticUpgrade			"0x0000418A">
	<!ENTITY itParticleUpgrade			"0x0000418B">
	<!ENTITY itBlastUpgrade				"0x0000418C">
	<!ENTITY itIonUpgrade				"0x0000418D">
	<!ENTITY itThermoUpgrade			"0x0000418E">
	<!ENTITY itWeaponSpeedROM			"0x0000418F">
	<!ENTITY itMinersCargoHold			"0x00004190">
	<!ENTITY itDM1500MissileRack		"0x00004191">
	<!ENTITY itDataROM					"0x00004192">
	<!ENTITY itOmniPartisanCannon		"0x00004193">
	<!ENTITY itHydrogenGas				"0x00004194">
	<!ENTITY itLiquidOxygen				"0x00004195">
	<!ENTITY itKM120Missile				"0x00004196">
	<!ENTITY itKM550Missile				"0x00004197">
	<!ENTITY itJB2ShieldBusterMAG		"0x00004198">
	<!ENTITY itMoskvaLightTurret		"0x00004199">
	<!ENTITY itCyclotronDeflectorI		"0x0000419A">
	<!ENTITY itCyclotronDeflectorIII	"0x0000419B">
	<!ENTITY itCyclotronDeflectorIV		"0x0000419C">
	<!ENTITY itCeratopsQuasiArmor1		"0x0000419D">
	<!ENTITY itCeratopsQuasiArmor2		"0x0000419E">
	<!ENTITY itLaserDeflector			"0x0000419F">
	<!ENTITY itHiroShieldOptimizer		"0x000041A0">
	<!ENTITY itMoskvaDualCannon			"0x000041A1">
	<!ENTITY itBallistaCannon			"0x000041A2">
	<!ENTITY itLongreachIAutocannon		"0x000041A3">
	<!ENTITY itNeurohackROM				"0x000041A4">
	<!ENTITY itUnknownEnhancer2			"0x000041A5">
	<!ENTITY itUnknownEnhancer5			"0x000041A6">
	<!ENTITY itUnknownEnhancer8			"0x000041A7">
	<!ENTITY itParticleEnhancer			"0x000041A8">
	<!ENTITY itMakayevBlastEnhancer		"0x000041A9">
	<!ENTITY itHowitzerHighSpeedLoader	"0x000041AA">
	<!ENTITY itRasiermesserEnhancer		"0x000041AB">
	<!ENTITY itBushidoEnhancer			"0x000041AC">
	<!ENTITY itLightArmorRepair			"0x000041AD">
	<!ENTITY itMediumArmorRepair		"0x000041AE">
	<!ENTITY itHeavyArmorRepair			"0x000041AF">
	<!ENTITY itUltraLightTitaniumPlate	"0x000041B0">
	<!ENTITY itLightCeramicPlate		"0x000041B1">
	<!ENTITY itLightReactiveArmor		"0x000041B2">
	<!ENTITY itLightOmskArmor			"0x000041B3">
	<!ENTITY itMediumOmskArmor			"0x000041B4">
	<!ENTITY itHeavyOmskArmor			"0x000041B5">
	<!ENTITY itOmskDeflectorI			"0x000041B6">
	<!ENTITY itOmskDeflectorII			"0x000041B7">
	<!ENTITY itDepletedUraniumArmor		"0x000041B8">
	<!ENTITY vtLongreachI				"0x000041B9">
	<!ENTITY vtICXLaserCannon			"0x000041BA">

	<!ENTITY vtStoneAsteroidEjecta		"0x00005001">
	<!ENTITY vtIceAsteroidEjecta		"0x00005002">
	<!ENTITY vtVolcanicAsteroidEjecta	"0x00005003">
	<!ENTITY vtWreckEjecta				"0x00005004">
	<!ENTITY vtUnknownAmmoBox			"0x00005005">
	<!ENTITY vtUnknownFieldCrystal		"0x00005006">
	<!ENTITY vtKineticExplosion1		"0x00005007">
	<!ENTITY vtKineticExplosion2		"0x00005008">
	<!ENTITY vtKineticExplosion3		"0x00005009">
	<!ENTITY vtKineticExplosion4		"0x0000500A">
	<!ENTITY vtBlastExplosion1			"0x0000500B">
	<!ENTITY vtBlastExplosion2			"0x0000500C">
	<!ENTITY vtBlastExplosion3			"0x0000500D">
	<!ENTITY vtBlastExplosion4			"0x0000500E">
	<!ENTITY vtThermoExplosion1			"0x0000500F">
	<!ENTITY vtThermoExplosion2			"0x00005010">
	<!ENTITY vtThermoExplosion3			"0x00005011">
	<!ENTITY vtThermoExplosion4			"0x00005012">
	<!ENTITY vtPlasmaExplosion1			"0x00005013">
	<!ENTITY vtPlasmaExplosion2			"0x00005014">
	<!ENTITY vtPlasmaExplosion3			"0x00005015">
	<!ENTITY vtPlasmaExplosion4			"0x00005016">
	<!ENTITY vtRadioactiveExplosion1	"0x00005017">
	<!ENTITY vtRadioactiveExplosion2	"0x00005018">
	<!ENTITY vtMetallicAsteroidEjecta	"0x00005019">

	<!ENTITY trMiscItems1				"0x00008004">
	<!ENTITY trMiscItems2				"0x00008005">
	<!ENTITY trMiscItems3				"0x00008006">
	<!ENTITY trMiscItems4				"0x00008007">
	<!ENTITY trMiscItems5				"0x00008008">
	<!ENTITY trCargoContainer			"0x00008009">
	<!ENTITY trUsefulItems1				"0x0000800A">
	<!ENTITY trUsefulItems2				"0x0000800B">
	<!ENTITY trIllegalItems1			"0x0000800C">
	<!ENTITY trIllegalItems2			"0x0000800D">
	<!ENTITY trIllegalItems3			"0x0000800E">
	<!ENTITY trStationSupplies			"0x0000800F">
	<!ENTITY trConsumables1				"0x00008010">
	<!ENTITY trConsumables2				"0x00008011">
	<!ENTITY trConsumables3				"0x00008012">
	<!ENTITY trConsumables4				"0x00008013">
	<!ENTITY trConsumables5				"0x00008014">
	<!ENTITY trMajorItem1				"0x00008015">
	<!ENTITY trMajorItem2				"0x00008016">
	<!ENTITY trMajorItem3				"0x00008017">
	<!ENTITY trMajorItem4				"0x00008018">
	<!ENTITY trMajorItem5				"0x00008019">
	<!ENTITY trMinorItem1				"0x0000801A">
	<!ENTITY trMinorItem2				"0x0000801B">
	<!ENTITY trMinorItem3				"0x0000801C">
	<!ENTITY trMinorItem4				"0x0000801D">
	<!ENTITY trMinorItem5				"0x0000801E">
	<!ENTITY trConsumables6				"0x0000801F">
	<!ENTITY trConsumables7				"0x00008020">
	<!ENTITY trConsumables8				"0x00008021">
	<!ENTITY trConsumables9				"0x00008022">
	<!ENTITY trConsumables10			"0x00008023">
	<!ENTITY trMajorItem6				"0x00008024">
	<!ENTITY trMajorItem7				"0x00008025">
	<!ENTITY trMajorItem8				"0x00008026">
	<!ENTITY trMajorItem9				"0x00008027">
	<!ENTITY trMajorItem10				"0x00008028">
	<!ENTITY trMinorItem6				"0x00008029">
	<!ENTITY trMinorItem7				"0x0000802A">
	<!ENTITY trMinorItem8				"0x0000802B">
	<!ENTITY trMinorItem9				"0x0000802C">
	<!ENTITY trMinorItem10				"0x0000802D">
	<!ENTITY trMilitaryItem4			"0x0000802E">
	<!ENTITY trMilitaryItem5			"0x0000802F">
	<!ENTITY trMilitaryItem6			"0x00008030">
	<!ENTITY trMilitaryItem7			"0x00008031">
	<!ENTITY trMilitaryItem8			"0x00008032">
	<!ENTITY trMilitaryItem9			"0x00008033">
	<!ENTITY trMilitaryItem10			"0x00008034">
	<!ENTITY trMedicalItem				"0x00008035">
	<!ENTITY etPirateAmbush1			"0x00008101">
	<!ENTITY etPirateAmbush2			"0x00008102">
	<!ENTITY etPirateAmbush3			"0x00008103">
	<!ENTITY etPirateAmbush4			"0x00008104">
	<!ENTITY etMarauderAmbush1			"0x00008105">
	<!ENTITY etMarauderAmbush2			"0x00008106">
	<!ENTITY tbStoneAsteroidOre			"0x00008107">
	<!ENTITY tbFrostAsteroidOre			"0x00008108">
	<!ENTITY tbMetallicAsteroidOre		"0x00008109">
	<!ENTITY tbVolcanicAsteroidOre		"0x0000810A">
	<!ENTITY ovUraniumWasteCheck		"0x0000810B">

	<!ENTITY efMediumExplosion1			"0x00009001">
	<!ENTITY efLargeExplosion1			"0x00009002">
	<!ENTITY efSmallExplosion1			"0x00009003">
	<!ENTITY efShieldHit1				"0x00009004">
	<!ENTITY efStargateIn				"0x00009005">
	<!ENTITY efStargateOut				"0x00009006">
	<!ENTITY efFragmentationExplosion	"0x00009007">
	<!ENTITY efBattleArenaWallHit		"0x00009008">
	<!ENTITY efStationExplosion			"0x00009009">
	<!ENTITY efMediumCannonFlash		"0x0000900A">
	<!ENTITY efNebula					"0x0000900B">
	<!ENTITY efFusionExplosion1			"0x0000900C">
	<!ENTITY efGemOfSacrifice			"0x0000900D">
	<!ENTITY efLargeStationDamage		"0x0000900E">
	<!ENTITY efMediumStationDamage		"0x0000900F">
	
	<!ENTITY sfSustain					"0x00009101">
	<!ENTITY sfStrengthen				"0x00009102">
	<!ENTITY seNebula					"0x00009201">
	<!ENTITY adPart1Desc				"0x00009301">

	<!ENTITY dsShipInterior				"0x0000A001">
	<!ENTITY dsCargoHold				"0x0000A002">
	<!ENTITY dsAbandonedStation			"0x0000A003">
	<!ENTITY dsDryDock					"0x0000A004">
	<!ENTITY dsInstallDevice			"0x0000A005">
	<!ENTITY dsRepairArmor				"0x0000A006">
	<!ENTITY dsReplaceArmor				"0x0000A007">
	<!ENTITY dsExchangeBuy				"0x0000A008">
	<!ENTITY dsExchangeSell				"0x0000A009">
	<!ENTITY dsManualRefuel				"0x0000A00A">
	<!ENTITY dsRemoveDevice				"0x0000A00B">
	<!ENTITY dsInstallWeapon			"0x0000A00C">
	<!ENTITY dsUseArmorCoating			"0x0000A00D">
	<!ENTITY dsInstallSpecificDevice	"0x0000A00E">
	<!ENTITY dsNavBeacon				"0x0000A00F">
	<!ENTITY dsRemoveWeapon				"0x0000A010">
	<!ENTITY dsRefuel					"0x0000A011">
	<!ENTITY dsUseArmorPatch			"0x0000A012">
	<!ENTITY dsLoot						"0x0000A013">
	<!ENTITY dsMission					"0x0000A014">
	<!ENTITY dsRefuseContamination		"0x0000A015">
	<!ENTITY dsJettison					"0x0000A016">
	<!ENTITY dsAbandonedShip			"0x0000A017">
	<!ENTITY dsAbandonedCrate			"0x0000A018">
	<!ENTITY dsNavSign					"0x0000A019">
	<!ENTITY dsAbandonedNavSign			"0x0000A01A">
	<!ENTITY dsShipConfig				"0x0000A01B">
	<!ENTITY dsBarricade				"0x0000A01C">
	<!ENTITY dsRepairItem				"0x0000A01D">
	<!ENTITY dsMinedOre					"0x0000A01E">
	<!ENTITY dsUseDataROM				"0x0000A01F">
	<!ENTITY dsNeurohack				"0x0000A020">
	<!ENTITY dsNeurohackHelp			"0x0000A021">

	<!ENTITY pwSustain					"0x0000B001">
	<!ENTITY pwHeal						"0x0000B002">
	<!ENTITY pwStrengthen				"0x0000B003">
	<!ENTITY pwDefend					"0x0000B004">
	<!ENTITY pwNebularSight				"0x0000B005">
	<!ENTITY pwCircleOfWrath			"0x0000B006">
	<!ENTITY pwIngenuity				"0x0000B007">
	<!ENTITY pwDesperateEscape			"0x0000B008">
	<!ENTITY pwShatter					"0x0000B009">
	<!ENTITY pwPrescience				"0x0000B00A">

	<!ENTITY rsMediumDamage				"0x0000F001">
	<!ENTITY rsShipInterior				"0x0000F002">
	<!ENTITY rsItemListScreen			"0x0000F003">
	<!ENTITY rsZubrinShields			"0x0000F004">
	<!ENTITY rsZubrinArmor				"0x0000F005">
	<!ENTITY rsZubrinLRS				"0x0000F006">
	<!ENTITY rsZubrinTargeting			"0x0000F007">
	<!ENTITY rsSRSSnow					"0x0000F008">
	<!ENTITY rsZubrinLRSBorder			"0x0000F009">
	<!ENTITY rsEI100XShields			"0x0000F00A">
	<!ENTITY rsEI100XArmor				"0x0000F00B">
	<!ENTITY rsZubrinReactor			"0x0000F00C">
	<!ENTITY rsWolfenShields			"0x0000F00D">
	<!ENTITY rsWolfenArmor				"0x0000F00E">
	<!ENTITY rsZubrinLarge				"0x0000F00F">
	<!ENTITY rsWolfenLarge				"0x0000F010">
	<!ENTITY rsEI100XLarge				"0x0000F011">
	<!ENTITY rsMinedOreBkgnd			"0x0000F012">
	<!ENTITY rsZubrinDockScreenBkgnd	"0x0000F013">
	<!ENTITY rsZubrinDockScreenMask		"0x0000F014">

	<!ENTITY rsMediumShips1				"0x0000F100">
	<!ENTITY rsMissiles					"0x0000F101">
	<!ENTITY rsWorlds1					"0x0000F102">
	<!ENTITY rsStations1				"0x0000F103">
	<!ENTITY rsSmallShips1				"0x0000F104">
	<!ENTITY rsMediumShips3				"0x0000F105">
	<!ENTITY rsMediumHit				"0x0000F106">
	<!ENTITY rsShieldHit				"0x0000F107">
	<!ENTITY rsStargate					"0x0000F108">
	<!ENTITY rsStar1					"0x0000F109">
	<!ENTITY rsNavBeacon				"0x0000F10A">
	<!ENTITY rsMissiles2				"0x0000F10B">
	<!ENTITY rsDriveExhaust				"0x0000F10C">
	<!ENTITY rsLargeShips1				"0x0000F10D">
	<!ENTITY rsMediumShips2				"0x0000F10E">
	<!ENTITY rsLargeExplosions			"0x0000F10F">
	<!ENTITY rsMediumExplosions			"0x0000F110">
	<!ENTITY rsMissiles3				"0x0000F111">
	<!ENTITY rsMediumShips4				"0x0000F112">
	<!ENTITY rsLargeDamage				"0x0000F113">
	<!ENTITY rsDebris1					"0x0000F114">
	<!ENTITY rsDominaEffects1			"0x0000F115">
	<!ENTITY rsMissiles4				"0x0000F116">
	<!ENTITY rsBattleArena				"0x0000F117">
	<!ENTITY rsStations2				"0x0000F118">
	<!ENTITY rsRedDwarfStar				"0x0000F119">
	<!ENTITY rsAStar					"0x0000F11A">
	<!ENTITY rsStations3				"0x0000F11B">
	<!ENTITY rsStations4				"0x0000F11C">
	<!ENTITY rsItems1					"0x0000F11D">
	<!ENTITY rsWorlds2					"0x0000F11E">
	<!ENTITY rsShockwave1				"0x0000F11F">
	<!ENTITY rsStations5				"0x0000F120">
	<!ENTITY rsStations6				"0x0000F121">
	<!ENTITY rsNebulaEnv				"0x0000F122">
	<!ENTITY rsNebula					"0x0000F123">
	<!ENTITY rsLargeShips2				"0x0000F124">
	<!ENTITY rsRedGiantStar				"0x0000F125">
	<!ENTITY rsStations7				"0x0000F126">
	<!ENTITY rsStations8				"0x0000F127">
	<!ENTITY rsMissiles6				"0x0000F128">
	<!ENTITY rsBarricades				"0x0000F129">
	<!ENTITY rsStations9				"0x0000F12A">
	<!ENTITY rsTeratonDefender			"0x0000F12B">
	<!ENTITY rsWeapons8DB32				"0x0000F12C">
	<!ENTITY rsExplosionsAG256			"0x0000F12D">
	<!ENTITY rsWeapons9DB32				"0x0000F12E">
	<!ENTITY rsWorldsRingedGiant1		"0x0000F12F">
	<!ENTITY rsWorldsRingedGiant2		"0x0000F130">
	<!ENTITY rsWorldsRingedGiant3		"0x0000F131">
	<!ENTITY rsWorldsRingedGiant4		"0x0000F132">
	<!ENTITY rsWorldsRingedGiant5		"0x0000F133">
	<!ENTITY rsWorldsRingedGiant6		"0x0000F134">
	<!ENTITY rsWorldsRingedGiant7		"0x0000F135">
	<!ENTITY rsWorldsRingedGiant8		"0x0000F136">
	<!ENTITY rsSapphireYacht			"0x0000F137">
	<!ENTITY rsDriveExhaust2			"0x0000F138">
	<!ENTITY rsWorldsIcePlanet1			"0x0000F139">
	<!ENTITY rsWorldsIcePlanet2			"0x0000F13A">
	<!ENTITY rsWorldsIcePlanet3			"0x0000F13B">
	<!ENTITY rsWorldsIcePlanet4			"0x0000F13C">
	<!ENTITY rsEI500Freighter			"0x0000F13D">
	<!ENTITY rsWolfenGunship			"0x0000F13E">
	<!ENTITY rsExplosionsAG128			"0x0000F13F">
	<!ENTITY rsExplosionsA20G192		"0x0000F140">
	<!ENTITY rsExplosionsA20G256		"0x0000F141">
	<!ENTITY rsShockwave2				"0x0000F142">
	<!ENTITY rsShockwave3				"0x0000F143">
	<!ENTITY rsExplosion2AG128			"0x0000F144">
	<!ENTITY rsExplosion2A20G192		"0x0000F145">
	<!ENTITY rsPart1Cover				"0x0000F146">
	<!ENTITY rsProlog1					"0x0000F147">
	<!ENTITY rsEndGameEscaped			"0x0000F148">
	<!ENTITY rsEndGameDestroyed			"0x0000F149">
	<!ENTITY rsMetallicAsteroids		"0x0000F14A">
	<!ENTITY rsExplosion3AG128			"0x0000F14B">
	<!ENTITY rsExplosionsAG48			"0x0000F14C">
	<!ENTITY rsExplosionsAG96			"0x0000F14D">
	<!ENTITY rsLogBuoy					"0x0000F14E">
	<!ENTITY rsStdMissile1				"0x0000F14F">

	<!ENTITY snLaserCannon				"0x0000F201">
	<!ENTITY snRecoillessCannon			"0x0000F202">
	<!ENTITY snArmorHit1				"0x0000F203">
	<!ENTITY snShipExplosion1			"0x0000F204">
	<!ENTITY snStationExplosion1		"0x0000F205">
	<!ENTITY snShieldHit1				"0x0000F206">
	<!ENTITY snMissileLauncher			"0x0000F207">
	<!ENTITY snStargate					"0x0000F208">

	<!-- DEBRIS 000F -->

	<!ENTITY stShipwreck1				"0x000F0000">
	<!ENTITY stShipwreck2				"0x000F0001">
	<!ENTITY stShipwreck3				"0x000F0002">
	<!ENTITY stShipwreck4				"0x000F0003">
	<!ENTITY stSealedCargoContainer		"0x000F0004">
	<!ENTITY stWeaponsCache				"0x000F0005">
	<!ENTITY stWeaponsCrate				"0x000F0006">
	<!ENTITY stRadioactiveShipwreck		"0x000F0007">

	<!ENTITY stSalvagerEncounter		"0x000F1000">
	<!ENTITY scSalvagerNomad			"0x000F1001">

	<!-- COMMONWEALTH 0010 -->

	<!ENTITY ssStartonEridani			"0x00100001">
	<!ENTITY ssStKatharine				"0x00100002">

	<!ENTITY stStartonEridani			"0x00102001">
	<!ENTITY stCommonwealthSettlement	"0x00102002">
	<!ENTITY stMiningColony				"0x00102003">
	<!ENTITY stCommonwealthFortress		"0x00102004">
	<!ENTITY stAgriculturalStation		"0x00102005">
	<!ENTITY stCommonwealthColony		"0x00102006">
	<!ENTITY stKorolovShipping			"0x00102007">
	<!ENTITY stCommonwealthStationArmored "0x00102008">
	<!ENTITY stCommonwealthTurret		"0x00102009">
	<!ENTITY stCommonwealthColonyArmed	"0x0010200A">
	<!ENTITY stCommonwealthStation		"0x0010200B">
	<!ENTITY stCommonwealthResidentials	"0x0010200C">
	<!ENTITY stCommonwealthDryDock		"0x0010200D">
	<!ENTITY stCommonwealthSlums		"0x0010200E">
	<!ENTITY stContainerHabitat			"0x0010200F">
	<!ENTITY stMedicalSuburb			"0x00102010">
	<!ENTITY stRaisuStation				"0x00102011">
	<!ENTITY stBeringStation			"0x00102012">
	<!ENTITY stStKatsArcology15			"0x00102013">
	<!ENTITY stStKatsArcology45			"0x00102014">
	<!ENTITY stStKatsArcology75			"0x00102015">
	<!ENTITY stStKatsArcology105		"0x00102016">
	<!ENTITY stStKatsArcology135		"0x00102017">
	<!ENTITY stStKatsArcology165		"0x00102018">
	<!ENTITY stStKatsArcology195		"0x00102019">
	<!ENTITY stStKatsArcology225		"0x0010201A">
	<!ENTITY stStKatsArcology255		"0x0010201B">
	<!ENTITY stStKatsArcology285		"0x0010201C">
	<!ENTITY stStKatsArcology315		"0x0010201D">
	<!ENTITY stStKatsArcology345		"0x0010201E">
	<!ENTITY stStKatsArcology			"0x0010201F">
	<!ENTITY stIocrymMonument			"0x00102020">
	<!ENTITY baStKatsArcologyBase		"0x00102021">

	<!ENTITY scCenturion				"0x00103001">
	<!ENTITY scScarabFreighter			"0x00103002">
	<!ENTITY scCenturionRama			"0x00103003">
	<!ENTITY scCenturionX				"0x00103004">
	<!ENTITY scAurochs					"0x00103005">
	<!ENTITY scBorerCaptured			"0x00103006">
	<!ENTITY scRoninJenna				"0x00103007">
	<!ENTITY scIAVLight					"0x00103008">
	<!ENTITY scIAVMedium				"0x00103009">
	<!ENTITY scIAVHeavy					"0x0010300A">
	<!ENTITY scManticore				"0x0010300B">
	<!ENTITY evCommTrafficBehavior		"0x0010300C">
	<!ENTITY evStKatsTrafficBehavior	"0x0010300D">
	
	<!ENTITY itIncandescentStrawberries	"0x00104001">
	<!ENTITY itIncandescentPeaches		"0x00104002">
	<!ENTITY itIncandescentBellFruit	"0x00104003">
	<!ENTITY itIncandescentLucuma		"0x00104004">
	<!ENTITY itIncandescentCoffee		"0x00104005">
	
	<!ENTITY tbCommDefenders			"0x00108001">
	<!ENTITY tbCommEliteDefenders		"0x00108002">
	<!ENTITY tbCommPrivateCrafts		"0x00108003">
	<!ENTITY tbCommTraffic				"0x00108004">
	<!ENTITY tbStKatsTraffic			"0x00108005">

	<!ENTITY dsCommonwealthStation		"0x0010A001">
	<!ENTITY dsCommonwealthDecon		"0x0010A002">
	<!ENTITY dsCommonwealthConfiscate	"0x0010A003">
	<!ENTITY dsCommonwealthFreeSlaves	"0x0010A004">
	<!ENTITY dsCommonwealthImprison		"0x0010A005">
	<!ENTITY dsCommonwealthPub			"0x0010A006">
	<!ENTITY dsCommonwealthNightclub	"0x0010A007">
	<!ENTITY dsContainerHabitatDonateItem "0x0010A008">
	<!ENTITY dsContainerHabitatReward	"0x0010A009">
	<!ENTITY dsStKatsArcology			"0x0010A00A">
	<!ENTITY dsMilitiaPromotion			"0x0010A00B">
	<!ENTITY dsStKatsArcologyParliament	"0x0010A00C">
	<!ENTITY dsStKatsArcologyCommerce	"0x0010A00D">
	<!ENTITY dsStKatsArcologyUniversity	"0x0010A00E">
	<!ENTITY dsStKatsArcologyArts		"0x0010A00F">

	<!ENTITY rsCommonwealthSlumsImage	"0x0010F001">
	<!ENTITY rsIAVLight					"0x0010F002">
	<!ENTITY rsIAVMedium				"0x0010F003">
	<!ENTITY rsIAVHeavy					"0x0010F004">
	<!ENTITY rsStKatsArcology			"0x0010F005">
	<!ENTITY rsStKatsArcologyScreen		"0x0010F006">
	<!ENTITY rsStKatsArcologySchematic	"0x0010F007">
	<!ENTITY rsManticore				"0x0010F008">
	<!ENTITY rsIocrymMonument			"0x0010F009">
	<!ENTITY rsIocrymMonumentScreen		"0x0010F00A">

	<!-- BATTLE ARENA 0014 -->

	<!ENTITY ssBattleArena				"0x00140001">

	<!ENTITY svGladiator				"0x00141001">

	<!ENTITY stBattleArena				"0x00142001">
	<!ENTITY stBattleArenaWall			"0x00142002">
	<!ENTITY stBlackMarketRigelAurelius	"0x00142003">

	<!ENTITY scIAVLightG1				"0x00143001">
	<!ENTITY scBorerG1					"0x00143002">
	<!ENTITY scIAVMediumG2				"0x00143003">
	<!ENTITY scRoninG1					"0x00143004">
	<!ENTITY scRoninG2					"0x00143005">
	<!ENTITY scRoninG3					"0x00143006">
	<!ENTITY scRoninG4					"0x00143007">
	<!ENTITY scEarthzoneG2				"0x00143008">
	<!ENTITY scEI100G1					"0x00143009">
	<!ENTITY scEI100G2					"0x0014300A">
	<!ENTITY scIAVHeavyG2				"0x0014300B">
	<!ENTITY scIAVHeavyG3				"0x0014300C">
	<!ENTITY scT31G3					"0x0014300D">
	<!ENTITY scSapphireG2				"0x0014300E">
	<!ENTITY scSapphireG3				"0x0014300F">
	<!ENTITY scSapphireG4				"0x00143010">
	<!ENTITY scEI200G3					"0x00143011">
	<!ENTITY scEI500G2					"0x00143012">
	<!ENTITY scEI500G4					"0x00143013">
	<!ENTITY scEI500G5					"0x00143014">
	<!ENTITY scManticoreG4				"0x00143015">
	<!ENTITY scManticoreG5				"0x00143016">
	<!ENTITY scManticoreG6				"0x00143017">
	<!ENTITY scWolfenG4					"0x00143018">
	<!ENTITY scWolfenG5					"0x00143019">
	<!ENTITY scWolfenG6					"0x0014301A">
	<!ENTITY scCenturionG5				"0x0014301B">
	<!ENTITY scCenturionG6				"0x0014301C">
	<!ENTITY scTheSlicerManticore		"0x0014301D">

	<!ENTITY itSlicerCannon				"0x00144001">

	<!ENTITY rsBattleArenaBkgnd			"0x0014F001">
	<!ENTITY rsBattleArenaExtra			"0x0014F002">

	<!-- CORPORATE HIERARCHY 0015 -->

	<!ENTITY stAutonDealer				"0x00152001">
	<!ENTITY stArmsDealerRasiermesser	"0x00152002">
	<!ENTITY stArmsDealerMakayev		"0x00152003">
	<!ENTITY stArmsDealerBushido		"0x00152004">
	<!ENTITY stWondrousDevices			"0x00152005">
	<!ENTITY stInsuranceCompany			"0x00152006">
	<!ENTITY stIceFarm					"0x00152007">
	<!ENTITY stHotel					"0x00152008">
	<!ENTITY stArmorDealer				"0x00152009">
	<!ENTITY stFuelDepot				"0x0015200A">
	<!ENTITY stArmsDealer				"0x0015200B">
	<!ENTITY stCorporateEnclave			"0x0015200C">
	<!ENTITY stTaikonVentures			"0x0015200D">
	<!ENTITY stCorporateTradingPost		"0x0015200E">
	<!ENTITY stRasiermesserFactory		"0x0015200F">
	<!ENTITY stAdventurerOutfitters		"0x00152010">
	<!ENTITY stCorporateContractBoard	"0x00152011">
	<!ENTITY stManufacturingPlant		"0x00152012">
	<!ENTITY stHelenaVolkov				"0x00152013">
	<!ENTITY stMakayevFactory			"0x00152014">

	<!ENTITY scCorporateCruiser			"0x00153001">
	<!ENTITY scAntaresI					"0x00153002">
	<!ENTITY scAntaresII				"0x00153003">
	<!ENTITY scAntaresV					"0x00153004">
	<!ENTITY scEI200					"0x00153005">
	<!ENTITY scEI7000					"0x00153006">
	<!ENTITY scOrion					"0x00153007">
	<!ENTITY scEmpress					"0x00153008">
	<!ENTITY scWolfenVolkov				"0x00153009">
	<!ENTITY scRoninCharonBuster		"0x0015300A">
	<!ENTITY scKateMorgentalCruiser		"0x0015300B">
	<!ENTITY baCharonBuster				"0x0015300C">
	<!ENTITY scEI200CharonBuster		"0x0015300D">

	<!ENTITY itDvalinIon9Cannon			"0x00154001">
	<!ENTITY itDvalinArmor				"0x00154002">
	<!ENTITY itKorolovShippingContainer	"0x00154003">
	<!ENTITY itClass5Deflector			"0x00154004">
	
	<!ENTITY tbCorpDefenders			"0x00158001">

	<!ENTITY dsArmsDealerSpecial		"0x0015A001">
	<!ENTITY dsCorporateImprison		"0x0015A002">
	<!ENTITY dsContractDelivery			"0x0015A003">

	<!ENTITY rsTradingPostAnimation		"0x0015F001">
	<!ENTITY rsContractBoardBkgnd		"0x0015F002">
	<!ENTITY rsRasiermesserFactoryBkgnd	"0x0015F003">
	<!ENTITY rsKorolovInsignia			"0x0015F004">
	<!ENTITY rsKorolovLogo				"0x0015F005">
	<!ENTITY rsAntaresIImage			"0x0015F006">
	<!ENTITY rsEI7000Image				"0x0015F007">
	<!ENTITY rsEI200Image				"0x0015F008">
	<!ENTITY rsAntaresIIImage			"0x0015F009">
	<!ENTITY rsAntaresVImage			"0x0015F00A">
	<!ENTITY rsEI100Image				"0x0015F00B">
	<!ENTITY rsManufacturingPlant		"0x0015F00C">
	<!ENTITY rsRasiermesserFactory		"0x0015F00D">
	<!ENTITY rsMakayevFactory			"0x0015F00E">

	<!-- CHARON PIRATES 0016 -->

	<!ENTITY ssCharonPirateFortress		"0x00160001">

	<!ENTITY stCharonPirateOutpost		"0x00162001">
	<!ENTITY stCharonPirateOutpost2		"0x00162002">
	<!ENTITY stCharonPirateOutpost2a	"0x00162003">
	<!ENTITY stCharonPirateOutpost3		"0x00162004">
	<!ENTITY stCharonPirateFortress		"0x00162005">
	<!ENTITY stKorolovAtCharon			"0x00162006">
	<!ENTITY stKorolovAtCharonCons		"0x00162007">
	<!ENTITY stCharonPrimaryStronghold1	"0x00162008">
	<!ENTITY stCharonPrimaryStronghold2 "0x00162009">
	<!ENTITY stCharonPrimaryStronghold3 "0x0016200A">

	<!ENTITY scCorsair					"0x00163001">
	<!ENTITY scViking					"0x00163002">
	<!ENTITY scCorsair-II				"0x00163003">
	<!ENTITY scCharonFrigateRaider		"0x00163004">
	<!ENTITY scCharonFrigateKronosaurus	"0x00163005">

	<!ENTITY itCharonPirateMapROM		"0x00164001">

	<!ENTITY rsCharonFrigateImage		"0x0016F001">

	<!-- BLACK MARKET 0017 -->

	<!ENTITY stBlackMarketStation		"0x00172001">
	<!ENTITY stTempusLab				"0x00172002">
	<!ENTITY stBlackMarketShipyard		"0x00172003">

	<!ENTITY scMolotok					"0x00173001">

	<!ENTITY itBlackMarketContainer		"0x00174001">
	
	<!ENTITY tbBlackMarketShips			"0x00178001">

	<!ENTITY dsBlackMarketPayDebt		"0x0017A001">
	<!ENTITY dsBlackMarketRefuseDock	"0x0017A002">
	<!ENTITY dsBlackMarketPromotion		"0x0017A003">

	<!-- SISTERS OF DOMINA 0018 -->

	<!ENTITY stSistersOfDomina			"0x00182001">

	<!ENTITY itCarvedPrayerStone		"0x00184001">
	<!ENTITY itJewelOfContemplation		"0x00184002">
	<!ENTITY itHierolithCrystal			"0x00184003">
	<!ENTITY itHierolithGeode			"0x00184004">
	<!ENTITY itHierolithObelisk			"0x00184005">

	<!ENTITY dsContemplateDomina		"0x0018A001">
	<!ENTITY dsDominaDonateItem			"0x0018A002">
	<!ENTITY dsDominaTithe				"0x0018A003">
	<!ENTITY dsSistersDockServices		"0x0018A004">
	<!ENTITY dsSistersIntro				"0x0018A005">
	<!ENTITY dsSistersDecon				"0x0018A006">

	<!ENTITY rsSistersShrineBkgnd		"0x0018F001">

	<!-- SUNG SLAVERS 0019 -->

	<!ENTITY stSungFortress				"0x00192001">
	<!ENTITY stSungNWWall				"0x00192002">
	<!ENTITY stSungNEWall				"0x00192003">
	<!ENTITY stSungSEWall				"0x00192004">
	<!ENTITY stSungSWWall				"0x00192005">
	<!ENTITY stSungCitadel				"0x00192006">
	<!ENTITY stSungSlaveCamp			"0x00192007">
	<!ENTITY stSungSlaveQuarters1		"0x00192008">
	<!ENTITY stSungSlaveQuarters2		"0x00192009">
	<!ENTITY stSungDefenseSat1			"0x0019200A">
	<!ENTITY stSungFortressInHuaramarca	"0x0019200B">

	<!ENTITY scSungTransport			"0x00193001">
	<!ENTITY scWindSlaver				"0x00193002">
	<!ENTITY scSteelSlaver				"0x00193003">
	<!ENTITY scEarthSlaver				"0x00193004">
	<!ENTITY scDragonSlaver				"0x00193005">
	<!ENTITY scCarrierEarthSlaver		"0x00193006">

	<!ENTITY itLongzhuSphere			"0x00194001">
	<!ENTITY itQianlongArchcannon		"0x00194002">
	<!ENTITY itCyberDeckLowerShields	"0x00194003">
	<!ENTITY itCyberDeckDisarm			"0x00194004">
	<!ENTITY itSlaveCoffin				"0x00194005">
	<!ENTITY itSungArmor				"0x00194006">
	<!ENTITY itHeavySungArmor			"0x00194007">
	<!ENTITY itDragonShields			"0x00194008">
	<!ENTITY itDragonArmor				"0x00194009">
	<!ENTITY itLightSungArmor			"0x0019400A">
	
	<!ENTITY tbSungEncounters			"0x00198001">

	<!ENTITY dsUseLongzhuSphere			"0x0019A001">
	<!ENTITY dsSungSlaveQuarters		"0x0019A002">

	<!ENTITY rsDragonSlaverImage		"0x0019F001">

	<!-- COMMONWEALTH FLEET 001A -->

	<!ENTITY ssPointJuno				"0x001A0001">
	<!ENTITY ssDantalion				"0x001A0002">

	<!ENTITY svCSCAntarctica			"0x001A1001">
	<!ENTITY svFleetAssassins			"0x001A1002">

	<!ENTITY stCSCAmericaEncounter		"0x001A2001">
	<!ENTITY stCSCArcticaEncounter		"0x001A2002">
	<!ENTITY stCSCAsiaEncounter			"0x001A2003">
	<!ENTITY stCSCAtlanticaEncounter	"0x001A2004">
	<!ENTITY stCSCIndiaEncounter		"0x001A2005">
	<!ENTITY stCSCPacificaEncounter		"0x001A2006">
	<!ENTITY stCSCSaharaEncounter		"0x001A2007">
	<!ENTITY stPointJuno				"0x001A2008">
	<!ENTITY stCSCTerraEncounter		"0x001A2009">
	<!ENTITY stCSCAntarcticaEncounter	"0x001A200A">
	<!ENTITY stRogueBaseRescue			"0x001A200B">
	<!ENTITY stCSCEuropaWreck			"0x001A200C">
	<!ENTITY stCenturionWreck			"0x001A200D">
	<!ENTITY stSandstormWreck			"0x001A200E">
	<!ENTITY stDantalionSettlement		"0x001A200F">

	<!ENTITY scCSCHospital				"0x001A3001">
	<!ENTITY scCSCTaskForce				"0x001A3002">
	<!ENTITY scAquilaCruiser			"0x001A3003">
	<!ENTITY scCSCTerra					"0x001A3004">
	<!ENTITY scCSCAntarctica			"0x001A3005">
	<!ENTITY scEI500JuanCarlos			"0x001A3006">
	<!ENTITY scBritannia				"0x001A3007">

	<!ENTITY itAresCampaignRibbon		"0x001A4001">
	<!ENTITY itLamplighterPrototype		"0x001A4002">
	<!ENTITY itUnknownLamplighterPrototype "0x001A4003">
	<!ENTITY itLamplighter				"0x001A4004">
	<!ENTITY itLamplighterDataROM		"0x001A4005">
	<!ENTITY itR5BDeflector				"0x001A4006">
	<!ENTITY itNM900MissilePod			"0x001A4007">
	<!ENTITY vtDamageControlParty		"0x001A4008">

	<!ENTITY etRogueAmbush1				"0x001A8001">
	<!ENTITY etKobolAmbush1				"0x001A8002">
	<!ENTITY etRogueAmbush2				"0x001A8003">

	<!ENTITY dsFleetRefuseDock			"0x001AA001">
	<!ENTITY dsFleetPromotion			"0x001AA002">
	<!ENTITY dsFleetDockServices		"0x001AA003">
	<!ENTITY dsFleetDelivery			"0x001AA004">
	<!ENTITY dsFleetImprison			"0x001AA005">
	<!ENTITY dsFleetDecon				"0x001AA006">

	<!ENTITY rsPointJunoBkgnd			"0x001AF001">
	<!ENTITY rsCSCBkgnd					"0x001AF002">
	<!ENTITY rsStationsPointJuno		"0x001AF003">
	<!ENTITY rsBritannia				"0x001AF004">

	<!-- ARES ORTHODOXY 001B -->

	<!ENTITY stAresCommune				"0x001B2001">
	<!ENTITY stAresRedoubt				"0x001B2002">
	<!ENTITY stAresOutpost				"0x001B2003">
	<!ENTITY stAresShipyard				"0x001B2004">

	<!ENTITY scSandstorm				"0x001B3001">
	<!ENTITY scAresCannon				"0x001B3002">
	<!ENTITY scPolar					"0x001B3003">
	<!ENTITY scTundra					"0x001B3004">
	<!ENTITY scCometfall				"0x001B3005">
	<!ENTITY scChasm					"0x001B3006">
	<!ENTITY scDeimos					"0x001B3007">
	<!ENTITY scPhobos					"0x001B3008">
	<!ENTITY scPolar2					"0x001B3009">

	<!ENTITY itLightningCannon			"0x001B4001">
	<!ENTITY itLightTharsisPlate		"0x001B4002">
	<!ENTITY itTharsisPlate				"0x001B4003">
	<!ENTITY itMicronukeCannon			"0x001B4004">
	<!ENTITY itMicronuke				"0x001B4005">
	<!ENTITY itAresArchcannon			"0x001B4006">
	<!ENTITY itCydonianShields			"0x001B4007">
	<!ENTITY itAresLauncher				"0x001B4008">
	<!ENTITY itWarhammerNuke			"0x001B4009">
	<!ENTITY itLightningTurret			"0x001B400A">
	<!ENTITY itCydonianHeavyShields		"0x001B400B">
	<!ENTITY itHeavyTharsisPlate		"0x001B400C">
	<!ENTITY itHecatesCannon			"0x001B400D">
	<!ENTITY itMassiveTharsisPlate		"0x001B400E">
	<!ENTITY itKaidunShields			"0x001B400F">
	<!ENTITY itAresPlasmaCannon			"0x001B4010">

	<!ENTITY etAresAmbush1				"0x001B8001">
	<!ENTITY etAresAmbush2				"0x001B8002">
	<!ENTITY etAresAmbush3				"0x001B8003">
	<!ENTITY etAresAmbush4				"0x001B8004">
	<!ENTITY tbAresEncounters			"0x001B8005">

	<!-- IOCRYM AND HERETIC 001C -->

	<!ENTITY ssHeretic					"0x001C0001">

	<!ENTITY svIocrym					"0x001C1001">
	<!ENTITY svAresHeretic				"0x001C1002">
	<!ENTITY svSentinelAI				"0x001C1003">

	<!ENTITY stHereticGate				"0x001C2001">
	<!ENTITY stHereticControlCenter		"0x001C2002">
	<!ENTITY stIocrymManipulator		"0x001C2003">
	<!ENTITY stCommonwealthResearchHeretic	"0x001C2004">
	<!ENTITY stRingersResearchHeretic	"0x001C2005">
	<!ENTITY stSistersResearchHeretic	"0x001C2006">
	<!ENTITY stTVX1Outpost				"0x001C2007">
	<!ENTITY stIocrymOutpost			"0x001C2008">
	<!ENTITY stAresResearchHeretic		"0x001C2009">
	<!ENTITY stSvalbardEncounter		"0x001C200A">
	<!ENTITY stMRADSensor				"0x001C200B">
	<!ENTITY stSvalbardWreck			"0x001C200C">
	<!ENTITY stMaryamsArchive			"0x001C200D">
	<!ENTITY stHereticStation			"0x001C200E">
	<!ENTITY stHereticSun				"0x001C200F">

	<!ENTITY scIocrymCommandShip		"0x001C3001">
	<!ENTITY scSvalbardExplorer		"0x001C3002">
	<!ENTITY scIocrymWarningBuoy		"0x001C3003">
	<!ENTITY scIocrymSentinel			"0x001C3004">
	<!ENTITY scHuygensExplorer			"0x001C3005">

	<!ENTITY itIocrymPlate				"0x001C4001">
	<!ENTITY itPlasmaThrower			"0x001C4002">
	<!ENTITY itQuantumsphereDisintegrator "0x001C4003">
	<!ENTITY itQuantumsphereShell		"0x001C4004">
	<!ENTITY itIocrymCocoon				"0x001C4005">
	<!ENTITY itIocrymHealer				"0x001C4006">
	<!ENTITY itIocrymVeil				"0x001C4007">
	<!ENTITY itHereticResearchROM		"0x001C4008">
	<!ENTITY itLightIocrymPlate			"0x001C4009">
	<!ENTITY itIocrymFractureCannon		"0x001C400A">
	<!ENTITY itMRADExperiment			"0x001C400B">
	<!ENTITY itIocrymCyberneticTower	"0x001C400C">
	<!ENTITY itIocrymSentinelVirus		"0x001C400D">
	<!ENTITY itIocrymSentinelData		"0x001C400E">
	<!ENTITY itIocrymManipulator		"0x001C400F">

	<!ENTITY seSpacetimeQuarantine		"0x001C9001">
	<!ENTITY efIocrymManipulatorWaves	"0x001C9002">

	<!ENTITY rsIocrymSentinel			"0x001CF001">
	<!ENTITY rsMRADConsole				"0x001CF002">
	<!ENTITY rsNeurohackFrame			"0x001CF003">
	<!ENTITY rsNeurohackControls		"0x001CF004">
	<!ENTITY rsCorporateExplorer		"0x001CF005">
	<!ENTITY rsIocrymOutpost			"0x001CF006">
	<!ENTITY rsIocrymCommandShip		"0x001CF007">
	<!ENTITY rsIocrymManipulator		"0x001CF008">
	<!ENTITY rsHereticItems				"0x001CF009">
	<!ENTITY rsMRADProbe				"0x001CF00A">

	<!-- RINGERS 001D -->

	<!ENTITY stRingersCollective		"0x001D2001">
	<!ENTITY stRingerShipyard			"0x001D2002">

	<!ENTITY itPositronLancer			"0x001D4001">

	<!ENTITY dsRingerRefuel				"0x001DA001">
	<!ENTITY dsRingerRepairArmor		"0x001DA002">
	<!ENTITY dsRingerReplaceArmor		"0x001DA003">
	<!ENTITY dsRingerInstallDevice		"0x001DA004">
	<!ENTITY dsRingerRemoveDevice		"0x001DA005">
	<!ENTITY dsRingerInstallSpecificDevice "0x001DA006">
	<!ENTITY dsRingerImprison			"0x001DA007">
	<!ENTITY dsRingerBuy				"0x001DA008">
	<!ENTITY dsRingerSell				"0x001DA009">

	<!-- ELYSIUM 001E -->

	<!ENTITY ssElysium					"0x001E0001">

	<!ENTITY stMajellenStargate			"0x001E2001">
	<!ENTITY stTanRuDorem				"0x001E2002">
	<!ENTITY stUnchartedMajellenStargate	"0x001E2003">

	<!-- TERATONS 001F -->

	<!ENTITY stTeratonTradingPost		"0x001F2001">
	<!ENTITY stTeratonDefender			"0x001F2002">
	<!ENTITY stTeratonResearch			"0x001F2003">
	<!ENTITY stTeratonFactory			"0x001F2004">
	<!ENTITY stTeratonChrysalis			"0x001F2005">
	<!ENTITY baTeratonNestBase			"0x001F2006">
	
	<!ENTITY efTeratonChrysalisOpen		"0x001F9001">

	<!ENTITY dsTeratonMugging			"0x001FA001">
	
	<!ENTITY rsTeratonChrysalis			"0x001FF001">

	<!-- DOMINA 0020 -->

	<!ENTITY svDomina					"0x00201001">
	<!ENTITY stDomina					"0x00202001">

	<!ENTITY itCircleOfWrathPower		"0x00204001">
	<!ENTITY itShatterPower				"0x00204002">

	<!ENTITY sfDefend					"0x00209001">

	<!ENTITY rsShatterShockwave			"0x0020F001">

	<!-- MISCELLANEOUS FIRE ENCOUNTERS 0801 -->

	<!ENTITY stTerroristCamp			"0x08010000">
	<!ENTITY stTerroristCompound		"0x08010001">
	<!ENTITY scPlague					"0x08010002">
	<!ENTITY scRevelations				"0x08010003">
	<!ENTITY tbSapiensEncounters		"0x08010004">

	<!ENTITY stHeliotropeOutpost		"0x08010040">
	<!ENTITY stHeliotropeColony			"0x08010041">
	<!ENTITY scHeliotropeGunship		"0x08010042">
	<!ENTITY scHeliotropeDestroyer		"0x08010043">
	<!ENTITY itHeliotropeFuel			"0x08010044">
	<!ENTITY svHeliotropes				"0x08010045">
	<!ENTITY tbHeliotropeEncounters		"0x08010046">

	<!ENTITY stXenophobeFleet			"0x08010080">
	<!ENTITY stXenophobeWorldship		"0x08010081">
	<!ENTITY scXenophobeFighter			"0x08010082">
	<!ENTITY scXenophobeDefender		"0x08010083">
	<!ENTITY scXenophobeWorldship		"0x08010084">
	<!ENTITY scXenophobeArk				"0x08010085">
	<!ENTITY rsXenophobeArk				"0x08010086">
	<!ENTITY itXenophobeLancer			"0x08010087">

	<!ENTITY stVentariColony			"0x080100C0">
	<!ENTITY scVentariCruiser			"0x080100C1">

	<!ENTITY stAbbasidOutpost			"0x08010100">
	<!ENTITY itAbbasidThanogram			"0x08010101">

	<!ENTITY stPteravoreLair			"0x08010140">
	<!ENTITY ovPteravoreFuelDrain		"0x08010141">
	<!ENTITY vtPteravoreSporeLauncher	"0x08010142">
	<!ENTITY rsPteravoreClaw			"0x08010143">
	<!ENTITY rsPteravoreClawOverlay		"0x08010144">
	<!ENTITY rsPteravoreDebris			"0x08010145">
	<!ENTITY vtPteravoreBite			"0x08010146">
	<!ENTITY rsPteravoreLair			"0x08010147">

	<!-- MISCELLANEOUS WATER ENCOUNTERS 0802 -->

	<!ENTITY stDrugCartelOutpost		"0x08020000">
	<!ENTITY scMethEnforcer				"0x08020001">

	<!ENTITY stCentauriStronghold		"0x08020040">
	<!ENTITY stCentauriOccupation		"0x08020041">
	<!ENTITY scCentauriRaider			"0x08020042">
	<!ENTITY scCentauriCommandShip		"0x08020043">
	<!ENTITY rsCentauriRaiderImage		"0x08020044">
	<!ENTITY itCentauriRecoilless		"0x08020045">
	<!ENTITY scCentauriHeavyRaider		"0x08020046">
	<!ENTITY rsCentauriHeavyRaiderImage	"0x08020047">
	<!ENTITY itCentauriCLAW				"0x08020048">
	<!ENTITY rsCentauriStationsImage	"0x08020049">
	<!ENTITY stCentauriCamp				"0x0802004A">
	<!ENTITY scArcoVaughnHeavyRaider	"0x0802004B">
	<!ENTITY stArcoVaughnHabitat		"0x0802004C">
	<!ENTITY itCentauriNanos			"0x0802004D">
	<!ENTITY itCentauriHeavyCLAW		"0x0802004E">
	<!ENTITY tbCentauriEncounters		"0x0802004F">
	<!ENTITY svCentauriWarlords			"0x08020050">

	<!ENTITY stKobolWarlordCamp			"0x08020080">
	<!ENTITY scKobolGunshipDualTeV9		"0x08020081">
	<!ENTITY scKobolGunshipOmniTeV9		"0x08020082">
	<!ENTITY scKobolGunshipMissiles		"0x08020083">
	<!ENTITY svKobolWarlords			"0x08020084">

	<!ENTITY stLuminousAssembler		"0x080200C0">
	<!ENTITY scLuminousDrone			"0x080200C1">
	<!ENTITY itLuminousCortex			"0x080200C2">
	<!ENTITY itLuminousTameProgram		"0x080200C3">
	<!ENTITY itLuminousScareProgram		"0x080200C4">
	<!ENTITY itLuminousArmature			"0x080200C5">
	<!ENTITY itIonBlaster				"0x080200C6">
	<!ENTITY itLuminousParticleShields	"0x080200C7">
	<!ENTITY itLuminousBlastShields		"0x080200C8">
	<!ENTITY itLuminousIonShields		"0x080200C9">
	<!ENTITY itLuminousThermoShields	"0x080200CA">
	<!ENTITY svFriendlyLuminous			"0x080200CB">

	<!ENTITY stHuariFortress			"0x08020100">
	<!ENTITY scHurinDestroyer			"0x08020101">
	<!ENTITY svHuariEmpire				"0x08020102">
	<!ENTITY ssHuaramarca				"0x08020103">
	<!ENTITY stHuaramarcaGateway		"0x08020104">
	<!ENTITY itTualiComaDrug			"0x08020105">
	<!ENTITY dsUseTualiComaDrug			"0x08020106">
	<!ENTITY stHuariTemple				"0x08020107">
	<!ENTITY rsHuariStationsImage		"0x08020108">
	<!ENTITY stHuariHabitat				"0x08020108">

	<!ENTITY svDwargRaiders				"0x08020140">
	<!ENTITY stDwargColony				"0x08020141">
	<!ENTITY stDwargFortress			"0x08020142">
	<!ENTITY scDwargRaider				"0x08020143">
	<!ENTITY scDwargMaster				"0x08020144">
	<!ENTITY scDwargBehemoth			"0x08020145">
	<!ENTITY itDwargChitonArmor			"0x08020146">
	<!ENTITY itDwargCatoptricArmor		"0x08020147">
	<!ENTITY itDwargHolochroalArmor		"0x08020148">
	<!ENTITY itDwargXiphonCannon		"0x08020149">
	<!ENTITY itDwargBehemothCannon		"0x0802014A">
	<!ENTITY stDwargGathering			"0x0802014B">
	<!ENTITY stDwargGatheringSat		"0x0802014C">
	<!ENTITY svFriendlyZoanthrope		"0x0802014D">
	<!ENTITY itDwargCnidocystCannon		"0x0802014E">
	<!ENTITY itDwargCnidocystNodule		"0x0802014F">

	<!-- MISCELLANEOUS AIR ENCOUNTERS 0803 -->

	<!ENTITY stOutlawConvoyEncounter	"0x08030000">
	<!ENTITY stOutlawHaven				"0x08030001">
	<!ENTITY stOutlawBase				"0x08030002">
	<!ENTITY stOutlawBase2				"0x08030003">
	<!ENTITY scZulu						"0x08030004">
	<!ENTITY scSotho					"0x08030005">
	<!ENTITY scOromo					"0x08030006">
	<!ENTITY scZulu-II					"0x08030007">
	<!ENTITY scT55ArmedTransport		"0x08030008">
	<!ENTITY tbOutlawEncounters			"0x08030009">

	<!ENTITY stMarauderOutpost			"0x08030040">
	<!ENTITY stMarauderCompound			"0x08030041">
	<!ENTITY stMarauderStronghold		"0x08030042">
	<!ENTITY scTripoli					"0x08030043">
	<!ENTITY scDrake					"0x08030044">
	<!ENTITY scViking-II				"0x08030045">
	<!ENTITY scMarauderRaidPlatform		"0x08030046">
	<!ENTITY scBarbary					"0x08030047">
	<!ENTITY tbMarauderEncounters		"0x08030048">
	<!ENTITY svMarauders				"0x08030049">

	<!ENTITY stPenitentShrine			"0x08030080">
	<!ENTITY stPenitentSanctum			"0x08030081">
	<!ENTITY scRepentant				"0x08030082">
	<!ENTITY scAtonement				"0x08030083">
	<!ENTITY itOracusHarassPower		"0x08030084">
	<!ENTITY trHaloGems					"0x08030085">

	<!ENTITY stRogueFleetCache			"0x080300C0">
	<!ENTITY stRogueFleetSettlement		"0x080300C1">
	<!ENTITY scRogueMineLayer			"0x080300C2">

	<!ENTITY stHimalRefuge				"0x08030100">
	<!ENTITY scHimalInterceptor			"0x08030101">
	<!ENTITY svHimalSeparatists			"0x08030102">

	<!ENTITY svUrakWarlords				"0x08030140">
	<!ENTITY stUrakOutpost				"0x08030141">
	<!ENTITY stUrakMine					"0x08030142">
	<!ENTITY stUrakFortress				"0x08030143">
	<!ENTITY scUrakSentinel				"0x08030144">
	<!ENTITY scUrakDestroyer			"0x08030145">
	<!ENTITY itUrakArmorLight			"0x08030146">
	<!ENTITY itUrakArmorHeavy			"0x08030147">
	<!ENTITY itUrakMassDriver			"0x08030148">
	<!ENTITY itUrakHowitzer				"0x08030149">
	<!ENTITY itUrakMassDriverAdvanced	"0x0803014A">

	<!-- MISCELLANEOUS EARTH ENCOUNTERS 0804 -->

	<!ENTITY stAsteroidMineTitanium		"0x08040000">
	<!ENTITY stAsteroidMineDuralloy		"0x08040001">
	<!ENTITY stAsteroidMinePteracnium	"0x08040002">
	<!ENTITY scBorer					"0x08040003">
	<!ENTITY scBorer-II					"0x08040004">
	<!ENTITY scHammerhead				"0x08040005">
	<!ENTITY scHammerhead-II			"0x08040006">
	<!ENTITY stAsteroidMinePalladium	"0x08040007">
	<!ENTITY stAsteroidMineCeralloy		"0x08040008">
	<!ENTITY stOutlawTurret				"0x08040009">
	<!ENTITY evOutlawMinerBehavior		"0x0804000A">
	<!ENTITY tbOutlawMinerEncounters	"0x0804000B">

	<!ENTITY stAnarchistGathering		"0x08040040">
	<!ENTITY stAnarchistGatheringSat	"0x08040041">
	<!ENTITY stAnarchistCell			"0x08040042">
	<!ENTITY stAnarchistSettlement		"0x08040043">
	<!ENTITY scEarthzone				"0x08040044">
	<!ENTITY scHornet					"0x08040045">
	<!ENTITY tbAnarchistEncounters		"0x08040046">

	<!ENTITY stTinkerGathering			"0x08040080">

	<!ENTITY stRanxOutpost				"0x080400C0">
	<!ENTITY stRanxFortress				"0x080400C1">
	<!ENTITY scRanxGunship				"0x080400C2">
	<!ENTITY scRanxDreadnought			"0x080400C3">
	<!ENTITY tbRanxEncounters			"0x080400C4">

	<!ENTITY stFerianColony				"0x08040100">
	<!ENTITY scFerianMiner				"0x08040101">
	<!ENTITY scFerianWarrior			"0x08040102">
	<!ENTITY rsFerianWarrior			"0x08040103">
	<!ENTITY itFerianCannon				"0x08040104">

	<!ENTITY stGaianProcessorEncounter	"0x08040140">
	<!ENTITY scGaianProcessor			"0x08040141">
	<!ENTITY itGaianDemolitionCannon	"0x08040142">
	<!ENTITY svGaianTerraformers		"0x08040143">
	]>

<TranscendenceUniverse
		version=						"0x01000200"
		minVersion=						"0x01000200"
		>

<!-- TRANSCENDENCE ************************************************************

	SECTIONS

	<Globals>
	<Images>
	<Sounds>
	<EncounterTables>
	<StarSystemDescriptions>
	<StarSystemTopology>

	<DockScreen>
	<ItemTable>
	<ItemType>
	<ShipClass>
	<OverlayType>
	<Sovereign>
	<SpaceEnvironmentType>
	<StationType>

	SCALES

	1 second realtime = 60 seconds game-time
	1 pixel = 12,500 kilometers

	TECH LEVELS

	  1		Personal (most humans can create/repair)
	 2-3	Manufacturing (requires dedicated machines/devices)
	 4-5	High-tech (requires special knowledge and/or sophisticated infrastructure)
	 6-7	Restricted (technology available only to governments/corporations)
	 8-9	Experimental (basic concepts understood; limited practice)
	10-14	High Races (technology only available to Galactics)
	15-20	Halo Races (technology only available to Ancients in globular clusters)
	21-25	Hierodule (technology only available to hierodules)
	26-50	Core Minds (technology only known to Core Minds)
	 >50	Unknown (impossible or not known to be physically possible)

	FUELS

	Helium3 fuel rod
	Pteracnium fuel rod
	Boson-condensate fuel rod

	One Helium3 fuel rod contains 2500 units of fuel

	UNID Namespace

	0x D MMM T III

	D		Domain. This can be one of the following:

			0-9	Reserved for Transcendence
			A-C	Registered extensions (contact transcendence@kronosaur.com)
			D	Unregistered extensions (pick a random module ID)
			E	Unregistered extensions (pick a random module ID)
			F	Reserved (do not use)

	MMM		Module ID. Registered extensions are assigned a single
			module ID to use for UNIDs. Unregistered extensions should
			use a random module ID (it is up to the user to manage
			unregistered extensions).

			The following Transcendence modules for domain 0 are defined:

			000	Core objects (star systems, basic items, sovereigns, etc.)
			00F Debris
			010	Commonwealth
			014 Battle Arena
			015	Corporate Hierarchy
			016 Charon Pirates
			017	Black Market
			018	Sisters of Domina
			019 Sung Slavers
			01A	Commonwealth Fleet
			01B Ares Orthodoxy
			01C	Iocrym
			01D Ringers
			01E Elysium
			01F Teratons
			020 Domina
			030 Oracus
			801	Misc Fire Encounters
			802	Misc Water Encounters
			803	Misc Air Encounters
			804	Misc Earth Encounters

	T		Type ID. Within a module, the division of the namespace is
			undefined. Transcendence uses this value to represent the
			type of object assigned an UNID:

			0	star system description
			1	sovereigns
			2	station types
			3	ship classes
			4	item types
			5	special item types (virtuals)

			8	random tables (items, encounters)
			9	effects, energy fields, space env, etc
			A	dock screens
			B	powers

			F	images and sound resources

	III		ID. This can be any value unique within the module and type ID.
			This is generally a monotonically increasing number.

	Example:

	To create a player ship extension, the ship class can be given an UNID
	like:

			0xD1A13001

			D		places this UNID in the unregistered extensions section.
			1A1		is a random number chosen by the extension creator.
			3		is for ship classes.
			001		is the first ship class.

	PLAYER SHIP EXTRA DATA

	arenaBattles:	Number of battles in the arena
	arenaRank:		An integer representing the captain's rank
						0 = Citizen
						1 = Gladiator
						2 = Veteran
						3 = Starfighter
	blackMarketCrime: Description of player's offense against the Sindikat
	blackMarketCrimeCost: Price that the player has to pay to stop bounty hunters
	blackMarketLevel: Black market level (1-6)
	blackMarketMission: Current black market mission
						StK = deliver container to St. Katharine's
	blackMarketShields: Level at which player got free shields
	blackMarketWeapon: Level at which player got free weapon
	blackMarketXP:	Black Market experience points
	dominaLevel:	Domina relationship level
						Nil = none
						1 = 
	commonCrime:	Description of the player's crime (e.g., "slave-trading")
	commonCrimeSeverity: The severity of the crime
						0 = No crime
						1 = Misdemeanor (drug possession)
						2 = Felony (piracy)
						3 = Crimes against Humanity (slave-trading, genocide, mass-destruction)
	commonCrimeRecord: Number of times player has been caught and released for a felony
	fleetLevel:		Fleet level (1-6)
	fleetMission:	Object that has assigned mission to player (Nil if none)
	fleetXP:		Fleet experience points
	fleetTFSuccess:	Number of successful Task Force missions
	fleetTFFailure: Number of failed Task Force missions
	rins: Number of rins (Ringer collective currency)
	ringerCrime:	Description of the player's crime (e.g., "destruction of xyz")
	ringerCrimeSeverity: The severity of the crime
						0 = No crime
						1 = Social violation
						2 = Dangerous deviance
						3 = Existential threat
	sistersAttitude: Abstract measure of the sisters' attitude towards the player
	sistersLastDonation:	Time at which the player donated last (Nil if never)
	sistersStory:	State of story-telling
	slaveReward:	Number of slaves for which player has already been rewarded
	slaveSales:		Proceeds from slave sales
	slavesFreed:	Number of slaves freed to commonwealth authorities

	COORDINATES

	docking port offsets				cartessian (from center)
	animation offsets					cartessian (from center)
	satellite offsets					cartessian (from center)
	drive exhaust images				ship pointing right; screen coordinates
	armor								polar (from center); 0 = front of ship
	devices								polar (from center); 0 = front of ship

	COLORS

	dark acid							(H175 S100 B41) (... B92)

-->

<!-- SOVEREIGNS ============================================================ -->

	<Sovereign UNID="&svPlayer;"
			name="independent"
			alignment="constructive chaos"
			/>

	<!-- CONSTRUCTIVE CHAOS -->

	<Sovereign UNID="&svIndependent;"
			name="independent merchant"
			alignment="constructive chaos"
			/>

	<Sovereign UNID="&svFriendlyAuton;"
			name="auton"
			alignment="constructive chaos"
			>
		<Language>
			<Message id="8"  text="Auton damaged"/>
			<Message id="9"  text=""/>
		</Language>
	</Sovereign>

	<Sovereign UNID="&svDefectiveAuton;"
			name="auton"
			alignment="constructive chaos"
			>
		<Language>
			<Message id="8"  text="Auton damaged"/>
			<Message id="9"  text=""/>
		</Language>
		
		<Relationships>
			<Relationship sovereign="&svPlayer;" disposition="enemy" mutual="true"/>
		</Relationships>
	</Sovereign>

	<Sovereign UNID="&svCommonwealth;"
			name="Commonwealth"
			alignment="constructive chaos"
			/>

	<!-- CONSTRUCTIVE ORDER -->

	<!-- NEUTRAL -->

	<Sovereign UNID="&svIndependentTrader;"
			name="independent merchant"
			alignment="neutral"
			/>

	<!-- DESTRUCTIVE ORDER -->

	<Sovereign UNID="&svDestructiveOrder;"
			name="(destructive order)"
			alignment="destructive order"
			/>

	<Sovereign UNID="&svCult;"
			name="Cult"
			alignment="destructive order"
			/>

	<Sovereign UNID="&svOutlaw;"
			name="Outlaws"
			alignment="destructive order"
			/>

	<Sovereign UNID="&svSettlers;"
			name="Settlers"
			alignment="destructive order"
			/>

	<Sovereign UNID="&svGaianTerraformers;"
			name="Gaian Terraformers"
			alignment="destructive order"
			/>

	<!-- DESTRUCTIVE CHAOS -->

	<Sovereign UNID="&svDestructiveChaos;"
			name="(destructive chaos)"
			alignment="destructive chaos"
			/>

	<Sovereign UNID="&svAnarchists;"
			name="Anarchists"
			alignment="destructive chaos"
			/>

<!-- DOCK SCREENS =============================================================

	GLOBALS

	gPlayer: Object representing the player.
	gPlayerShip: The player's ship.
	gScreen: The current screen being displayed.
	gSource: The station/ship that the player is docked at.
	gTrans: Transcendence application object.

	TEMPORARY GLOBALS

	gBuyCriteria
	gCost
	gItem
	gMargin
	gPrevScreen
	gPrevPane
	gBonus

-->

	<DockScreen UNID="&dsAbandonedCrate;"
			name=			"=(objGetName gSource)"
			>

		<Panes>
			<Default
					desc=	"You are docked with an abandoned cargo crate.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedCrate;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedCrate;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>
				</Actions>

			</Default>
		</Panes>
	</DockScreen>

	<!-- Abandoned station looting screen -->

	<DockScreen UNID="&dsAbandonedStation;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					desc=		"You are docked at the lifeless ruins of a destroyed station. Wrecked machinery and smoldering bodies litter the silent, cavernous bay.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedStation;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<DockScreen UNID="&dsAbandonedShip;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					desc=		"You are docked with the wreck of a ship.">

				<Actions>
					<Action name="Loot" key="L" default="1" >
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsLoot;")
							)
					</Action>

					<Action name="Jettison" key="J">
						(block Nil
							(setq gPrevScreen "&dsAbandonedShip;")
							(scrShowScreen gScreen "&dsJettison;")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<DockScreen UNID="&dsBarricade;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default>

				<Initialize>
					(block (desc)
						(switch
							(eq (staGetImageVariant gSource) 0)
								(block Nil
									(setq desc "facing 0 degrees")
									(scrEnableAction gScreen 0 Nil)
									)

							(eq (staGetImageVariant gSource) 1)
								(block Nil
									(setq desc "facing 90 degrees")
									(scrEnableAction gScreen 1 Nil)
									)

							(eq (staGetImageVariant gSource) 2)
								(block Nil
									(setq desc "facing 180 degrees")
									(scrEnableAction gScreen 2 Nil)
									)

							(eq (staGetImageVariant gSource) 3)
								(block Nil
									(setq desc "facing 270 degrees")
									(scrEnableAction gScreen 3 Nil)
									)
							)

						(scrSetDesc gScreen (cat "You are docked with a titanium barricade " desc ". These structures are often used as cheap, static defenses."))
						)
				</Initialize>

				<Actions>
					<Action name="Face 0 degrees" key="0">
						(block Nil
							(staSetImageVariant gSource 0)
							(scrShowPane gScreen "OrientDone")
							)
					</Action>

					<Action name="Face 90 degrees" key="9">
						(block Nil
							(staSetImageVariant gSource 1)
							(scrShowPane gScreen "OrientDone")
							)
					</Action>

					<Action name="Face 180 degrees" key="8">
						(block Nil
							(staSetImageVariant gSource 2)
							(scrShowPane gScreen "OrientDone")
							)
					</Action>

					<Action name="Face 270 degrees" key="7">
						(block Nil
							(staSetImageVariant gSource 3)
							(scrShowPane gScreen "OrientDone")
							)
					</Action>

					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>
				</Actions>

			</Default>

			<OrientDone
					desc=	"You have successfully oriented the titanium barricade.">

				<Actions>
					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>
				</Actions>
			</OrientDone>

		</Panes>

	</DockScreen>

	<!-- Repair armor 

		gPrevScreen: Previous screen
		gPrevPane: Previous pane
		gTechLevel: Tech level at which armor is repaired
		gArmorSegment: Armor segment being repaired/replaced (0-3)
		gCheckMilitaryID: If True, check to make sure player has military ID to install military armor
		gMargin: Cost multiplies (100 = no adjustment; <100 = discount; >100 = surcharge)

	-->

	<DockScreen UNID="&dsRepairArmor;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(eq (itmGetArmorInstalledLocation (scrGetItem gScreen)) gArmorSegment)"
			/>

		<Panes>

			<Default
					desc=	"">

				<Initialize>
					(block (type damage desc)
						(setq gArmorSegment (itmGetArmorInstalledLocation (scrGetItem gScreen)))
						(setq type (objGetArmorType gPlayerShip gArmorSegment))
						(setq damage (objGetArmorDamage gPlayerShip gArmorSegment))
						(setq desc (cat "The ship's " (objGetArmorName gPlayerShip gArmorSegment) " " (armGetName type)))
						(setq maxHP (shpGetArmorMaxHitPoints gPlayerShip gArmorSegment))
						(setq gCanRepair True)
						(setq gCost (multiply damage (armGetRepairCost type)))
						(setq gCost (divide (multiply gMargin gCost) 100))
						(switch
							(eq damage 0)
								(block Nil
									(setq desc (cat desc " is not damaged."))
									(setq gCanRepair Nil)
									)
							(gr (armGetRepairTech type) gTechLevel)
								(block Nil
									(setq desc (cat desc " cannot be repaired. The technology required is not available at this station."))
									(setq gCanRepair Nil)
									)
							(ls (subtract maxHP damage) (divide maxHP 4))
								(block Nil
									(setq desc (cat desc " is heavily damaged and cannot be repaired."))
									(setq gCanRepair Nil)
									)
							(ls (plyGetCredits gPlayer) gCost)
								(block Nil
									(setq desc (cat desc " can be repaired for " gCost " credits, which, unfortunately, is more than you can afford."))
									(setq gCanRepair Nil)
									)
							(eq gCost 0)
								(setq desc (cat desc " is damaged and can be repaired free of charge."))

							(setq desc (cat desc " is damaged and will cost " gCost " credits to repair."))
							)
						(scrSetDesc gScreen desc)

						; Disable actions if we cannot repair
						(scrEnableAction gScreen 0 gCanRepair)
						)
				</Initialize>

				<Actions>
					<Action name="Repair" key="R" >
						(if gCanRepair
							(block Nil
								(objRepairArmor gPlayerShip gArmorSegment)
								(plyCharge gPlayer gCost)
								(scrShowPane gScreen "Default")
								)
							)
					</Action>

					<Action name="Replace" key="P" >
						(scrShowScreen gScreen "&dsReplaceArmor;")
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>
			</Default>
		</Panes>
	</DockScreen>

	<!-- Replace armor screen -->

	<DockScreen UNID="&dsReplaceArmor;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			/>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<Initialize>
					(block (thisItem canInstall)
						(setq thisItem (scrGetItem gScreen))
						(setq canInstall True)
						(if thisItem
							(block (desc cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem))
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 100))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip gArmorSegment)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " are too heavy for your ship's hull."))
											(setq canInstall Nil)
											)

									(and gCheckMilitaryID 
											(itmHasModifier thisItem "Military")
											(not (objGetItems gPlayerShip "*+MilitaryID"))
											)
										(block Nil
											(setq desc (cat "You must have a military ID to install " (itmGetName thisItem 0x80) "."))
											(setq canInstall Nil)
											)
											
									(and gCheckMilitaryID
											(itmHasModifier thisItem "Illegal")
											)
										(block Nil
											(setq desc "We do not install illegal armor segments.")
											(setq canInstall Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(setq desc gResult)
											(setq canInstall Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)

									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)

									(gr gCost (plyGetCredits gPlayer))
										(block Nil
											(setq desc (cat "This armor segment can be installed for " gCost " credits. Unfortunately, you cannot afford this cost."))
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc "This armor segment can be installed free of charge.")

									(setq desc (cat "This armor segment can be installed for " gCost " credits."))
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen "You do not have any armor segments in your cargo hold.")
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this armor" default="1" key="I" >
						(block (thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (plyGetCredits gPlayer) gCost))
								(block Nil
									(shpInstallArmor gPlayerShip thisItem gArmorSegment)
									(plyCharge gPlayer gCost)
									(scrShowScreen gScreen "&dsRepairArmor;")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<Navigate screen="&dsRepairArmor;"/>
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Install device screen

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gTechLevel: Tech capability of this station
		gTechModifier: Can install if item has given modifier
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
		gMargin: 100 = same as install cost
	-->

	<DockScreen UNID="&dsInstallDevice;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dUN"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to install.">

				<Initialize>
					(block (thisItem)
						(intInstallDevicePrep (scrGetItem gScreen) Nil True Nil 'gCanInstall 'gCost 'gDesc)
						(scrSetDesc gScreen gDesc)

						; Disable actions
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this device" default="1" key="I">
						(if gCanInstall
							(block Nil
								(shpInstallDevice gPlayerShip (scrGetItem gScreen))
								(plyCharge gPlayer gCost)
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Install a specific device

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gItem: Item to install
		gCost: Cost of installation
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
	-->

	<DockScreen UNID="&dsInstallSpecificDevice;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default>

				<Initialize>
					(block (desc okToInstall)
						(setq gTechLevel 25)
						(setq gTechModifier Nil)
						(intInstallDevicePrep gItem gCost Nil Nil 'gCanInstall 'gCost 'gDesc)
						(scrSetDesc gScreen gDesc)

						; Enable/disable buttons
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this device" default="1" key="I">
						(if gCanInstall
							(block Nil
								; Install the item
								(objAddItem gPlayerShip gItem)
								(shpInstallDevice gPlayerShip gItem)
								(plyCharge gPlayer gCost)
								
								; If we're charging the player more than the cost of
								; the device, then count it as a purchase
								(if (geq gCost (itmGetPrice gItem))
									(plyRecordBuyItem gPlayer gItem (itmGetPrice gItem))
									)

								(setq gResult True)
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(block Nil
							(setq gResult Nil)
							(scrShowScreen gScreen gPrevScreen gPrevPane)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>

	</DockScreen>

	<!-- Install weapon screen

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gTechLevel: Tech level at which device is installed
		gTechModifier: Can install if item has given modifier
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
		gMargin: 100 = same as install cost
	-->

	<DockScreen UNID="&dsInstallWeapon;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"wUN"
			/>

		<Panes>
			<Default
					desc=	"Pick a weapon to install.">

				<Initialize>
					(block (thisItem)
						(intInstallDevicePrep (scrGetItem gScreen) Nil True Nil 'gCanInstall 'gCost 'gDesc)
						(scrSetDesc gScreen gDesc)

						; Disable actions
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Install this weapon" default="1" key="I">
						(if gCanInstall
							(block Nil
								(shpInstallDevice gPlayerShip (scrGetItem gScreen))
								(plyCharge gPlayer gCost)
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Remove device screen -->

	<DockScreen UNID="&dsRemoveDevice;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dI"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to remove.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block Nil
								(setq gResult (shpCanRemoveDevice gPlayerShip thisItem))

								; Half the price of install cost
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 200))

								(switch
									(eq gResult 1)
										(block Nil
											(scrSetDesc gScreen "Your ship has too much cargo to be able to remove the cargo expansion.")
											(setq thisItem Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(scrSetDesc gScreen gResult)
											(setq thisItem Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(scrSetDesc gScreen "The device cannot be removed.")
											(setq thisItem Nil)
											)

									(gr (itmGetMass thisItem) (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(scrSetDesc gScreen "This device cannot be removed because there is no room in your cargo hold to store it.")
											(setq thisItem Nil)
											)

									(ls (plyGetCredits gPlayer) gCost)
										(scrSetDesc gScreen (cat "This device can be removed from your ship for " gCost " credits. Unfortunately, you cannot afford the cost."))

									(eq gCost 0)
										(scrSetDesc gScreen (cat "This device can be removed from your ship free of charge."))

									(scrSetDesc gScreen
										(cat "This device can be removed from your ship for " gCost " credits.")
										)
									)
								)
							(scrSetDesc gScreen "You do not have any devices that can be removed.")
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0
							(and thisItem (geq (plyGetCredits gPlayer) gCost))
							)
						)
				</Initialize>

				<Actions>
					<Action name="Remove this device" default="1" key="R">
						(block (thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (plyGetCredits gPlayer) gCost))
								(block Nil
									(shpRemoveDevice gPlayerShip thisItem)
									(plyCharge gPlayer gCost)
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Remove weapon screen -->

	<DockScreen UNID="&dsRemoveWeapon;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"wI"
			/>

		<Panes>
			<Default
					desc=	"Pick a weapon to remove.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block Nil
								; Half the price of install cost
								(setq gCost (divide (itmGetInstallCost thisItem) 2))

								(switch
									(gr (itmGetMass thisItem) (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(scrSetDesc gScreen "This weapon cannot be removed because there is no room in your cargo hold to store it.")
											(setq thisItem Nil)
											)

									(ls (plyGetCredits gPlayer) gCost)
										(scrSetDesc gScreen (cat "This weapon can be removed from your ship for " gCost " credits. Unfortunately, you cannot afford the cost."))

									(scrSetDesc gScreen (cat "This weapon can be removed from your ship for " gCost " credits."))
									)
								)
							(scrSetDesc gScreen "You do not have any weapons that can be removed.")
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0
							(and thisItem (geq (plyGetCredits gPlayer) gCost))
							)
						)
				</Initialize>

				<Actions>
					<Action name="Remove this weapon" default="1" key="R">
						(block (thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (plyGetCredits gPlayer) gCost))
								(block Nil
									(shpRemoveDevice gPlayerShip thisItem)
									(plyCharge gPlayer gCost)
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Repair Item -->

	<DockScreen UNID="&dsRepairItem;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(scrSetListFilter gScreen gShowCriteria)
		</ListOptions>

		<Panes>
			<Default
					desc=	"You do not have any items that we can repair.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(setq gResult Nil)

						(if thisItem
							(block (desc)
								; Compute the cost to repair the item
								(setq gCost (divide (multiply (itmGetPrice thisItem) gMargin) 100))

								(switch
									(gr gCost (plyGetCredits gPlayer))
										(setq desc (cat "It will cost " gCost " credits to repair " (itmGetName thisItem 0x04) ". Unfortunately, you cannot afford the cost."))

									(block Nil
										(setq desc (cat "We can repair " (itmGetName thisItem 0x04) " for " gCost " credits."))
										(setq gResult True)
										)
									)

								(scrSetDesc gScreen desc)
								)
							)

						(scrEnableAction gScreen 0 gResult)
						)
				</Initialize>

				<Actions>
					<Action name="Repair item" default="1" key="R">
						(block Nil
							(setq gItem (scrGetItem gScreen))
							(shpEnhanceItem gPlayerShip gItem)
							(plyCharge gPlayer gCost)
							(scrShowPane gScreen "Success")
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen)
					</Action>
				</Actions>

			</Default>

			<Success
					noListNavigation="true"
					>
				<Initialize>
					(scrSetDesc gScreen (cat "Your " (itmGetName gItem 0) " has been repaired successfully."))
				</Initialize>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen)
					</Action>
				</Actions>
			</Success>
		</Panes>

	</DockScreen>

	<!-- Mission Screen

		Screen that assigns a mission to the player

		INPUTS

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gMissionTitle: Title to use for screen (or Nil to use station name)
		gMissionListName: Name of static data variable that holds the list
				of missions to assign.
		gMissionNoneText: Text to display if no missions are available
		gMissionAcceptText: Text to display if player accepts the mission
		gMissionDeclineText: Text to display if player declines mission

		OUTPUTS

		gMission: Initialized to the mission picked (or Nil if no valid
				missions).

		This screen also set the following object data variables:

		"Mission" : the actual mission
		"MissionID" : mission ID (item 0 of mission)
		"MissionStatus" : set to "inprogress"

	-->

	<DockScreen UNID="&dsMission;"
			name=				"=(if gMissionTitle gMissionTitle (objGetName gSource))"
			>

		<Panes>
			<Default>
				<Initialize>
					(block (desc missionList)
						; Pick a mission
						(setq missionList (objGetStaticData gSource gMissionListName))
						(if (gr (count missionList) 0)
							(block (time i)
								(setq time (add (divide (unvGetTick) 1500) (objGetDestiny gSource)))

								; Try a few times to find a valid mission
								(setq desc Nil)
								(setq i 0)

								(loop (and (not desc) (ls i 3))
									(block Nil
										(setq gMission (item missionList (modulo (add time i) (count missionList))))

										; Generate mission description
										(setq desc (apply (eval (item gMission 1)) Nil))

										(setq i (add i 1))
										)
									)

								; If we could not generate a mission, then clear out gMission
								(if (not desc)
									(block Nil
										(setq gMission Nil)
										(setq desc gMissionNoneText)
										)
									)
								)

							(block Nil
								(setq gMission Nil)
								(setq desc gMissionNoneText)
								)
							)

						(scrSetDesc gScreen desc)

						; Enable/disable actions
						(scrEnableAction gScreen 0 gMission)
						)
				</Initialize>

				<Actions>
					<Action name="Accept" default="1" key="A">
						(if gMission
							(block (total)
								; remember the mission
								(objSetData gSource "Mission" gMission)
								(objSetData gSource "MissionID" (item gMission 0))
								(objSetData gSource "MissionStatus" "inprogress")
								
								(setq total (objGetGlobalData gSource "missionsAccepted"))
								(objSetGlobalData gSource "missionsAccepted" (if total (add total 1) 1))

								(apply (eval (item gMission 2)) Nil)
								(scrShowPane gScreen "GoodLuck")
								)
							)
					</Action>

					<Action name="Decline" cancel="1" key="D">
						(if gMission
							(scrShowPane gScreen "GetOut")
							(scrShowScreen gScreen gPrevScreen gPrevPane)
							)
					</Action>
				</Actions>
			</Default>

			<GetOut
					desc="=gMissionDeclineText">

				<Actions>
					<Action name="Leave" default="1" cancel="1" key="L">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>
				</Actions>
			</GetOut>

			<GoodLuck
					desc="=gMissionAcceptText">

				<Actions>
					<Action name="Leave" default="1" cancel="1" key="L">
						<Exit/>
					</Action>
				</Actions>
			</GoodLuck>

		</Panes>
	</DockScreen>

	<!-- Jettison

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.

	-->

	<DockScreen UNID="&dsJettison;"
			name=				"Ship's Cargo Hold"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=	"There are no items in your cargo hold that can be jettisoned.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))

						(if thisItem
							(block (fitCount itemMass)
								(setq itemMass (itmGetMass thisItem))
								(setq fitCount (divide (objGetCargoSpaceLeft gSource) itemMass))
								(setq availCount (itmGetCount thisItem))
								(setq gMaxCount (if (gr fitCount availCount) availCount fitCount))

								(setq desc (cat "Unit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (intMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(if (ls (objGetCargoSpaceLeft gSource) 200000)
									(setq desc (cat desc "\nCapacity: " (intMassString (objGetCargoSpaceLeft gSource))))
									)

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "\n\nThere is not enough space here to jettison " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "\n\nThere is enough space to jettison one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "\n\nThere is enough space to jettison only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "\n\nThere is enough space to jettison all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Jettison this item" default="1" key="J" >
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "JettisonQuantity")

							(eq gMaxCount 1)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen 1))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
							)
				</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen)
				</Action>

			</Actions>

		</Default>

			<JettisonQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to jettison?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Jettison" default="1" key="J">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen count))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</JettisonQuantity>
		</Panes>
	</DockScreen>

	<DockScreen UNID="&dsUseDataRom;"
			name=				"Ship's Interior"
			backgroundID=		"none"
			>
		<Display>
			<Text id="text" left="12" right="-12" top="16" bottom="-16">
			</Text>
		</Display>

		<Panes>
			<Default>
				<Initialize>
					(block (theText)
						(setq theText (itmGetData gItem "Text"))
						(if (not theText)
							(setq theText (itmGetStaticData gItem "Text"))
							)

						(if theText
							(block Nil
								(scrSetDisplayText gScreen "text" theText)
								(scrSetDesc gScreen "The ROM contains a document.")
								)
							(block Nil
								(scrSetDisplayText gScreen "text" "")
								(scrSetDesc gScreen "The ROM is blank.")
								)
							)
						)
				</Initialize>

				<Actions>
					<Action name="Done" key="D" default="1" cancel="1">
						<Exit/>
					</Action>
				</Actions>
			</Default>
		</Panes>

	</DockScreen>

	<!-- Commodities Exchange

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gMargin: This is the mark-up as a percentage of the item price.

		gInstallCriteria: Install items that match this criteria.
			If gInstallCriteria is not Nil, then:

			gTechLevel: Tech capability of this station
			gCheckMilitaryID: If True, this screen does not allow installing
					military weapons without an ID
			gInstallMargin: 100 = same as install cost

		-->

	<DockScreen UNID="&dsExchangeBuy;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
				dataFrom=	"station"
				list=		"*"
				>
			(switch
				(not gMargin)
					(scrSetListFilter gScreen intComputeSellPrice)

				(isfunction gMargin)
					(scrSetListFilter gScreen gMargin)

				(scrSetListFilter gScreen "*")
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc fitCount)
								(setq gCost (itmGetPrice thisItem))

								; Compute the cost of this item.

								(switch
									; If gMargin is Nil then we ask the station for the
									; price of this item.

									(not gMargin)
										(setq gCost (objGetSellPrice gSource thisItem))

									; If gMargin is a function, then we call the function
									; to evaluate the price.

									(isfunction gMargin)
										(setq gCost (apply gMargin thisItem Nil))
									)
									
								(if (not gCost) (setq gCost 0))

								(setq availCount (itmGetCount thisItem))

								(if (gr gCost 0)
									(setq affordCount (divide (plyGetCredits gPlayer) gCost))
									(setq affordCount 0)
									)
								(setq gMaxCount (if (gr affordCount availCount) availCount affordCount))

								(setq fitCount (divide (objGetCargoSpaceLeft gPlayerShip) (itmGetMass thisItem)))
								(setq gMaxCount (if (gr gMaxCount fitCount) fitCount gMaxCount))

								; Set the price and description
								(setq desc (cat "Unit price: " (if (eq gCost 0) "N/A" gCost)))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " for " (multiply gCost gMaxCount) ")"))
									)

								(setq desc (cat desc "\nUnit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (intMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat desc "This item is not for sale."))
									(eq affordCount 0)
										(setq desc (cat desc "You do not have enough credits to purchase any."))
									(eq fitCount 0)
										(setq desc (cat desc "Unfortunately, you cannot fit any in your cargo hold."))
									(and (gr availCount affordCount) (gr fitCount affordCount))
										(setq desc (cat desc "You have enough credits to buy " affordCount "."))
									(and (gr availCount fitCount))
										(setq desc (cat desc "You have enough room in your cargo hold to carry " fitCount "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Buy this Item" default="1" key="B">
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "BuyQuantity")
							(if (eq gMaxCount 1)
								(block Nil
									(setq gItem (scrGetItem gScreen))

									; Install?
									(if (intInstallAfterPurchase gItem gInstallCriteria gInstallMargin gCost)
										(scrShowPane gScreen "InstallItem")

										(block Nil
											(intBuyItems 1 gCost)
											(scrShowPane gScreen "Default")
											)
										)
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<BuyQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to purchase at " gCost " credits each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Buy" default="1" key="B">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)

								; Install?
								(if (and (eq count 1)
										(intInstallAfterPurchase (scrGetItem gScreen) gInstallCriteria gInstallMargin gCost)
										)
									(scrShowPane gScreen "InstallItem")

									(block Nil
										(intBuyItems count gCost)
										(scrShowPane gScreen "Default")
										)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</BuyQuantity>

			<InstallItem
					noListNavigation="true"
					>
				<Initialize>
					(block (desc)
						(setq gItem (itmSetCount (scrGetItem gScreen) 1))
						(setq gInstallCost (divide (multiply gInstallMargin (itmGetInstallCost gItem)) 100))
						(intInstallDevicePrep gItem gInstallCost True True 'gCanInstall 'gInstallCost 'gDesc)

						(switch
							(gr (add gCost gInstallCost) (plyGetCredits gPlayer))
								(block Nil
									(setq desc (cat gDesc
										"\n\nUnfortunately, you cannot afford the installation cost. "
										"Do you wish to buy it without installation for " gCost " credits?"
										))
									(setq gCanInstall Nil)
									)

							(setq desc (cat gDesc
								"\n\nDo you wish to buy and install it for " (add gCost gInstallCost) " credits, "
								"or do you wish to only buy it for " gCost " credits?"
								))
							)

						(scrSetDesc gScreen desc)

						; Disable actions
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</Initialize>

				<Actions>
					<Action name="Buy &amp; Install" default="1" key="I">
						(if gCanInstall
							(block Nil
								(intBuyItems 1 (add gCost gInstallCost))
								(shpInstallDevice gPlayerShip gItem)
								(scrShowPane gScreen "InstallSuccess")
								)
							)
					</Action>

					<Action name="Buy only" key="B">
						(block Nil
							(intBuyItems 1 gCost)
							(scrShowPane gScreen "Default")
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallItem>

			<InstallSuccess
					noListNavigation="true"
					>
				<Initialize>
					(block Nil
						(scrSetDesc gScreen
							(cat (itmGetName gItem 0x01) " installed successfully.")
							)
						)
				</Initialize>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrShowPane gScreen "Default")
					</Action>
				</Actions>
			</InstallSuccess>
		</Panes>

	</DockScreen>

	<!-- Commodities Exchange

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gMargin: This is the discount as a percentage of the item price.
		gMaxPrice: Max price that station will pay for any item.
		gTitle: Title for screen (or Nil for station name)

		-->

	<DockScreen UNID="&dsExchangeSell;"
			name=				"=(if gTitle gTitle (objGetName gSource))"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
				dataFrom=	"player"
				list=		"*"
				>
			(switch
				(not gMargin)
					(scrSetListFilter gScreen intComputeBuyPrice)

				(isfunction gMargin)
					(scrSetListFilter gScreen gMargin)

				(scrSetListFilter gScreen "*")	
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<Initialize>
					(block (thisItem)
						(if (not gTitle)
							(setq gTitle (objGetName gSource 0x41))
							)

						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc priceText existingCount averageAppearing)
								(setq gCost (itmGetPrice thisItem))

								; Compute the cost of this item.

								(switch
									; If gMargin is Nil then we ask the station for the
									; price of this item.

									(not gMargin)
										(setq gCost (objGetBuyPrice gSource thisItem))

									; If gMargin is a function, then we call the function
									; to evaluate the price.

									(isfunction gMargin)
										(setq gCost (apply gMargin thisItem Nil))
									)
									
								(if (not gCost) (setq gCost 0))

								(if (not (itmIsKnown thisItem))
									(setq gCost (divide gCost 10))
									)

								; If the station already has lots of these, lower the price
								(setq existingCount (objHasItem gSource thisItem))
								(setq averageCount (itmGetAverageAppearing thisItem))
								(switch
									(not existingCount)
										Nil

									(geq existingCount (multiply averageCount 5))
										(setq gCost 0)

									(geq existingCount (multiply averageCount 4))
										(setq gCost (divide (multiply gCost 25) 100))

									(geq existingCount (multiply averageCount 3))
										(setq gCost (divide (multiply gCost 50) 100))

									(geq existingCount (multiply averageCount 2))
										(setq gCost (divide (multiply gCost 75) 100))
									)

								; Compute how many items are available
								(setq availCount (itmGetCount thisItem))

								; Compute how many items the station is willing to buy
								(if (gr gCost 0)
									(switch
										(not gMaxPrice)
											(block Nil
												(setq affordCount (divide (objGetBalance gSource) gCost))
												(if (gr affordCount availCount)
													(setq affordCount availCount)
													)
												)

										(gr gCost gMaxPrice)
											(setq affordCount 0)

										(setq affordCount availCount)
										)
									)

								(setq gMaxCount affordCount)

								; Set the price and description
								(setq priceText (cat "Unit offer: " (if (eq gCost 0) "N/A" gCost)))
								(if (gr availCount 1)
									(setq priceText (cat priceText " (" availCount " for " (multiply gCost availCount) ")"))
									)

								(setq priceText (cat priceText "\nUnit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr availCount 1)
									(setq priceText (cat priceText " (" availCount " at " (intMassString (multiply (itmGetMass thisItem) availCount)) ")"))
									)

								(setq priceText (cat priceText "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat gTitle " is not interested in buying " (itmGetName thisItem 0x02) "."))
									(eq affordCount 0)
										(setq desc (cat gTitle " cannot afford to buy " (itmGetName thisItem 0x04) "."))
									(eq availCount 1)
										(setq desc (cat priceText gTitle " offers " gCost " credits for your " (itmGetName thisItem 0) "."))
									(eq affordCount 1)
										(setq desc (cat priceText gTitle " offers " gCost " credits for a single " (itmGetName thisItem 0) "."))
									(ls affordCount availCount)
										(setq desc (cat priceText gTitle " offers " gCost " credits for each " (itmGetName thisItem 0) " (up to a maximum of " affordCount ")."))
									(setq desc (cat priceText gTitle " offers " gCost " credits for each " (itmGetName thisItem 0) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (and (gr gCost 0) (gr gMaxCount 0)))
						)
				</Initialize>

				<Actions>
					<Action name="Sell this item" default="1" key="S">
						(if (gr gCost 0)
							(if (gr gMaxCount 1)
								(scrShowPane gScreen "SellQuantity")
								(if (eq gMaxCount 1)
									(block Nil
										(intSellItems 1 gCost)
										(scrShowPane gScreen "Default")
										)
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<SellQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to sell at " gCost " credits each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Sell" default="1" key="S">
						<![CDATA[
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (> count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block Nil
									(intSellItems count gCost)
									(scrShowPane gScreen "Default")
									)
								)
							)
							]]>
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</SellQuantity>
		</Panes>

	</DockScreen>

	<!-- Refuse dock with contaminated ships

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		-->

	<DockScreen UNID="&dsRefuseContamination;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					desc=	"The dockmaster stops you as you disembark: &quot;Hey! Get that contaminated ship off my dock!&quot;">

				<Actions>
					<Action name="Undock" default="1" cancel="1" key="U">
						(scrExitDock gScreen)
					</Action>
				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<!-- Loot 

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.

	-->

	<DockScreen UNID="&dsLoot;"
			name=				"=(objGetName gSource)"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=		"There are no items here.">

				<Initialize>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc itemMass)
								(setq itemMass (itmGetMass thisItem))
								(setq availCount (itmGetCount thisItem))
								(setq affordCount (divide (objGetCargoSpaceLeft gPlayerShip) itemMass))
								(setq gMaxCount (if (gr affordCount availCount) availCount affordCount))

								(setq desc (cat "Unit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (intMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You do not have enough space to carry " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "You have enough room to carry one " (itmGetName thisItem 0) "."))
									(gr availCount affordCount)
										(setq desc (cat desc "You have enough room to carry only " affordCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "You have enough room to carry all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Loot this item" key="L" default="1" >
						<![CDATA[
						(if (> gMaxCount 1)
							(scrShowPane gScreen "LootQuantity")
							(if (eq gMaxCount 1)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
							]]>
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen)
					</Action>

				</Actions>

			</Default>

			<LootQuantity
					showCounter=	"true">

				<Initialize>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to loot?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</Initialize>

				<Actions>
					<Action name="Loot" default="1" key="L">
						<![CDATA[
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (> count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
							]]>
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</LootQuantity>
		</Panes>

	</DockScreen>

	<!-- NavBeacon -->

	<DockScreen UNID="&dsNavBeacon;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					desc=	"You are docked at a navigational beacon. These automated stations are used as traffic control centers and navigational aids.">

				<Actions>
					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- NavSign -->

	<DockScreen UNID="&dsNavSign;"
			name=				"Information"
			>

		<Panes>
			<Default>

				<Initialize>
					(block (info)
						(setq info (objGetData gSource "info"))
						(if (not info)
							(setq info "You are docked at an information sign. These automated stations are used as advertising and information signs throughout the Commonwealth.")
							)

						(scrSetDesc gScreen info)
						)
				</Initialize>

				<Actions>
					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Abandoned NavSign -->

	<DockScreen UNID="&dsAbandonedNavSign;"
			name=				"Information"
			>

		<Panes>
			<Default desc="You are docked at a destroyed information sign.">
				<Actions>
					<Action name="Undock" cancel="1" key="U">
						<Exit/>
					</Action>

				</Actions>

			</Default>
		</Panes>

	</DockScreen>

	<!-- Refuel

		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane to
				navigate to when done.
		gCost: This is the cost of one fuel rod
		gItem: Fuel item to refuel with

		-->

	<DockScreen UNID="&dsRefuel;"
			name=				"=(objGetName gSource)"
			>

		<Panes>
			<Default
					showCounter=	"true">

				<Initialize>
					(block (maxAfford)
						(setq gMaxCount (shpGetFuelNeeded gPlayerShip gItem))
						(if (gr gCost 0)
							(setq maxAfford (divide (plyGetCredits gPlayer) gCost))
							)
						(switch
							(not (shpIsFuelCompatible gPlayerShip gItem))
								(block Nil
									(setq gMaxCount 0)
									(scrSetDesc gScreen (cat "This refueling facility uses " (itmGetName gItem 2) ", which are not compatible with your ship's reactor."))
									)

							(eq gCost 0)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "Your ship is does not need any fuel.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Your ship needs one " (itmGetName gItem 0) " to refuel. We can refuel you free of charge."))
									(scrSetDesc gScreen (cat "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. We can refuel you free of charge. How many do you wish to use?"))
									)

							(geq maxAfford gMaxCount)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "Your ship is does not need any fuel.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Your ship needs one " (itmGetName gItem 0) " to refuel for a total cost of " gCost " credits."))
									(scrSetDesc gScreen (cat "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. Each " (itmGetName gItem 0) " costs " gCost " credits (" (multiply gCost gMaxCount) " credits total). How many do you wish to buy?"))
									)

							(block Nil
								(setq gMaxCount maxAfford)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "You cannot afford to refuel your ship.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Each " (itmGetName gItem 0) " costs " gCost " credits. You can only afford a single one."))
									(scrSetDesc gScreen (cat "Each " (itmGetName gItem 0) " costs " gCost " credits. You can only afford " gMaxCount " " (itmGetName gItem 2) ". How many do you wish to buy?"))
									)
								)
							)
						(scrSetCounter gScreen gMaxCount)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</Initialize>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToUse)
									(setq itemsToUse (itmCreate (itmGetType gItem) count))
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(plyCharge gPlayer (multiply count gCost))
									(plyRecordBuyItem gPlayer itemsToUse (multiply count gCost))
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>
		</Panes>
	</DockScreen>

	<DockScreen unid="&dsNeurohackHelp;"
			name=			"=(objGetName gSource)"
			backgroundID=	"none"
			>
			
		<Display>
			<Canvas left="10" top="0" right="-10" bottom="-1">
				(block Nil
					(cnvDrawImage 120   0 (list &rsNeurohackControls;   0   0 70 70))
					(cnvDrawImage 120  70 (list &rsNeurohackControls; 140   0 70 70))
					(cnvDrawText 155 140 "Neural damage steady" 'Large '(255 255 255) 'center)
					(cnvDrawText 155 160 "(10 or less\x97acceptable level)" 'Large '(255 255 255) 'center)
					
					(cnvDrawImage 400   0 (list &rsNeurohackControls;   0  70 70 70))
					(cnvDrawImage 400  70 (list &rsNeurohackControls; 140  70 70 70))
					(cnvDrawText 435 140 "Neural damage steady" 'Large '(255 255 255) 'center)
					(cnvDrawText 435 160 "(greater than 10\x97unacceptable)" 'Large '(255 255 255) 'center)
					
					(cnvDrawImage 120 270 (list &rsNeurohackControls; 140  70 70 70))
					(cnvDrawText 155 340 "Neural damage decreasing" 'Large '(255 255 255) 'center)
					(cnvDrawText 155 360 "(increase viral load)" 'Large '(255 255 255) 'center)
					
					(cnvDrawImage 400 200 (list &rsNeurohackControls;   0  70 70 70))
					(cnvDrawText 435 340 "Neural damage increasing" 'Large '(255 255 255) 'center)
					(cnvDrawText 435 360 "(decrease viral load)" 'Large '(255 255 255) 'center)
					)
			</Canvas>
		</Display>
		
		<Panes>
			<Default>
				<Initialize>
					(scrSetDesc gScreen
						"Increase viral load to cause neural damage and break down the AI's resistance.\n\n"
						"You will succeed if resistance is 0 and neural damage is 10 or less.\n\n"
						"You will fail if resistance is 0 and neural damage is greater than 10 or if you run out of virus."
						)
				</Initialize>
				
				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrShowScreen gScreen &dsNeurohack;)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

	<DockScreen unid="&dsNeurohack;"
			name=			"=(objGetName gSource)"
			backgroundID=	"none"
			>
			
		<Display>
			<Initialize>
				(if (not gNeurohackResult)
					(block Nil
						; Update sim
						(setq gNeurohackG (divide (subtract gNeurohackWillpower gNeurohackWillpowerMax) gNeurohackPotential))
						(setq gNeurohackWillpower (max 0 (subtract gNeurohackWillpower gNeurohackDamage)))
						(setq gNeurohackDamage (add gNeurohackDamage gNeurohackG gNeurohackViralLoad))
						(setq gNeurohackVirusLeft (max 0 (subtract gNeurohackVirusLeft gNeurohackViralLoad)))
						
						(if (gr gNeurohackWillpower gNeurohackWillpowerMax)
							(block Nil
								(setq gNeurohackWillpower gNeurohackWillpowerMax)
								(setq gNeurohackDamage 0)
								)
							)
						
						; Check end conditions
						(switch
							(and (leq gNeurohackWillpower 0) (leq gNeurohackDamage 10))
								(block Nil
									(setq gNeurohackResult 'success)
									(scrShowPane gScreen "Success")
									)
							
							(leq gNeurohackWillpower 0)
								(block Nil
									(setq gNeurohackResult 'failDamaged)
									(scrShowPane gScreen "Failure")
									)
									
							(leq gNeurohackVirusLeft 0)
								(block Nil
									(setq gNeurohackResult 'failVirusExpended)
									(setq gNeurohackViralLoad 0)
									(scrShowPane gScreen "Failure")
									)
							)
						)
					)
			</Initialize>
			
			<Neurohack left="36" right="-36" top="30" bottom="-30">
				(list gNeurohackWillpower gNeurohackDamage)
			</Neurohack>
			
			<Canvas left="36" right="-36" top="100" bottom="-100">
				(switch
					(not gNeurohackResult)
						(block (frameWidth)
							(setq frameWidth 528)
							
							; Draw the willpower bar
							
							(if (leq gNeurohackWillpower 2000)
								(block (barX barWidth theColor theAccColor)
									(setq barWidth (divide (multiply frameWidth gNeurohackWillpower) 2000))
									(setq barX (divide (subtract frameWidth barWidth) 2))
									
									(switch
										(leq gNeurohackDamage 10)
											(setq theColor 0)
											
										(setq theColor 70)
										)

									(cnvDrawImage (subtract barX 70) 65 (list &rsNeurohackControls; 210 theColor 70 70))
									(cnvDrawImage (add barX barWidth) 65 (list &rsNeurohackControls; 70 theColor 70 70))
									)
								)
							
							; Draw the acceleration signals

							(if (not (eq gNeurohackDamage 0))
								(block (controlX)
									(setq controlX (divide (subtract frameWidth 70) 2))
									
									(if (and (eq (abs gNeurohackG) gNeurohackViralLoad) (leq gNeurohackDamage 10))
										(setq theAccColor 0)
										(setq theAccColor 70)
										)
									
									(if (geq (abs gNeurohackG) gNeurohackViralLoad)
										(cnvDrawImage controlX 100 (list &rsNeurohackControls; 140 theAccColor 70 70))
										)
										
									(if (leq (abs gNeurohackG) gNeurohackViralLoad)
										(cnvDrawImage controlX 30 (list &rsNeurohackControls; 0 theAccColor 70 70))
										)
									)
								)
							)

					(eq gNeurohackResult 'success)
						(block Nil
							(cnvDrawRect 0 60 528 80 '(74 71 95))
							(cnvDrawText 264 80 "Neurohack Successful!" 'SubTitleBold '(54 176 72) 'center)
							)
						
					(eq gNeurohackResult 'failDamaged)
						(block Nil
							(cnvDrawRect 0 60 528 80 '(74 71 95))
							(cnvDrawText 264 80 "Connection Destroyed" 'SubTitleBold '(204 54 30) 'center)
							)
						
					(eq gNeurohackResult 'failVirusExpended)
						(block Nil
							(cnvDrawRect 0 60 528 80 '(74 71 95))
							(cnvDrawText 264 80 "Virus Depleted" 'SubTitleBold '(204 54 30) 'center)
							)
					)
			</Canvas>
			
			<Image left="6" right="-6" top="0" bottom="400" transparent="true">
				(resCreateImageDesc &rsNeurohackFrame; 0 0 588 400)
			</Image>

			<Text left="198" top="4" width="90" font="HeaderBold" color="255,255,255" align="right">
				gNeurohackWillpower
			</Text>
			
			<Text left="312" top="4" width="90" font="HeaderBold" color="255,255,255" align="left">
				(if (geq gNeurohackDamage 0) gNeurohackDamage "Repairing")
			</Text>
			
			<Text left="312" top="370" width="90" font="HeaderBold" color="255,255,255" align="left">
				gNeurohackViralLoad
			</Text>

			<Text left="198" top="370" width="90" font="HeaderBold" color="255,255,255" align="right">
				gNeurohackVirusLeft
			</Text>
		</Display>
		
		<Panes>
			<Default>
				<Initialize>
					(block Nil
						(scrSetDesc gScreen
							"Increase viral load to cause neural damage and break down the AI's resistance.\n\n"
							"You will succeed if resistance is 0 and neural damage is 10 or less.\n\n"
							"You will fail if resistance is 0 and neural damage is greater than 10 or if you run out of virus."
							)
						)
				</Initialize>
			
				<Actions>
					<Action name="Increase virus" prevKey="1" key="I">
						(setq gNeurohackViralLoad (add gNeurohackViralLoad 1))
					</Action>
					
					<Action name="Decrease virus" nextKey="1" key="D">
						(if (gr gNeurohackViralLoad 0)
							(setq gNeurohackViralLoad (subtract gNeurohackViralLoad 1))
							)
					</Action>
					
					<Action name="Help" key="H">
						(scrShowScreen gScreen &dsNeurohackHelp;)
					</Action>
					
					<Action name="Disconnect" cancel="1" key="n">
						(block Nil
							(setq gNeurohackResult 'failDisconnect)
							(scrShowScreen gScreen gPrevScreen)
							)
					</Action>
				</Actions>
			</Default>
			
			<Success>
				<Initialize>
					(scrSetDesc gScreen 
						"The AI has been subdued!")
						)
				</Initialize>
				
				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen)
					</Action>
				</Actions>
			</Success>

			<Failure>
				<Initialize>
					(block Nil
						(switch
							(eq gNeurohackResult 'failDamaged)
								(scrSetDesc gScreen 
									"Neural damage was too high. The connection port has been destroyed."
									)
									
							(eq gNeurohackResult 'failVirusExpended)
								(scrSetDesc gScreen
									"No more cyber-virus available for this connection port."
									)
							)
							
						; If this was our last attempt, then we're done
						(scrEnableAction gScreen 0 (geq (neuGetCharges) 1))
						)
				</Initialize>
				
				<Actions>
					<Action name="Try again" default="1" key="T">
						(block Nil
							(setq gNeurohackWillpower gNeurohackWillpowerMax)
							(setq gNeurohackDamage 0)
							(setq gNeurohackViralLoad 0)
							(setq gNeurohackVirusLeft gNeurohackVirusMax)
							(setq gNeurohackResult Nil)
							
							(neuConsumeCharge)
							(scrShowPane gScreen "Default")
							)
					</Action>
					
					<Action name="Disconnect" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen)
					</Action>
				</Actions>
			</Failure>
		</Panes>
	</DockScreen>

<!-- EFFECT TYPES ========================================================= -->

	<Effect UNID="&efFragmentationExplosion;"
			sound="&snArmorHit1;">
		<Image imageID="&rsMediumExplosions;" 
				imageX="0" 
				imageY="0" 
				imageWidth="64" 
				imageHeight="64"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efFusionExplosion1;"
			sound="&snArmorHit1;">
		<Image imageID="&rsExplosionsAG256;" 
				imageX="0" 
				imageY="0" 
				imageWidth="256" 
				imageHeight="256"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efLargeExplosion1;">
		<Image imageID="&rsLargeExplosions;" 
				imageX="0" 
				imageY="0" 
				imageWidth="128" 
				imageHeight="128"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efMediumExplosion1;">
		<Image imageID="&rsMediumExplosions;" 
				imageX="0" 
				imageY="0" 
				imageWidth="64" 
				imageHeight="64"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efShieldHit1;"
			sound="&snShieldHit1;"
			>
		<Image imageID="&rsShieldHit;" 
				imageX="0" 
				imageY="0" 
				imageWidth="32" 
				imageHeight="32"
				imageFrameCount="12"
				imageTicksPerFrame="1"/>
	</Effect>

	<Effect UNID="&efSmallExplosion1;"
			sound="&snArmorHit1;"
			>
		<Image imageID="&rsMediumHit;" 
				imageX="0" 
				imageY="0" 
				imageWidth="32" 
				imageHeight="32"
				imageFrameCount="12"
				imageTicksPerFrame="1"/>
	</Effect>

	<Effect UNID="&efStargateIn;"
			sound="&snStargate;"
			>
		<Image imageID="&rsLargeExplosions;" 
				imageX="0" 
				imageY="128" 
				imageWidth="128" 
				imageHeight="128"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efStargateOut;"
			sound="&snStargate;"
			>
		<Image imageID="&rsLargeExplosions;" 
				imageX="0" 
				imageY="128" 
				imageWidth="128" 
				imageHeight="128"
				imageFrameCount="16"
				imageTicksPerFrame="2"/>
	</Effect>

	<Effect UNID="&efBattleArenaWallHit;">
		<Image imageID="&rsShieldHit;" 
				imageX="0" 
				imageY="0" 
				imageWidth="32" 
				imageHeight="32"
				imageFrameCount="12"
				imageTicksPerFrame="1"/>
	</Effect>

	<Effect UNID="&efStationExplosion;">
		<Image imageID="&rsMediumHit;" 
				imageX="0" 
				imageY="0" 
				imageWidth="32" 
				imageHeight="32"
				imageFrameCount="12"
				imageTicksPerFrame="1"/>
	</Effect>

	<Effect UNID="&efMediumCannonFlash;">
		<Polyflash/>
	</Effect>

	<Effect UNID="&efNebula;">
		<Image imageID="&rsNebula;" 
				imageX="0" 
				imageY="0" 
				imageWidth="256" 
				imageHeight="256"
				imageVariants="4"/>
	</Effect>

	<Effect UNID="&efGemOfSacrifice;">
		<Starburst
				lifetime=		"40"
				spikeCount=		"1d6+2"
				spikeLength=	"4d80"
				primaryColor=	"0xde, 0xb7, 0xff"
				secondaryColor=	"0x89, 0x00, 0xff"
				/>
	</Effect>

<!-- GLOBALS ============================================================== -->

	<Globals>
		(block Nil
			; Define various internal functions
			
			(setq intAmmoBoxOpen (lambda (theContents)
				(block Nil
					(objAddItem gSource theContents)
					(objSendMessage gSource Nil (cat "The box contained " (itmGetName theContents 8)))

					; Identify the box
					(itmSetKnown gItem)

					; Remove box
					(objRemoveItem gSource gItem 1)
					)
				))

			(setq intArmorEnhanceStatus (lambda (result)
				(switch
					(eq result 0)
						""

					(eq result 1)
						" But it has no effect on your armor."

					(eq result 2)
						" But your armor is already enhanced."

					(eq result 3)
						" Your armor has weakened further."

					(eq result 4)
						" It seems to have restored your armor."

					(eq result 5)
						" Your armor has lost its enhancement."

					(eq result 6)
						" Unfortunately, your armor has lost its previous enhancement."

					(eq result 7)
						" Your armor has been further enhanced."

					""
					)
				))

			(setq intArmorRepairAll (lambda (theShip repairTech alwaysRepair)
				(block (repaired noDamage tooMuchDamage noTech)
					(setq repaired Nil)
					(setq noDamage True)
					(setq tooMuchDamage Nil)
					(setq noTech Nil)
					(objEnumItems theShip "aI" theItem
						(block (armorSeg type damage maxHP)
							(setq armorSeg (itmGetArmorInstalledLocation theItem))
							(setq type (objGetArmorType theShip armorSeg))
							(setq damage (objGetArmorDamage theShip armorSeg))
							(if (gr damage 0) (setq noDamage Nil))
							(setq maxHP (shpGetArmorMaxHitPoints theShip armorSeg))

							(switch
								; No need to repair if no damage
								(eq damage 0)
									Nil

								; If armor needs higher tech to repair, we can't do anything
								(gr (armGetRepairTech type) repairTech)
									(setq noTech True)

								; Can't repair if damage is too much
								(and (not alwaysRepair) 
										(ls (subtract maxHP damage) (divide maxHP 4)))
									(setq tooMuchDamage True)

								; Repair
								(block Nil
									(objRepairArmor theShip armorSeg)
									(setq repaired True)
									)
								)
							)
						)

					(switch
						repaired
							"repaired"

						noDamage
							"noDamage"

						noTech
							"noTech"

						tooMuchDamage
							"tooMuchDamage"

						"noRepair"
						)
					)
				))

			(setq intAutoInstall (lambda (theSource theItem)
				(if (itmIsInstalled theItem)

					; Uninstall item
					(block Nil
						(switch
							(gr (itmGetMass theItem) (objGetCargoSpaceLeft theSource))
								(objSendMessage theSource Nil "No room in cargo hold to uninstall")

							(block Nil
								(shpRemoveDevice theSource theItem)
								(objSendMessage theSource Nil (cat (itmGetName theItem 1) " uninstalled"))
								)
							)
						)

					; Install item
					(block (result)
						(setq result (shpCanInstallDevice theSource theItem))

						(switch
							(eq result 0)
								(block Nil
									(shpInstallDevice theSource theItem)
									(objSendMessage theSource Nil (cat (itmGetName theItem 1) " installed"))
									)

							(eq result 2)
								(objSendMessage theSource Nil "Ship cannot support another device")

							(eq result 6)
								(objSendMessage theSource Nil "Ship already has a missile launcher")

							(eq result 7)
								(objSendMessage theSource Nil "Reactor upgrade required")

							(objSendMessage theSource Nil (cat (itmGetName theItem 1) " cannot be installed"))
							)
						)
					)
				))

			(setq intBarricadeUse (lambda (barricadeClass)
				(block (barricade newOrientation lastPos)

					; Figure out the new position for the barricade
					(setq newOrientation (typGetGlobalData &stBarricade1; "lastOrientation"))

					(setq lastPos (sysVectorPolarOffset gPlayerShip 0 0))
					(if (gr (sysVectorDistance lastPos (typGetGlobalData &stBarricade1; "lastPos")) 0)
						(block Nil
							(setq newOrientation Nil)
							(typSetGlobalData &stBarricade1; "lastPos" lastPos)
							)
						)

					(switch
						(not newOrientation)
							(setq newOrientation 1)

						(setq newOrientation (modulo (add newOrientation 3) 4))
						)
					(typSetGlobalData &stBarricade1; "lastOrientation" newOrientation)

					; Create a barricade
					(setq barricade (sysCreateStation barricadeClass (sysVectorPolarOffset gPlayerShip (multiply newOrientation 90) 2)))

					; Set the image
					(switch
						(eq newOrientation 0)
							(staSetImageVariant barricade 1)

						(eq newOrientation 1)
							(staSetImageVariant barricade 0)

						(eq newOrientation 2)
							(staSetImageVariant barricade 3)

						(eq newOrientation 3)
							(staSetImageVariant barricade 2)
						)

					; If the item is damaged, then the barricade is damaged
					(if (itmIsDamaged gItem)
						(staSetStructuralHP barricade (divide (staGetStructuralHP barricade) 2))
						)

					; Use up the item
					(objRemoveItem gSource gItem 1)
					)
				))

			(setq intBuyItems (lambda (itemCount itemCost)
				(block (itemsToBuy)
					(setq itemsToBuy (scrRemoveItem gScreen itemCount))
					(objAddItem gPlayerShip itemsToBuy)
					(plyCharge gPlayer (multiply itemCount itemCost))
					(plyRecordBuyItem gPlayer itemsToBuy (multiply itemCount itemCost))

					; Add to station balance
					(objCredit gSource (multiply itemCount itemCost))

					; If the player bought items at a black market station then
					; increase xp
					(if (and
							(objHasAttribute gSource "blackmarket")
							(itmHasModifier itemsToBuy "Illegal")
							)
						(objIncData gPlayerShip "blackMarketXP" (divide (multiply itemCount itemCost) 100))
						)
					)
				))

			(setq intCalcExplosionType (lambda (theObj)
				(block (totalExplosivePower)

					; Compute the explosive power of the items based on level and mass
					(setq totalExplosivePower 0)

					(objEnumItems theObj "*" theItem
						(block Nil
							(switch
								(or (itmMatches theItem "mf") (itmMatches theItem "* +Explosive;"))
									(block (level)
										; Missiles count for +1 level
										(setq level (itmGetLevel theItem))
										(if (or (itmMatches theItem "m") (itmHasAttribute theItem "Explosive"))
											(setq level (add level 1))
											)

										; Explosive power = level^2 * sqrt(mass-in-tons)
										; We compute mass in 10,000th of a tons and divide later (we divide by sqrt(10,000) or 100)

										(setq totalExplosivePower
											(add totalExplosivePower (multiply (power level 2) (sqrt (multiply 10 (itmGetMass theItem) (itmGetCount theItem)))))
											)
										)
								)
							)
						)

					; Convert to tons and tweak
					(setq totalExplosivePower (divide totalExplosivePower 100))
					(setq totalExplosivePower (divide (multiply 150 totalExplosivePower) 100))

					; Convert to explosion type
					(switch
						(geq totalExplosivePower 2750)
							&vtPlasmaExplosion2;

						(geq totalExplosivePower 2200)
							&vtPlasmaExplosion1;

						(geq totalExplosivePower 1730)
							&vtThermoExplosion4;

						(geq totalExplosivePower 1330)
							&vtThermoExplosion3;

						(geq totalExplosivePower 1000)
							&vtThermoExplosion2;

						(geq totalExplosivePower 730)
							&vtThermoExplosion1;

						(geq totalExplosivePower 510)
							&vtBlastExplosion4;

						(geq totalExplosivePower 345)
							&vtBlastExplosion3;

						(geq totalExplosivePower 215)
							&vtBlastExplosion2;

						(geq totalExplosivePower 125)
							&vtBlastExplosion1;

						(geq totalExplosivePower 65)
							&vtKineticExplosion4;

						(geq totalExplosivePower 25)
							&vtKineticExplosion3;

						(geq totalExplosivePower 10)
							&vtKineticExplosion2;

						(geq totalExplosivePower 5)
							&vtKineticExplosion1;

						Nil
						)
					)
				))
				
			(setq intComputeBuyPrice (lambda (thisItem)
				(objGetBuyPrice gSource thisItem)
				))

			(setq intComputeSellPrice (lambda (thisItem)
				(objGetSellPrice gSource thisItem)
				))

			(setq intComputeRandomEncounterPos (lambda (theTarget)
				(block (playerCourse)

					; Compute the player's current course
					(setq playerCourse (sysVectorAngle (objGetVel theTarget)))

					; Create a random position that is in front of the player
					; and not near anything
					(sysVectorRandom theTarget
						(lambda Nil
							(sysVectorPolarOffset 
								Nil 
								(modulo (add playerCourse 360 (random -80 80)) 360)
								120
								)
							)
						10
						"sTA"
						)
					)
				))

			(setq intComputeRandomEncounterCourse (lambda (theObj theTarget)
				(block (interceptPos)
				
					; Interception point is wherever the player will be in 100 ticks
					(setq interceptPos 
						(sysVectorPolarOffset theTarget (sysVectorAngle (objGetVel theTarget))
							(sysCalcTravelDistance (objGetVel theTarget) 100)
							)
						)

					; Compute course
					(sysVectorAngle (sysVectorSubtract interceptPos (objGetPos theObj)))
					)
				))

			(setq intComputeRandomEncounterPosEx (lambda ()
				(block (playerCourse startPos interceptPos encounterCourse ttime)
				
					; Compute the player's current course
					(setq playerCourse (sysVectorAngle (objGetVel gPlayerShip)))
					
					; Create a random position that is in front of the player
					; and not near anything
					(setq startPos (sysVectorRandom gPlayerShip
						(lambda Nil
							(sysVectorPolarOffset 
								Nil 
								(modulo (add playerCourse 360 (random -80 80)) 360)
								120
								)
							)
						10
						"sTA"
						))
						
					; Interception point is wherever the player will be in 100 ticks
					(setq interceptPos 
						(sysVectorPolarOffset gPlayerShip playerCourse 
							(sysCalcTravelDistance (objGetVel gPlayerShip) 100)
							)
						)
					
					; Compute course
					(setq encounterCourse (sysVectorAngle (sysVectorSubtract interceptPos startPos)))
					
					
					; Return start pos, course, and intercept pos
					(list startPos encounterCourse interceptPos)
					)
				))

			(setq intContainerOnDamage (lambda (theObj damageHP)
				(if (gr damageHP 0)
					(block (items)
						; Count the amount of explosive items on board
						(setq items (append (objGetItems theObj "mf") (objGetItems theObj "* +Explosive")))
						(if items
							(block (theChance totalExplosives maxHP damageAdj)

								; Add up the total mass of all explosive items. Items that are
								; "volatile" count much more
								(setq totalExplosives 0)
								(enum items theItem
									(setq totalExplosives 
										(add totalExplosives 
											(multiply 
												(if (itmHasAttribute theItem "Volatile") 5 1) 
												(itmGetCount theItem) 
												(itmGetMass theItem)
												)
											)
										)
									)

								; Convert to tons/10
								(setq totalExplosives (max 1 (divide totalExplosives 100)))

								; Compute the how powerful the damage is; 100 = enough to destroy all HP
								(setq maxHP (staGetMaxStructuralHP theObj))
								(if (gr maxHP 0)
									(setq damageAdj (max 1 (divide (multiply 100 damageHP) maxHP)))
									(block Nil
										(setq damageAdj 1)
										(setq maxHP 1)
										)
									)

								; Probability of explosion is proportional to the ratio explosives to structural hp
								(setq theChance (divide (multiply (min 25 damageAdj) 9 totalExplosives) (add maxHP 50)))

								;(dbgOutput "maxHP = " maxHP)
								;(dbgOutput "damageAdj = " damageAdj)
								;(dbgOutput "totalExplosives = " totalExplosives)
								;(dbgOutput "chance = " theChance)

								; If the explosives blow up, convert the damage to a very high number so that
								; the container is destroyed
								(if (leq (random 1 100) theChance)
									(block Nil
										; Set data so that we know that we exploded
										(objSetData theObj "DestroyedByExplosion" True)

										; Very high damage
										1000000
										)
									damageHP
									)
								)
							damageHP
							)
						)
					)
				))

			(setq intContainerGetExplosionType (lambda (theObj)
				(switch
					; If we were not destroyed by an internal explosion, then none is necessary
					(not (objGetData theObj "DestroyedByExplosion"))
						Nil

					; If the player planted the explosives, then return the appropriate damage cause.
					; Returning "playerCreatedExplosion" means that the damage will be blamed on the player
					; when calling (objGetOrderGiver)

					(objGetData theObj "PlayerExplosives")
						(list (intCalcExplosionType theObj) 0 'playerCreatedExplosion)

					; Otherwise, this is an internal explosion (return the UNID of the explosion)
					(intCalcExplosionType theObj)
					)
				))

			(setq intDestroyItems (lambda (theObj)
				(block (allItems remainingItems)
					(setq allItems (objGetItems theObj "*U"))

					; Generate a list of the items that are left
					(setq remainingItems Nil)
					(enum allItems theItem
						(block (damagedItemCount undamgedItemCount)
							(setq undamagedItemCount 0)
							(setq damagedItemCount 0)
							(switch
								; 70% of devices and armor are destroyed
								; 20% are damaged
								; 10% are OK
								(itmMatches theItem "ad")
									(block (tenth tenthMod)
										(setq tenth (divide (itmGetCount theItem) 10))
										(setq tenthMod (modulo (itmGetCount theItem) 10))

										(setq undamagedItemCount (add undamagedItemCount tenth (if (leq (random 1 10) tenthMod) 1 0)))
										(setq damagedItemCount (add damagedItemCount tenth (if (leq (random 1 10) tenthMod) 1 0) tenth (if (leq (random 1 10) tenthMod) 1 0)))
										)

								; 70% of other items are destroyed
								(block Nil
									(setq undamagedItemCount (divide (multiply 70 (itmGetCount theItem)) 100))
									)
								)

							; Add to our list
							(if (gr damagedItemCount 0)
								(setq remainingItems (append remainingItems (list (itmSetCount (itmSetDamaged theItem) damagedItemCount))))
								)

							(if (gr undamagedItemCount 0)
								(setq remainingItems (append remainingItems (list (itmSetCount theItem undamagedItemCount))))
								)

							; Remove from object
							(objRemoveItem theObj theItem)
							)
						)

					; Add back remaining items
					(enum remainingItems theItem
						(objAddItem theObj theItem)
						)
					)
				))

			(setq intGetGateToSystem (lambda (theSource destSystem)
				(block (gateID gateObj)

					; Figure out which gate in the system leads to dest
					(setq gateID (item (filter (sysGetStargates (sysGetNode)) theGate (intIsGateToSystem (sysGetNode) theGate destSystem Nil)) 0))

					; Return gate object
					(if (and gateID (setq gateObj (sysFindObject theSource (cat "NG:" gateID))))
						gateObj
						
						; If not found, return the nearest gate
						(sysFindObject theSource "NG")
						)
					)
				))
				  
			(setq intGetGlobalAchievements (lambda ()
				(block (theList 
						resurrectCount
						bestShipsDestroyed enemyShipsDestroyed 
						totalGMProfit totalArmsProfit totalEquipProfit totalMedsProfit totalLuxProfit totalIllegalProfit
						systemData neverBacktracked
						slavesFreed slaveSales
						neverReachedBA neverReachedStK neverReachedJiangs neverReachedPointJuno neverReachedHeretic)
				
					; Game stats
					(setq resurrectCount (plyGetStat gPlayer "resurrectCount"))
				
					; Combat stats
					(setq bestShipsDestroyed (plyGetStat gPlayer "bestEnemyShipsDestroyed"))
					(setq enemyShipsDestroyed (plyGetStat gPlayer "enemyShipsDestroyed"))
					
					; Commerce stats
					(setq totalGMProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "*~fudam -Fuel; -Illegal; -Lux; -Meds;")
						(plyGetItemStat gPlayer "itemsBoughtValue" "*~fudam -Fuel; -Illegal; -Lux; -Meds;"))
						)
					(setq totalArmsProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "wsam")
						(plyGetItemStat gPlayer "itemsBoughtValue" "wsam"))
						)
					(setq totalEquipProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "fud~ws")
						(plyGetItemStat gPlayer "itemsBoughtValue" "fud~ws"))
						)
					(setq totalMedsProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "*~wsam +Meds")
						(plyGetItemStat gPlayer "itemsBoughtValue" "*~wsam +Meds"))
						)
					(setq totalLuxProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "*~wsam +Lux")
						(plyGetItemStat gPlayer "itemsBoughtValue" "*~wsam +Lux"))
						)
					(setq totalIllegalProfit (subtract (plyGetItemStat gPlayer "itemsSoldValue" "*~wsam +Illegal")
						(plyGetItemStat gPlayer "itemsBoughtValue" "*~wsam +Illegal"))
						)
						
					; Conducts
					(setq systemData (plyGetStat gPlayer "systemData"))
					(setq neverBacktracked (not (filter systemData theData (not (eq (item theData 1) (item theData 2))))))
					
					; Exploration
					(setq neverReachedBA (not (find systemData "BA" 0)))
					(setq neverReachedStK (not (find systemData "SK" 0)))
					(setq neverReachedJiangs (not (find systemData "C9" 0)))
					(setq neverReachedPointJuno (not (find systemData "PJ" 0)))
					(setq neverReachedHeretic (not (find systemData "G2" 0)))
					
					; Misc
					(setq slavesFreed (objGetData gPlayerShip "slavesFreed"))
					(setq slaveSales (objGetData gPlayerShip "slaveSales"))
					
					; First add all the stats that are unconditional
					(setq theList (list
					
						; Resurrect
						(list (if (gr resurrectCount 0) "Game resurrections" "Honored permadeath")
							(if (gr resurrectCount 0) resurrectCount Nil)
							"conducts"
							)
						
						; Systems visited
						(list "Systems visited" (plyGetStat gPlayer "systemsVisited") "exploration")
						
						))
					
					; Next add all stats that are conditional (are not always added)
					(setq theList (append theList 
					
						; Never backtracked
						(if neverBacktracked
							(list (list "Never backtracked" Nil "conducts"))
							)
							
						; Exploration
						(if	neverReachedBA
							(list (list "Never reached Rigel Aurelius" Nil "exploration" "Z001"))
							)
						(if	neverReachedStK
							(list (list "Never reached St. Katharine's Star" Nil "exploration" "Z002"))
							)
						(if	neverReachedJiangs
							(list (list "Never reached Jiang's Star" Nil "exploration" "Z003"))
							)
						(if	neverReachedPointJuno
							(list (list "Never reached Point Juno" Nil "exploration" "Z004"))
							)
						(if	neverReachedHeretic
							(list (list "Never reached Heretic" Nil "exploration" "Z005"))
							)
						
						(list (list "Never reached the Galactic Core" Nil "exploration" "Z006"))
					
						; Enemy ships destroyed
						(if (gr enemyShipsDestroyed 0)
							(list (list "Enemy ships destroyed" enemyShipsDestroyed "combat"))
							)
						
						; Best enemy ship destroyed
						(if (gr (item bestShipsDestroyed 1) 0)
							(list (list "Most powerful ship destroyed" (cat (typGetDataField (item bestShipsDestroyed 0) "name") " (" (item bestShipsDestroyed 1) ")") "combat"))
							)
							
						; Total goods profit
						(if (gr totalGMProfit 0)
							(list (list "Profit on goods and materials" totalGMProfit "commerce"))
							)
						(if (gr totalArmsProfit 0)
							(list (list "Profit on arms" totalArmsProfit "commerce"))
							)
						(if (gr totalMedsProfit 0)
							(list (list "Profit on medical supplies" totalMedsProfit "commerce"))
							)
						(if (gr totalLuxProfit 0)
							(list (list "Profit on luxury goods" totalLuxProfit "commerce"))
							)
						(if (gr totalIllegalProfit 0)
							(list (list "Profit on illegal items" totalIllegalProfit "commerce"))
							)
						(if (gr totalEquipProfit 0)
							(list (list "Profit on ship's equipment" totalEquipProfit "commerce"))
							)
							
						; Slave sales
						(if slaveSales
							(list (list "Profit on slave sales" slaveSales "commerce"))
							)
							
						; Slaves freed
						(if slavesFreed
							(list (list "Slaves freed" slavesFreed "missions &amp; activities"))
							)
						))
						
					theList
					)
				))

			(setq intItemEnhanceStatus (lambda (result successText itemName)
				(switch
					(eq result 0)
						successText

					(eq result 1)
						"The enhancement has no effect"

					(eq result 2)
						(cat (strCapitalize itemName) " is already enhanced")

					(eq result 3)
						(cat (strCapitalize itemName) " has weakened further")

					(eq result 4)
						(cat (strCapitalize itemName) " has been repaired")

					(eq result 5)
						(cat (strCapitalize itemName) " has lost its enhancement")

					(eq result 6)
						(cat successText " (previous enhancement lost)")

					(eq result 7)
						(cat (strCapitalize itemName) " has been further enhanced")

					""
					)
				))
				
			(setq intIsGateToSystem (lambda (nodeID gateID destSystem nodesChecked)
				(block (destNode)
					(setq destNode (sysGetStargateDestinationNode nodeID gateID))
					(if (eq destNode destSystem)
						True

						(block (stargates)
							(setq nodesChecked (append nodesChecked (list nodeID)))
							(setq stargates (filter (sysGetStargates destNode) theGate
								(not (find nodesChecked (sysGetStargateDestinationNode destNode theGate)))
								))

							(if stargates
								(filter stargates theGate (intIsGateToSystem destNode theGate destSystem nodesChecked))
								Nil
								)
							)
						)
					)
				))
				
			(setq intJettisonItem (lambda (theObj theItem)
				(block Nil
					(objAddItem theObj theItem)

					; If the player jettisoned explosive items, then mark the object
					(if (or (itmMatches theItem "mf") (itmMatches theItem "* +explosive;"))
						(objSetData theObj "PlayerExplosives" True)
						)
					)
				))

			(setq intLootAllItems (lambda (theSource theDest criteria)
				(block (lootedItems)
					(setq lootedItems (objGetItems theSource criteria))
					(enum lootedItems theItem
						(block (itemMass fitCount)
							(setq itemMass (itmGetMass theItem))
							(setq fitCount (divide (objGetCargoSpaceLeft theDest) itemMass))
							(if (gr fitCount (itmGetCount theItem))
								(setq fitCount (itmGetCount theItem))
								)
							(if (gr fitCount 0)
								(block Nil
									(objRemoveItem theSource theItem fitCount)
									(objAddItem theDest theItem fitCount)
									)
								)
							)
						)
					)
				))

			(setq intMassString (lambda (mass)
				(block Nil
					(switch
						(eq mass 1)
							"1 Kg"

						(ls mass 1000)
							(cat mass " Kg")

						(block (tons remainder)
							(setq tons (divide mass 1000))
							(setq remainder (divide (add (subtract mass (multiply tons 1000)) 50) 100))
							(if (eq remainder 10)
								(block Nil
									(setq tons (add tons 1))
									(setq remainder 0)
									)
								)
							(cat tons "." remainder " tons")
							)
						)
					)
				))
				
			(setq intMissionAchievementString (lambda (missionsCompleted missionsFailed)
				(if (eq (int missionsFailed) 0)
					(int missionsCompleted)
					(cat missionsCompleted " (" missionsFailed " failed)")
					)
				))
				
			(setq intSellItems (lambda (itemCount itemCost)
				(block (itemsToSell)
					(setq itemsToSell (scrRemoveItem gScreen itemCount))
					(objAddItem gSource itemsToSell)
					(plyCredit gPlayer (multiply itemCount itemCost))
					(plyRecordSellItem gPlayer itemsToSell (multiply itemCount itemCost))

					; Remove from station balance
					(objCharge gSource (multiply itemCount itemCost))

					; If the player just sold slaves, then keep track
					(if (itmHasModifier itemsToSell "Slaves")
						(block Nil
							(setq sales (objGetData gPlayerShip "slaveSales"))
							(if (not sales)
								(setq sales 0)
								)

							(setq sales (add sales (multiply itemCount itemCost)))
							(objSetData gPlayerShip "slaveSales" sales)

							(if (ls (random 1 50) itemCount)
								(intCommonwealthCrime 2 "slave-trading")
								)
							)
						)
					)
				))

			(setq intSetCompatibleFuel (lambda (fuelList)
				(block (fuelFound)
					(setq fuelFound Nil)
					(enumwhile fuelList (not fuelFound) theFuel
						(block Nil
							(setq gItem (itmCreate (item theFuel 0) 1))
							(setq gCost (item theFuel 1))
							(if (shpIsFuelCompatible gPlayerShip gItem)
								(setq fuelFound True)
								)
							)
						)

					fuelFound
					)
				))

			(setq intRandomMessage (lambda (source staticVar altVar)
				(block (msgList)
					(setq msgList (objGetStaticData source staticVar))
					(if	(not msgList)
						(setq msgList (objGetStaticData source altVar))
						)
					(seededRandom (add (divide (unvGetTick) 1901) (objGetDestiny source)) msgList)
					)
				))

			(setq intRoundDown (lambda (value multiple)
				(multiply (divide value multiple) multiple)
				))

			(setq intRoundUp (lambda (value multiple)
				(multiply (divide (add value (subtract multiple 1)) multiple) multiple)
				))

			(setq intInstallAfterPurchase (lambda (theItem theInstallCriteria theInstallMargin itemCost)
				(block Nil
					(if (and theInstallCriteria (itmMatches theItem theInstallCriteria))
						(block (installCost)
							(setq installCost (divide (multiply theInstallMargin (itmGetInstallCost theItem)) 100))
							(intInstallDevicePrep theItem installCost True True 'gCanInstall2 'gCost2 'gDesc2)
							)
						(setq gCanInstall2 Nil)
						)

					gCanInstall2
					)
				))

			(setq intInstallDevicePrep (lambda (thisItem costToInstall isItemInCargo buyAndInstall varCanInstall varCost varDesc)

			; gTechLevel: The max tech level that we will install
			; gTechModifier: If not Nil, only install if item has this modified
			; gCheckMilitaryID: If True, check to make sure player has military ID
			; gMargin: 100 = same as install cost (only if costToInstall is Nil)

				(block (totalCost canInstall desc theResult itemName)
					(setq itemName (itmGetName thisItem (if buyAndInstall 0x40 0x04)))
					(setq canInstall Nil)

					(if thisItem
						(block (cargoNeeded replaceCriteria)
							; Compute the cost to install
							(if costToInstall
								(setq totalCost costToInstall)
								(setq totalCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 100))
								)

							(setq theResult (shpCanInstallDevice gPlayerShip thisItem))
							(setq replaceCriteria Nil)

							(switch
								; If we don't have the technology, we cannot install
								; (except for specific items that we know about)
								(and (gr (itmGetLevel thisItem) gTechLevel)
										(or (not gTechModifier)
											(not (itmHasModifier thisItem gTechModifier)))
										)
									(setq desc (cat "We do not have the technology to install " itemName " on your ship."))

								(and gCheckMilitaryID 
										(itmHasModifier thisItem "Military")
										(not (objGetItems gPlayerShip "*+MilitaryID"))
										)
									(setq desc (cat "You must have a military ID to use " itemName "."))
									
								(and gCheckMilitaryID
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc "We do not install illegal items.")

								(eq theResult 2)
									(setq desc "Your ship cannot support any more devices.")

								(eq theResult 4)
									(block Nil
										(setq desc (cat "We can remove your shield generator and install " itemName))
										(setq replaceCriteria "sI")
										(setq canInstall True)
										)

								(eq theResult 5)
									(block Nil
										(setq desc (cat "We can remove your propulsion system and install " itemName))
										(setq replaceCriteria "vI")
										(setq canInstall True)
										)

								(eq theResult 6)
									(block Nil
										(setq desc (cat "We can remove your missile launcher and install " itemName))
										(setq replaceCriteria "lI")
										(setq canInstall True)
										)

								(eq theResult 7)
									(setq desc "Your ship's reactor is not powerful enough for this device.")

								(eq theResult 8)
									(setq desc "You already have a cargo expansion system installed.")

								(eq theResult 9)
									(block Nil
										(setq desc (cat "We can remove your reactor upgrade and install " itemName))
										(setq replaceCriteria "rI")
										(setq canInstall True)
										)

								(eq theResult 10)
									(setq desc "The cargo expansion system is too large to be installed in your ship.")

								(eq theResult 11)
									(setq desc (cat "The power output of " itemName " is too high for your ship."))

								(eq theResult 12)
									(setq desc "Your ship cannot support any more weapons.")

								(eq theResult 13)
									(setq desc "Your ship cannot support any more non-weapon devices.")

								(not (isint theResult))
									(setq desc theResult)

								(not (eq theResult 0))
									(setq desc "This device cannot be installed.")

								(block Nil
									(setq desc (cat "We can install " itemName " on your ship"))
									(setq canInstall True)
									)
								)

							; If we need to remove a device, then it will cost more

							(setq cargoNeeded 0)
							(if (and canInstall replaceCriteria)
								(objEnumItems gPlayerShip replaceCriteria itemToRemove
									(block Nil
										(if (not costToInstall)
											(setq totalCost 
												(add totalCost 
													(divide (multiply gMargin (itmGetInstallCost itemToRemove)) 200)
													)
												)
											)

										; See how much cargo space we need to store the old item

										(setq cargoNeeded (itmGetMass itemToRemove))
										(if isItemInCargo
											(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
											)
										)
									)
								)

							; See if the item fits

							(if canInstall
								(if (gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
									(block Nil
										(setq desc (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
										(setq canInstall Nil)
										)
									)
								)

							; See if we can afford the installation

							(if canInstall
								(if (gr totalCost 0)
									(if (gr totalCost (plyGetCredits gPlayer))
										(block Nil
											(setq desc (cat desc " for " totalCost " credits. Unfortunately, you cannot afford the cost."))
											(setq canInstall Nil)
											)
										(setq desc (cat desc " for " (if buyAndInstall "an additional " "") totalCost " credits."))
										)
									(setq desc (cat desc " at no charge."))
									)
								)
							)
						(setq desc "You do not have any devices that can be installed.")
						)

					; Return variables
					(set varCanInstall canInstall)
					(set varCost totalCost)
					(set varDesc desc)
					)
				))
				
			(setq intTranslate (lambda (theObj theMessage)
				(block (done theResult)
					(enumwhile (objGetStaticData theObj "Language") (not done) theEntry
						(if (eq (item theEntry 0) theMessage)
							(block Nil
								(setq theResult (item theEntry 1))
								(setq done True)
								)
							)
						)
						
					(if theResult
						(eval theResult)
						(cat "[" theMessage " not found]")
						)
					)
				))
				
			(setq neuConsumeCharge (lambda ()
				(block (done)
					(setq done Nil)
					(enum (objGetItems gPlayerShip "* +NeurohackROM;") theItem
						(switch
							done
								Nil
								
							(eq (itmGetCharges theItem) 0)
								(objRemoveItem gPlayerShip theItem)
								
							(eq (itmGetCharges theItem) 1)
								(block Nil
									(objRemoveItem gPlayerShip theItem 1)
									(setq done True)
									)
								
							(block Nil
								(objIncItemCharges gPlayerShip theItem -1)
								(setq done True)
								)
							)
						)
					)
				))

			(setq neuGetCharges (lambda ()
				(block (theCharges)
					(setq theCharges 0)
					(enum (objGetItems gPlayerShip "* +NeurohackROM;") theItem
						(setq theCharges (add theCharges (itmGetCharges theItem)))
						)
						
					theCharges
					)
				))
				
			(setq srvFindRepairArmor (lambda (theSource maxDist minLevel)
				(block (theServiceEntry)
					(random
						(filter (sysFindObject theSource (cat "sTAFN:" maxDist)) theObj
							(and
								(setq theServiceEntry (lookup (objGetStaticData theObj "NPCService") 'repairArmor 0))
								(geq (item theServiceEntry 1) minLevel)
								)
							)
						)
					)
				))
				
			(setq strNumber (lambda (theValue)
				(switch
					(ls theValue 0)
						theValue

					(leq theValue 20)
						(item 
							'("zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten"
								"eleven" "twelve" "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen" "twenty")
							theValue
							)

					(leq theValue 30)
						(cat "twenty-" (strNumber (subtract theValue 20)))

					theValue
					)
				))
			)
	</Globals>

<!-- RESOURCES ================================================================

	NOTE: For images that have a 1-bit mask, we specify the backColor attribute
	to apply the mask to the in-memory image. This saves us from having to carry
	around the mask. Images that use an 8-bit mask should not use this technique

	Naming conventions

	A		Animation (default 16 frames)
	A{n}	Animation of n frames (e.g., "A20")
	B{n}	Bitmap (black = trans) of size n x n (e.g., "B32")
	D		Directional (default 20 frames)
	D{n}	Directional with n directions (e.g., "D40")
	G{n}	Alpha blended image of size n x n (e.g., "G128")

-->

	<Images folder="Resources">
		<Image UNID="&rsWeapons8DB32;"		bitmap="Weapons-8-DB32.jpg"		bitmask="Weapons-8-DB32Mask.bmp"	backColor="0x00000000"/>
		<Image UNID="&rsWeapons9DB32;"		bitmap="Weapons-9-DB32.jpg"		bitmask="Weapons-9-DB32Mask.bmp"	backColor="0x00000000"/>

		<Image UNID="&rsSmallShips1;"	bitmap="SmallShips1.jpg"	bitmask="SmallShips1Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsMediumShips1;"	bitmap="MediumShips1.jpg"	bitmask="MediumShips1Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsMediumShips2;"	bitmap="MediumShips2.jpg"	bitmask="MediumShips2Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsMediumShips3;"	bitmap="MediumShips3.jpg"	bitmask="MediumShips3Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsMediumShips4;"	bitmap="MediumShips4.jpg"	bitmask="MediumShips4Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsLargeShips1;"	bitmap="LargeShips1.jpg"	bitmask="LargeShips1Mask.bmp" backColor="0x00000000"/>
		<Image UNID="&rsLargeShips2;"	bitmap="LargeShips2.jpg"	bitmask="LargeShips2Mask.bmp" backColor="0x00000000"/>

		<Image UNID="&rsExplosionsAG48;"	bitmap="Explosions-AG48.jpg"	bitmask="Explosions-AG48Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosionsAG96;"	bitmap="Explosions-AG96.jpg"	bitmask="Explosions-AG96Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosionsAG128;"	bitmap="Explosions-AG128.jpg"	bitmask="Explosions-AG128Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosion2AG128;"	bitmap="Explosion-2-AG128.jpg"	bitmask="Explosion-2-AG128Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosion3AG128;"	bitmap="Explosion-3-AG128.jpg"	bitmask="Explosion-3-AG128Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosionsA20G192;"	bitmap="Explosions-A20G192.jpg"	bitmask="Explosions-A20G192Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosion2A20G192;"	bitmap="Explosion-2-A20G192.jpg"	bitmask="Explosion-2-A20G192Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosionsAG256;"	bitmap="Explosions-AG256.jpg"	bitmask="Explosions-AG256Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsExplosionsA20G256;"	bitmap="Explosions-A20G256.jpg"	bitmask="Explosions-A20G256Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsLargeExplosions;" bitmap="LargeExplosions.jpg" bitmask="LargeExplosionsMask.bmp" loadOnUse="true"/>
		<Image UNID="&rsMediumExplosions;" bitmap="MediumExplosions.jpg" bitmask="MediumExplosionsMask.bmp"/>
		<Image UNID="&rsMediumHit;"		bitmap="MediumHit.jpg"		bitmask="MediumHitMask.bmp"/>
		<Image UNID="&rsShieldHit;"		bitmap="ShieldHit.jpg"		bitmask="ShieldHitMask.bmp"/>
		<Image UNID="&rsMediumDamage;"	bitmap="MediumDamage.jpg"	bitmask="MediumDamageMask.bmp"/>
		<Image UNID="&rsLargeDamage;"	bitmap="LargeDamage.jpg"	bitmask="LargeDamageMask.bmp"/>

		<Image UNID="&rsMissiles;"		bitmap="Missiles.jpg"		bitmask="MissilesMask.bmp"	backColor="0x00000000"/>
		<Image UNID="&rsMissiles2;"		bitmap="Missiles2.jpg"		bitmask="Missiles2Mask.bmp" />
		<Image UNID="&rsMissiles3;"		bitmap="Missiles3.jpg"		bitmask="Missiles3Mask.bmp" />
		<Image UNID="&rsMissiles4;"		bitmap="Missiles4.jpg"		bitmask="Missiles4Mask.bmp" />
		<Image UNID="&rsMissiles6;"		bitmap="Missiles6.jpg"		bitmask="Missiles6Mask.bmp" backColor="0x00000000"/>

		<Image UNID="&rsBarricades;"	bitmap="Barricades.jpg"		bitmask="BarricadesMask.bmp" backColor="0x00000000"/>

		<Image UNID="&rsDriveExhaust;"	bitmap="DriveExhaust.jpg"	bitmask="DriveExhaustMask.bmp"/>
		<Image UNID="&rsDebris1;"		bitmap="Debris1.bmp"		backColor="0x00000000"/>
		<Image UNID="&rsShockwave1;"	bitmap="Shockwave1.jpg"		bitmask="Shockwave1Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsShockwave2;"	bitmap="Shockwave2.jpg"		bitmask="Shockwave2Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsShockwave3;"	bitmap="Shockwave3.jpg"		bitmask="Shockwave3Mask.bmp" loadOnUse="true"/>
		<Image UNID="&rsDriveExhaust2;"	bitmap="DriveExhaust2.jpg"	bitmask="DriveExhaust2Mask.bmp"/>

		<Image UNID="&rsItems1;"		bitmap="Items1.jpg"			bitmask="Items1Mask.bmp"	backColor="0x00000000"/>

		<Image UNID="&rsNebulaEnv;"		bitmap="Nebula.jpg"			bitmask="NebulaMask.bmp"	backColor="0x00000000" sprite="true"/>
		<Image UNID="&rsNebula;"		bitmap="NebulaHighlights.jpg"	bitmask="NebulaHighlightsMask.bmp"/>
	</Images>

	<Sounds folder="Resources">
		<Sound UNID="&snLaserCannon;"			filename="LaserFire1.wav"/>
		<Sound UNID="&snRecoillessCannon;"		filename="CannonFire1.wav"/>
		<Sound UNID="&snArmorHit1;"				filename="ArmorHit1.wav"/>
		<Sound UNID="&snShipExplosion1;"		filename="ShipExplosion1.wav"/>
		<Sound UNID="&snStationExplosion1;"		filename="StationExplosion1.wav"/>
		<Sound UNID="&snShieldHit1;"			filename="ShieldHit1.wav"/>
		<Sound UNID="&snMissileLauncher;"		filename="MissileLaunch1.wav"/>
		<Sound UNID="&snStargate;"				filename="Stargate.wav"/>
	</Sounds>

<!-- ITEM TABLES ==============================================================

	Item Table Attributes

	<RandomItem>

	categories:
			*	all categories
			a	armor
			d	device (weapon, shield, drive, etc.)
			f	fuel
			l	launcher weapon only
			m	missile
			r	reactor
			s	shields
			t	miscellaneous
			u	useful (armor coating, ROM, etc.)
			v	drive
			w	weapon (including launchers)
			I	is installed
			D	is damaged
			N	is not damaged
			S	is useable
			U	is not installed

	modifiers:
			+	must have this modifier
			-	must not have this modifier

-->

	<ItemTable UNID="&trConsumables1;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal; -Military"
				level=				"1"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables2;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal; -Military"
				level=				"2"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables3;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal; -Military"
				level=				"3"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables4;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal; -Military"
				level=				"4"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables5;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal; -Military"
				level=				"5"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables6;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal;"
				level=				"6"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables7;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal;"
				level=				"7"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables8;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal;"
				level=				"8"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables9;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal;"
				level=				"9"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trConsumables10;">
		<RandomItem
				criteria=			"fmut +Consumable; -Illegal;"
				level=				"10"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem1;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"1"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem2;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"2"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem3;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"3"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem4;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"4"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem5;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"5"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem6;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal; -Military"
				level=				"6"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem7;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal;"
				level=				"7"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem8;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal;"
				level=				"8"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem9;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal;"
				level=				"9"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMajorItem10;">
		<RandomItem
				criteria=			"wsd +MajorItem; -Illegal;"
				level=				"10"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem1;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal; -Military"
				level=				"1"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem2;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal; -Military"
				level=				"2"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem3;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal; -Military"
				level=				"3"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem4;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal; -Military"
				level=				"4"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem5;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal; -Military"
				level=				"5"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem6;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal;"
				level=				"6"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem7;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal;"
				level=				"7"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem8;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal;"
				level=				"8"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem9;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal;"
				level=				"9"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMinorItem10;">
		<RandomItem
				criteria=			"afmut +MinorItem; -Illegal;"
				level=				"10"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trStationSupplies;">
		<Table>
			<Item chance="15" count="1d6"	item="&itHelium3FuelRod;" />
			<Item chance="25" count="1d8"	item="&itFrozenSupplies;" />
			<Item chance="20" count="1d8"	item="&itHydrocarbons;" />
			<Item chance="30" count="1d12"	item="&itWaterIce;" />
			<Item chance="10" count="1d6"	item="&itMedicalSupplies;" />
		</Table>
	</ItemTable>

	<!-- LEVEL I-II -->

	<ItemTable UNID="&trUsefulItems1;">
		<Table>
			<RandomItem chance="50"
					criteria=		"fmu -Illegal; -Military; -Alien"
					level=			"1"
					levelCurve=		"2"
					/>
			<RandomItem chance="50"
					criteria=		"fmu -Illegal; -Military; -Alien"
					level=			"2"
					levelCurve=		"2"
					/>
		</Table>
	</ItemTable>

	<ItemTable UNID="&trMiscItems1;">
		<Table>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"1"
					levelCurve=		"2"
					/>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"2"
					levelCurve=		"2"
					/>
		</Table>
	</ItemTable>

	<!-- LEVEL III-IV -->

	<ItemTable UNID="&trMiscItems2;">
		<Table>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"3"
					levelCurve=		"2"
					/>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"4"
					levelCurve=		"2"
					/>
		</Table>
	</ItemTable>

	<ItemTable UNID="&trUsefulItems2;">
		<Table>
			<RandomItem chance="50"
					criteria=		"fmu -Illegal; -Military; -Alien"
					level=			"3"
					levelCurve=		"2"
					/>
			<RandomItem chance="50"
					criteria=		"fmu -Illegal; -Military; -Alien"
					level=			"4"
					levelCurve=		"2"
					/>
		</Table>
	</ItemTable>

	<!-- LEVEL V-VI -->

	<ItemTable UNID="&trMiscItems3;">
		<Table>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"5"
					levelCurve=		"2"
					/>
			<RandomItem chance="50"
					criteria=		"t -Illegal; -Military; -Alien"
					level=			"6"
					levelCurve=		"2"
					/>
		</Table>
	</ItemTable>

	<ItemTable UNID="&trHaloGems;">
		<RandomItem 
				criteria=			"* +HaloGem;"
				level=				"7"
				levelCurve=			"1"
				/>
	</ItemTable>

	<!-- Cargo Container Items -->

	<ItemTable UNID="&trCargoContainer;">
		<Table>
			<Item chance="10" count="6d6"	item="&itHelium3FuelRod;" />
			<Item chance="10" count="3d6"	item="&itSiliconArmorPatch;" />
			<Item chance="5" count="3d6"	item="&itOrganicAcid;" />
			<Item chance="10" count="3d12"	item="&itTitaniumOre;" />
			<Item chance="10" count="2d12"	item="&itDuralloyOre;" />
			<Item chance="10" count="3d12"	item="&itHydrocarbons;" />
			<Item chance="10" count="1d12"	item="&itPteracniumOre;" />
			<Group chance="5">
				<Item count="3d6"	item="&itKM100Missile;" />
				<Item count="2d6"	item="&itKM500Missile;" />
			</Group>
			<Group chance="15">
				<Lookup count="1d4" table="&trMiscItems1;"/>
				<Lookup count="1" table="&trUsefulItems1;"/>
			</Group>
			<Lookup chance="10" count="1d6" table="&trMiscItems1;"/>
			<Lookup chance="5" count="1d6" table="&trMiscItems2;"/>
		</Table>
	</ItemTable>

	<!-- Illegal items -->

	<ItemTable UNID="&trIllegalItems1;">
		<RandomItem
				criteria=			"* +Illegal"
				level=				"1"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trIllegalItems2;">
		<RandomItem
				criteria=			"* +Illegal"
				level=				"2"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trIllegalItems3;">
		<RandomItem
				criteria=			"* +Illegal"
				level=				"3"
				levelCurve=			"2"
				/>
	</ItemTable>

	<!-- Military items -->

	<ItemTable UNID="&trMilitaryItem4;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"4"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem5;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"5"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem6;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"6"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem7;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"7"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem8;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"8"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem9;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"9"
				levelCurve=			"2"
				/>
	</ItemTable>

	<ItemTable UNID="&trMilitaryItem10;">
		<RandomItem	
				criteria=			"* +Military"	
				level=				"10"
				levelCurve=			"2"
				/>
	</ItemTable>

	<!-- Miscellaneous -->

	<ItemTable UNID="&trMedicalItem;">
		<RandomItem
				criteria=			"* +Meds"
				level=				"5"
				levelCurve=			"4"
				/>
	</ItemTable>

<!-- ITEM TYPES ===============================================================

	MODIFIERS

	Alien						Item is not found in Human Space
	AntiMatter					Item is involved in AntiMatter industry
	Auton						Item is an auton
	BlackMarketID				This is a black market ID
	Bushido						Item is sold by Bushido corp
	Food						Item is human food or drink
	Fuel						Item is starship fuel
	HaloGem						Item is a halo gem
	ID							Item is an ID
	Illegal						Item is illegal in Human Space
	Info						Item consists of digital information
	Lux							Item is human luxury good
	Makayev						Item is sold by Makayev corp
	Meds						Item is human medicine
	Military					Item is restricted to military in Human Space
	MilitaryID					Item is a military ID
	Missile						Item is ammo or missile
	Nuclear						Item is involved in nuclear industry
	Rasiermesser				Item is sold by Rasiermesser corp
	Res							Item is a resource needed for industry
	RingerValuable				Item is used by Ringers
	Soul						Item contains (possibly dormant) intelligence of HIG III or above
	Specialty					Item is not a commodity; for sale only in specific stations
	ZeroPoint					Item is used in Zero-point energy industry

	Consumable					Item is consumable (missiles/ammo/treasure)
	MajorItem					Device/Shield/Weapon
	MinorItem					Armor/Enhancements

	DAMAGE TYPES

	laser
	kinetic
	particle
	blast
	ion
	thermo
	positron
	plasma
	antimatter
	nano
	graviton
	singularity
	dark acid
	dark steel
	dark lightning
	dark fire

	USE KEYS

	5							Luminous 5scare
	A							autons
	C							gem of contrition
	F							gem of sacrifice
	J							transpace jumpdrive
	L							superconducting coils
	S							Scramble1.4

	COMMON USE PHRASES

	Ship already has a(n) xyz
	xyz installed
	xyz uninstalled
	Ship cannot support xyz
	xyz required
	xyz: blah blah
	Not enough fuel to xyz

-->

	<!-- Unknown Items -->

	<ItemType UNID="&itUnknownAlienDevice;"
			name=				"unknown alien device"
			virtual=			"true"
			level=				"7"
			value=				"100000"

			description=		"This is an alien device of unknown origin. It has been recently altered to interface with a starship's systems, but its function and purpose are unknown."

			modifiers=			"unknown"
			>

		<Names>arcane alien device; beryllium alien device; crystalline alien device; 
			diamond alien device; ebenous alien device; fuligin alien device;
			glaucous alien device; heamatic alien device; inchoate alien device;
			jecoral alien device; keratinous alien device; ligulate alien device;
			micro-engraved alien device; nettled alien device; obsidian alien device;
			pteracnium alien device; quinary alien device; refulgent alien device;
			sulcate alien device; tungsten alien device; ultraviolet alien device;
			vectored alien device; whorled alien device; xanthic alien device;
			yttrium alien device; zoetic alien device
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownAlienDevice10;"
			name=				"unknown alien device"
			virtual=			"true"
			level=				"10"
			value=				"400000"

			description=		"This is an alien device of unknown origin. It has been recently altered to interface with a starship's systems, but its function and purpose are unknown."

			modifiers=			"unknown"
			>

		<Names>aurous alien device; brachiated alien device; cacogenous alien device;
			dendrolic alien device; effulgent alien device; farraginous alien device;
			graunching alien device; hyperborean alien device; incarnadine alien device;
			jade-colored alien device; ketonic alien device; lenticular alien device;
			megatherial alien device; neoteric alien device; obvolute alien device;
			plangent alien device; quadrilateral alien device; rutilant alien device;
			saprogenic alien device; tessellated alien device; unguinous alien device;
			vermicular alien device; writhen alien device; xoric alien device;
			yortonic alien device; zemotic alien device
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownEnhancer2;"
			name=				"unknown device"
			virtual=			"true"
			level=				"2"
			value=				"1000"

			description=		"This is a starship device of some kind. Unfortunately, its exact properties cannot be determined."

			modifiers=			"unknown"
			>

		<Names>device(s) labeled "Asgard Systems"; bolted device(s);
			device(s) labeled "Cenobite Labs"; dimorphous device(s); device(s) labeled "Eschaton Labs";
			ferrous-cased device(s); device(s) labeled "Gigaton Labs"; hermetically-sealed device(s);
			device(s) labeled "I88"; jury-rigged device(s); device(s) labeled "K2"; laser-etched device(s); 
			device(s) labeled "Monster Labs"; nitrogen-cooled device(s); device(s) labeled "Oxygen Only!";
			platinum-cased device(s); device(s) labeled "Q"; rhomboid-shaped device(s);
			device(s) labeled "Singer-Kent Labs"; titanium-cased device(s); device(s) labeled "Unit 7";
			vented device(s); device(s) labeled "Wurlington Labs"
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownEnhancer5;"
			name=				"unknown device"
			virtual=			"true"
			level=				"5"
			value=				"10000"

			description=		"This is a starship device of some kind. Unfortunately, its exact properties cannot be determined."

			modifiers=			"unknown"
			>

		<Names>aluminum-cased device(s); device(s) labeled "Baryon 175"; corrugated device(s); device(s) labeled "Danger!"; 
			electrostatic device(s); device(s) labeled "F151"; glass-enclosed device(s); device(s) labeled "Hadron 55";
			indigo-colored device(s); device(s) labeled "J20"; device(s) labeled "Lab Use Only"; metal-cased device(s);
			device(s) labeled "N404"; octagon-shaped device(s); device(s) labeled "Pendragon Labs"; device(s) labeled "Rental Unit";
			steel-cased device(s); device(s) labeled "T101"; ultra-thin device(s); device(s) labeled "V2"; water-cooled device(s);
			device(s) labeled "X2"
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownEnhancer8;"
			name=				"unknown device"
			virtual=			"true"
			level=				"8"
			value=				"60000"

			description=		"This is a starship device of some kind. Unfortunately, its exact properties cannot be determined."

			modifiers=			"unknown"
			>

		<Names>device(s) labeled "Antares"; borium-cased device(s); crenellated device(s); device(s) labeled "Dalek1";
			enamel-cased device(s); device(s) labeled "Failed"; device(s) labeled "Gremlin"; helical-shaped device(s);
			iridium-cased device(s); device(s) labeled "Jan-09"; device(s) labeled "XKCD"; lanthanide-cased device(s);
			mirror-cased device(s); device(s) labeled "No. 3"; oxygen-cooled device(s); pentagon-shaped device(s);
			device(s) labeled "Questal"; rust-colored device(s); device(s) labeled "SAFE"; sodium-cooled device(s);
			tetrahedron-shaped device(s); device(s) labeled "U235"; wire-wrapped device(s)
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownID;"
			name=				"unmarked identification chip"
			virtual=			"true"
			value=				"200"
			level=				"1"
			modifiers=			"unknown"

			description=		"These etched holographic chips are impossible to duplicate and often used for currency or identification."
			>

	</ItemType>

	<ItemType UNID="&itUnknownMnemonicCube;"
			name=				"mnemonic cube(s)"
			virtual=			"true"
			level=				"5"
			value=				"1500"
			modifiers=			"unknown"

			description=		"These quantum-optical storage systems contain sophisticated programs and data. The programs require a quantum CPU to execute."
			>

		<Names>mnemonic cube(s) labeled "137";
			mnemonic cube(s) labeled "Anthrax1.1";	mnemonic cube(s) labeled "Betamux";
			mnemonic cube(s) labeled "cancer man"; mnemonic cube(s) labeled "d1.0/7";
			mnemonic cube(s) labeled "Epsilon System Software"; mnemonic cube(s) labeled "Fahrenheit";
			mnemonic cube(s) labeled "pwd: gmx10492"; mnemonic cube(s) labeled "halocline exeter";
			mnemonic cube(s) labeled "increment0"; mnemonic cube(s) labeled "Jasmine3";
			mnemonic cube(s) labeled "KandyKlown2.1"; mnemonic cube(s) labeled "corrupted";
			mnemonic cube(s) labeled "&#xa9;2416 Heisenmachines, rce";
			mnemonic cube(s) labeled "nethack/VR 5.0"; mnemonic cube(s) labeled "O2";
			mnemonic cube(s) labeled "Carmen Owlglass"; mnemonic cube(s) labeled "quantum compression 10-1";
			mnemonic cube(s) labeled "Lotus Notes R9"; mnemonic cube(s) labeled "SatanSurfer0.4";
			mnemonic cube(s) with no label
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownHaloGem;"
			name=				"halo gem"
			virtual=			"true"
			level=				"8"
			value=				"1000"
			modifiers=			"unknown"

			description=		"The Halo Races created these gems to help them contemplate, but the dark-energies embedded within are also useful to humans. Unfortunately, you have no knowledge of the gem's nature or purpose."
			>

		<Names>glowing ruby halo gem;
			golden halo gem;
			violet halo gem;
			silver halo gem;
			fading amber halo gem;
			clear halo gem;
			deep blue halo gem;
			black halo gem
		</Names>

	</ItemType>

	<ItemType UNID="&itUnknownHyperglyph;"
			name=				"alien hyperglyph rod"
			virtual=			"true"
			value=				"1000"
			level=				"10"
			modifiers=			"unknown"

			description=		"This is an alien rod roughly two meters long, its surface microengraved with cryptic symbols. It is probably a form of information storage or perhaps a sophisticated computer."
			>

	</ItemType>

	<!-- Gem of Contrition -->

	<ItemType UNID="&itGemOfContrition;"
			name=				"gem(s) of contrition"
			level=				"8"
			value=				"5000"
			mass=				"1"
			frequency=			"veryrare"
			unknownType=		"&itUnknownHaloGem;"
			modifiers=			"CannotOrder; HaloGem; MinorItem; Psionic"

			description=		"These gems are used by the Halo Races, though their exact purpose is unknown. The dark-energies embedded in the gem have an influence over spacetime that is not yet fully understood."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="576" imageWidth="96" imageHeight="96"/>

		<Invoke key="C">
			(block Nil
				; Stop time
				(objSendMessage gSource Nil "\"Use this time to right your wrongs...\"")
				(sysStopTime 500 gSource)

				; Remove the item from the player's list
				(objRemoveItem gSource gItem 1)

				; Identify the item
				(itmSetKnown gItem)
				)
		</Invoke>

	</ItemType>

	<!-- Gem of Despair -->

	<ItemType UNID="&itGemOfDespair;"
			name=				"gem(s) of despair"
			level=				"7"
			value=				"2000"
			mass=				"1"
			frequency=			"veryrare"
			unknownType=		"&itUnknownHaloGem;"
			modifiers=			"CannotOrder; HaloGem; MinorItem; Psionic"

			description=		"These gems are used by the Halo Races, though their exact purpose is unknown. The dark-energies embedded in the gem have an influence over spacetime that is not yet fully understood."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="576" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(block Nil
				; Gate to Elysium
				(objSendMessage gSource Nil "\"May you find your path among the stargates...\"")
				(objGateTo gSource "Elysium" "Start" &efStargateOut;)

				; Remove the item from the player's list
				(objRemoveItem gSource gItem 1)

				; Identify the item
				(itmSetKnown gItem)
				)
		</Invoke>

	</ItemType>

	<!-- Gem of Sacrificce -->

	<ItemType UNID="&itGemOfSacrifice;"
			name=				"gem(s) of sacrifice"
			level=				"12"
			value=				"10000"
			mass=				"1"
			frequency=			"veryrare"
			unknownType=		"&itUnknownHaloGem;"
			modifiers=			"HaloGem; MinorItem; CannotOrder"

			description=		"These gems are used by the Halo Races, though their exact purpose is unknown. The dark-energies embedded in the gem have an influence over spacetime that is not yet fully understood."
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="576" imageWidth="96" imageHeight="96"/>

		<Invoke key="F">
			(block (sacrificeEffect)
				; Function to lower shields and armor
				(setq sacrificeEffect (lambda (theObj)
					(block Nil
						(objDepleteShields theObj)

						(for i 0 (subtract (shpGetArmorCount theObj) 1)
							(if (leq (itmGetLevel (shpGetArmor theObj i)) 12)
								(block (theDamage)
									(setq theDamage (divide (multiply (shpGetArmorMaxHitPoints theObj i) (random 96 99)) 100))
									(shpDamageArmor theObj i 12 theDamage)
									)
								)
							)

						(sysCreateEffect &efGemOfSacrifice; theObj (objGetPos theObj))
						)
					))

				; All ships in range have their shields lowered
				(objSendMessage gSource Nil "\"May your sacrifice prove true...\"")
				(enum (sysFindObject gSource "sN:30;") theObj
					(sacrificeEffect theObj)
					)

				; Invoker also gets effect
				(sacrificeEffect gSource)

				; Remove the item from the player's list
				(objRemoveItem gSource gItem 1)

				; Identify the item
				(itmSetKnown gItem)
				)
		</Invoke>

	</ItemType>

	<!-- Hadron-vacuum fuel cell -->

	<ItemType UNID="&itHadronVacuumFuelCell;"
			name=				"hadron-vacuum fuel cell"
			level=				"9"
			value=				"2000"
			mass=				"200"
			frequency=			"common"
			numberAppearing=	"3d6"
			modifiers=			"Consumable; Fuel"

			data=				"250000"
			description=		"These zero-point fuel cells are designed to refuel the 1GW Hyperion reactor."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<!-- itHelium3FuelRod -->

	<ItemType UNID="&itHelium3FuelRod;"
			name=				"helium&#xb3; fuel rod"
			level=				"1"
			value=				"25"
			mass=				"100"
			frequency=			"common"
			numberAppearing=	"3d6"
			modifiers=			"Consumable; Fuel"

			data=				"2500"

			description=		"This standard He&#xb3; fuel rod fits most starship reactors."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="96" imageWidth="96" imageHeight="96"/>

	</ItemType>

	<!-- itHeliumAssembly -->

	<ItemType UNID="&itHeliumAssembly;"
			name=				"helium&#xb3; reactor assembly| helium&#xb3; reactor assemblies"
			level=				"4"
			value=				"75"
			mass=				"150"
			frequency=			"common"
			numberAppearing=	"3d6"
			modifiers=			"Consumable; Fuel; 100MW"

			data=				"10000"

			description=		"This is an enriched bundle of He&#xb3; fuel rods. Though more efficient than individual fuel rods, only reactors 50 megawatts and larger can accommodate them."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<!-- Pteracnium Fuel Rod -->

	<ItemType UNID="&itPteracniumFuelRod;"
			name=				"pteracnium fuel rod"
			level=				"7"
			value=				"300"
			mass=				"200"
			frequency=			"common"
			numberAppearing=	"3d6"
			modifiers=			"Consumable; Fuel"

			data=				"50000"
			description=		"Pteracnium is a stable transuranic compound of immense energy density. Refined and packaged as fuel rods this compound is ideal for gigawatt-class reactors."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

	<!-- Scramble Algorithm -->

	<ItemType UNID="&itScrambleAlgorithm;"
			name=				"Scramble1.5 algorithm cube"
			level=				"6"
			value=				"1000"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			modifiers=			"Consumable; Info"

			description=		"This algorithm hacks into near-by enemy ship computers and temporarily disable their control systems. Scramble1.5 requires a quantum CPU to execute."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke key="S">
			(switch
				; If we don't have a quantum CPU
				(not (objGetItems gSource "*I+QuantumCPU"))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Otherwise, we paralyze enemy ships in the area
				(block (targets)
					(setq targets (sysFindObject gSource "sEN:16;"))
					(enum targets target
						(objProgramDamage target gSource "Scramble1.5" 6
							(objMakeParalyzed target (random 600 1200))
							)
						)
					(if targets
						(objSendMessage gSource Nil "Scramble1.5: Targets disabled")
						(objSendMessage gSource Nil "Scramble1.5: No targets in range")
						)

					(itmSetKnown gItem)
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Shield Optimizer Cube -->

	<ItemType UNID="&itShieldOptimizer;"
			name=				"ShieldPower v3.1.8 algorithm cube"
			level=				"5"
			value=				"1000"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			modifiers=			"Info; MinorItem"

			description=		"This algorithm enhances shield generators of technology levels IV through IX."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(switch
				; If we don't have a quantum CPU
				(not (objGetItems gSource "*I+QuantumCPU"))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Enhance shield generator
				(block (notFound)
					; Install
					(setq notFound True)
					(objEnumItems gSource "sI" theItem
						(block (shieldItem)
							(setq shieldItem theItem)
							(if notFound
								(block Nil
									(switch
										; If the shield generator is not advanced enough, then nothing happens
										(ls (itmGetLevel shieldItem) 4)
											(objSendMessage gSource Nil "Shield generator is too primitive for ShieldPower algorithm")

										; If the shield generator is too advanced, then nothing happens
										(gr (itmGetLevel shieldItem) 9)
											(objSendMessage gSource Nil "Shield generator is too advanced for ShieldPower algorithm")

										; If the item is damaged, we repair it
										(itmIsDamaged shieldItem)
											(block Nil
												(shpRepairItem gSource theItem)
												(objSendMessage gSource Nil "Shield generator has been repaired")
												)

										; Enhance the shield generator
										(block (result)
											(setq result (shpEnhanceItem gSource theItem 0x0102))
											(objSendMessage gSource Nil (intItemEnhanceStatus result "Your shields are more powerful" "shield generator"))
											)
										)
									(setq notFound Nil)
									)
								)
							)
						)

					(if notFound
						(objSendMessage gSource Nil "Shield generator required")
						)

					; Identify the item
					(itmSetKnown gItem)

					; Remove ROM
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Shield Power Saver Cube -->

	<ItemType UNID="&itShieldPowerSaver;"
			name=				"ShieldEfficiency v1.2.5 algorithm cube"
			level=				"6"
			value=				"1500"
			mass=				"50"
			frequency=			"uncommon"
			unknownType=		"&itUnknownMnemonicCube;"
			modifiers=			"Info; MinorItem"

			description=		"This algorithm increase the efficiency of shield generators of technology levels IV through IX."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(switch
				; If we don't have a quantum CPU
				(not (objGetItems gSource "*I+QuantumCPU"))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Enhance shield generator
				(block (notFound)
					; Install
					(setq notFound True)
					(objEnumItems gSource "sI" theItem
						(block (shieldItem)
							(setq shieldItem theItem)
							(if notFound
								(block Nil
									(switch
										; If the shield generator is not advanced enough, then nothing happens
										(ls (itmGetLevel shieldItem) 4)
											(objSendMessage gSource Nil "Shield generator is too primitive for ShieldEfficiency algorithm")

										; If the shield generator is too advanced, then nothing happens
										(gr (itmGetLevel shieldItem) 9)
											(objSendMessage gSource Nil "Shield generator is too advanced for ShieldEfficiency algorithm")

										; If the item is damaged, we repair it
										(itmIsDamaged shieldItem)
											(block Nil
												(shpRepairItem gSource theItem)
												(objSendMessage gSource Nil "Shield generator has been repaired")
												)

										; Enhance the shield generator
										(block (result)
											(setq result (shpEnhanceItem gSource theItem 0x0f02))
											(objSendMessage gSource Nil (intItemEnhanceStatus result "Your shields are more efficient" "shield generator"))
											)
										)
									(setq notFound Nil)
									)
								)
							)
						)

					(if notFound
						(objSendMessage gSource Nil "Shield generator required")
						)

					; Identify the item
					(itmSetKnown gItem)

					; Remove ROM
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Defective Shield Optimizer Cube -->

	<ItemType UNID="&itDefectiveShieldOptimizer;"
			name=				"ShieldPower v1.0 algorithm cube"
			level=				"5"
			value=				"5"
			mass=				"50"
			frequency=			"rare"
			unknownType=		"&itUnknownMnemonicCube;"
			modifiers=			"Info; MinorItem"

			description=		"The first version of the ShieldPower algorithm is promising but contains significant bugs."
			>

		<Image imageID="&rsItems1;" imageX="192" imageY="288" imageWidth="96" imageHeight="96"/>

		<Invoke>
			(switch
				; If we don't have a quantum CPU
				(not (objGetItems gSource "*I+QuantumCPU"))
					(objSendMessage gSource Nil "Quantum CPU required")

				; Enhance shield generator
				(block (notFound)
					; Install
					(setq notFound True)
					(objEnumItems gPlayerShip "sI" theItem
						(block (shieldItem)
							(setq shieldItem theItem)
							(if notFound
								(block Nil
									(switch
										; If the shield generator is not advanced enough, then nothing happens
										(ls (itmGetLevel shieldItem) 4)
											(objSendMessage gSource Nil "Shield generator is too primitive for ShieldPower algorithm")

										; If the shield generator is too advanced, then nothing happens
										(gr (itmGetLevel shieldItem) 9)
											(objSendMessage gSource Nil "Shield generator is too advanced for ShieldPower algorithm")

										; If the item is damaged, we cannot do anything
										(itmIsDamaged shieldItem)
											(objSendMessage gSource Nil "Shield generator is too damaged for optimization")

										; 10% chance of enhancing the shield generator (otherwise, a bug)
										(if (leq (random 1 100) 10)
											(block (result)
												(setq result (shpEnhanceItem gSource theItem 0x0102))
												(objSendMessage gSource Nil (intItemEnhanceStatus result "Your shields are more powerful" "shield generator"))
												)
											(block (result)
												(setq result (shpEnhanceItem gSource theItem 0x8102))
												(objSendMessage gSource Nil (intItemEnhanceStatus result "ShieldPower: qbit indeterminacy exception [#!800A410!]" "shield generator"))
												)
											)
										)
									(setq notFound Nil)
									)
								)
							)
						)

					(if notFound
						(objSendMessage gSource Nil "Shield generator required")
						)

					; Identify the item
					(itmSetKnown gItem)

					; Remove ROM
					(objRemoveItem gSource gItem 1)
					)
				)
		</Invoke>
	</ItemType>

	<!-- Segment of Reinforced Titanium Plate 1 -->

	<ItemType UNID="&itReinforcedTitanium1;"
			name=				"titanium barricade"
			level=				"2"
			value=				"200"
			frequency=			"uncommon"
			numberAppearing=	"1d4"
			mass=				"5000"
			modifiers=			"MinorItem; Specialty; Barricade"

			description=		"These reinforced titanium plates are used in station construction both as bulkheads and as exterior armor."

			sortName=			"titanium barricade.30"
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="480" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"100"

				repairTech=	"1"
				damageAdjLevel="2"
				/>

		<Invoke uninstalledOnly="true">
			(intBarricadeUse &stBarricade1;)
		</Invoke>

	</ItemType>

	<!-- Segment of Reinforced Titanium Plate 2 -->

	<ItemType UNID="&itReinforcedTitanium2;"
			name=				"double titanium barricade"
			level=				"3"
			value=				"500"
			frequency=			"uncommon"
			numberAppearing=	"1d4"
			mass=				"10000"
			modifiers=			"MinorItem; Specialty; Barricade"

			description=		"These reinforced titanium plates are used in station construction both as bulkheads and as exterior armor."

			sortName=			"titanium barricade.20"
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="480" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"200"

				repairTech=	"1"
				damageAdjLevel="2"
				/>

		<Invoke uninstalledOnly="true">
			(intBarricadeUse &stBarricade2;)
		</Invoke>

	</ItemType>

	<!-- Segment of Reinforced Titanium Plate 3 -->

	<ItemType UNID="&itReinforcedTitanium3;"
			name=				"quad titanium barricade"
			level=				"4"
			value=				"1000"
			frequency=			"uncommon"
			numberAppearing=	"1d4"
			mass=				"20000"
			modifiers=			"MinorItem; Specialty; Barricade"

			description=		"These reinforced titanium plates are used in station construction both as bulkheads and as exterior armor."

			sortName=			"titanium barricade.10"
			>

		<Image imageID="&rsItems1;" imageX="96" imageY="480" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"400"

				repairTech=	"1"
				damageAdjLevel="2"
				/>

		<Invoke uninstalledOnly="true">
			(intBarricadeUse &stBarricade3;)
		</Invoke>

	</ItemType>

	<!-- Xenotite Fuel Rod -->

	<ItemType UNID="&itXenotiteFuelRod;"
			name=				"xenotite fuel rod"
			level=				"5"
			value=				"160"
			mass=				"200"
			frequency=			"common"
			numberAppearing=	"3d6"
			modifiers=			"Consumable; Fuel"

			data=				"20000"
			description=		"Starship reactors larger than 100MW need a denser fuel than helium. Highly-enriched xenotite, an exotic anti-matter mineral, is a common alternative."
			>

		<Image imageID="&rsItems1;" imageX="288" imageY="96" imageWidth="96" imageHeight="96"/>
	</ItemType>

<!-- BEHAVIORS AND BASE CLASSES =========================================== -->

	<!-- Convoy Behavior
	
		USAGE NOTES
		
		This simulates the behavior of a freighter convoy escorted by
		defenders.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'avoidingEnemy			= We're trying to run away
								'onCourse				= Ship on straight course
	-->

	<ShipClass UNID="&evStdConvoyEncounterBehavior;"
			class=				"(convoy encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003015_behavior"))
					(switch
						; If we see any enemy ships then run away
						(eq behavior 'onCourse)
							(block (theEnemy)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(block (shelterObj gateObj)
										(shpCancelOrders gSource)
										
										(setq gateObj (sysFindObject gSource "GN -uncharted;"))
										(setq shelterObj (sysFindObject gSource "TFAN +populated;"))
										
										; If there's shelter nearby, go to it
										(if (and shelterObj
												(ls (objGetDistance gSource shelterObj) (objGetDistance gSource gateObj))
												)
											(block Nil
												(shpOrder gSource 'dock shelterObj)
												(shpOrder gSource 'wait (random 10 40))
												)
											)
											
										; Gate out
										(shpOrder gSource 'gate gateObj)
										
										(objSetData gSource "00003015_behavior" 'avoidingEnemy)
										)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)
						
					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)
					
					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003015_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003015_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>
	
	<!-- Patrol Behavior
	
		USAGE NOTES
		
		This simulates the behavior of a ship on patrol that detects the
		player in a random encounter.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'attackingEnemy			= We're engaging the enemy
								'onCourse				= Ship on straight course
	-->

	<ShipClass UNID="&evStdPatrolEncounterBehavior;"
			class=				"(patrol encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003014_behavior"))
					(switch
						; If we see any enemy ships then attack
						(eq behavior 'onCourse)
							(block (theEnemy)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(block Nil
										(shpCancelOrders gSource)
										(shpOrder gSource 'attack theEnemy)
										(shpOrder gSource 'attackNearestEnemy)
										(objSetData gSource "00003014_encounterPos" (objGetPos gSource))
										(objSetData gSource "00003014_behavior" 'attackingEnemy)
										)
									)
								)

						; If the target has run away, then don't chase
						(eq behavior 'attackingEnemy)
							(if (and (geq (sysVectorDistance (objGetData gSource "00003014_encounterPos") (objGetPos gSource)) 300)
									(geq (objGetDistance gSource (objGetTarget gSource)) 50)
									)
								(block Nil
									(shpCancelOrders gSource)
									(shpOrder gSource 'gate)
									(objSetData gSource "00003014_behavior" 'onCourse)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)
						
					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)
					
					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003014_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003014_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
							
						; If we're done attacking, then we're done
						(eq behavior 'attackingEnemy)
							(block Nil
								(shpOrder gSource 'gate)
								(objSetData gSource "00003014_behavior" 'onCourse)
								)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>
	
	<!-- Zone Encounter Behavior
	
		USAGE NOTES
		
		This is for random encounters in which the player runs into
		a patrol that is orbiting a station. The patrol will ignore enemies
		unless the enemies are within 300 light-seconds of the station.
		
		Note: This only works with enemies that have their own sovereign.
		
		EXTRA DATA
		
		behavior:			Ship's current behavior
								'onCourse				= Ship on straight course
								'backToBase				= Heading back to base
								'patrolling				= Orbiting base
								'leavingSystem			= Leaving
								
		homeObj:			Ship's base (may be Nil)
		
	-->

	<ShipClass UNID="&evStdZoneEncounterBehavior;"
			class=				"(zone encounter behavior)"
			virtual=			"true"
			
			attributes=			"behaviorClass"
			>
			
		<Events>
			<GetCreatePos>
				(if aTargetObj
					(intComputeRandomEncounterPos aTargetObj)
					)
			</GetCreatePos>

			<OnBehavior>
				(block (behavior)
					(setq behavior (objGetData gSource "00003016_behavior"))
					(switch
						; If we see any enemy ships and we're inside our patrol zone
						; then attack. Otherwise, change course and head back to base.

						(eq behavior 'onCourse)
							(block (theEnemy theBase baseDist)
								(if (setq theEnemy (sysFindObject gSource "sEPAN"))
									(switch

										; Attack
										(and (setq theBase (objGetObjRefData gSource "00003016_homeObj"))
												(leq (setq baseDist (objGetDistance gSource theBase)) 300)
												)
											(block Nil
												(shpCancelOrders gSource)
												(shpOrder gSource 'patrol theBase 300)
												(objSetData gSource "00003016_behavior" 'patrolling)
												)

										; Back to base
										theBase
											(block Nil
												(shpCancelOrders gSource)
												(shpOrder gSource 'holdCourse
													(sysVectorSubtract (objGetPos theBase) (objGetPos gSource))
													(subtract baseDist 300)
													)
												(objSetData gSource "00003016_behavior" 'backToBase)
												)

										; Leave the system
										(block Nil
											(shpCancelOrders gSource)
											(shpOrder gSource 'gate)
											(objSetData gSource "00003016_behavior" 'leavingSystem)
											)
										)
									)
								)
						)
					)
			</OnBehavior>
			
			<OnCreateOrders>
				(block (theCourse homeBase)
					(if (not aTargetObj)
						(setq aTargeObj gPlayerShip)
						)

					; Find our nearest base
					(setq homeBase (sysFindObject gSource "TAFJN"))
					(if (not homeBase)
						(setq homeBase aBaseObj)
						)
					(objSetObjRefData gSource "00003016_homeObj" homeBase)

					; Move towards the player's path
					(setq theCourse (intComputeRandomEncounterCourse gSource aTargetObj))
					(shpOrder gSource 'holdCourse theCourse 300)

					; Register a timer so that we can look for enemies
					(sysAddObjRecurringTimerEvent 30 gSource "OnBehavior")
					(objSetData gSource "00003016_behavior" 'onCourse)
					)
			</OnCreateOrders>
			
			<OnOrdersCompleted>
				(block (behavior)
					(setq behavior (objGetData gSource "00003016_behavior"))
					(switch
						; If we're done with this order, then we never encountered
						; the player, so we're done, head for a stargate
						; Note: we might encounter the player en route
						(eq behavior 'onCourse)
							(shpOrder gSource 'gate)
							
						; If we're done attacking, then we're done
						(eq behavior 'attackingEnemy)
							(block Nil
								(shpOrder gSource 'gate)
								(objSetData gSource "00003016_behavior" 'onCourse)
								)

						(eq behavior 'backToBase)
							(block Nil
								(shpOrder gSource 'patrol (objGetObjRefData gSource "00003016_homeObj") 300)
								(objSetData gSource "00003016_behavior" 'patrolling)
								)
						)
					)
			</OnOrdersCompleted>
		</Events>
	</ShipClass>
	
	<!-- Wingman Base Class

		USAGE NOTES
		
		Do not rely on the implementation of this class across versions. If you wish
		to inherit from this class in an Extension, you should copy the class into
		your own Extension and then inherit from that.

		EXTRA DATA
		
		behavior:			Ship's current behavior
								Nil						= nothing
								'attackingAtWill		= attacking any target in range
								'attackingTarget		= attacking a target
								'escorting				= escorting the player
								'goingHome				= wingman wants to go home
								'repairingArmor			= docking with station to repair
								'waiting				= waiting for the player

		homeSystem			System nodeID where we were created
		nextArmorRepairMsg	Tick at which we should tell player about armor damage
		welcomeMsg			True if we already said hello to player

		GLOBAL DATA

		status:				Ship's status
								Nil						= never encountered
								'joined					= Has joined the player
								'declined				= Player has declined escort
								'destroyed				= Dead
								'destroyedByPlayer		= Killed by player
								'returnedHome			= Left the player to return home
								
	-->

	<ShipClass UNID="&baStdWingmanBase;"
			class=				"(wingman base class)"
			virtual=			"true"
			
			attributes=			"baseClass"
			>

		<Communications>
			<Message name="Attack target" key="A">
				<OnShow>
					(and (objGetTarget gSender)
						(not (eq (objGetTarget gSender) (objGetTarget gSource)))
						(not (eq (objGetData gSource "behavior") 'goingHome))
						)
				</OnShow>
				
				<Invoke>
					(switch
						(eq (objGetTarget gSender) gSource)
							(objSendMessage gSender gSource (intTranslate gSource 'IcantAttackMyself))
							
						(not (objIsEnemy gPlayerShip (objGetTarget gSender)))
							(objSendMessage gSender gSource (intTranslate gSource 'IcantAttackFriends))

						(block Nil
							(shpCancelOrders gSource)
							(shpOrder gSource 'attack (objGetTarget gSender))
							
							(objSetData gSource "behavior" 'attackingTarget)
							(objSendMessage gSender gSource (intTranslate gSource 'AttackTargetAck))
							)
						)
				</Invoke>
			</Message>
			
			<Message name="Break &amp; attack" key="B">
				<OnShow>
					(eq (objGetData gSource "behavior") 'escorting)
				</OnShow>
				
				<Invoke>
					(block (theTarget)
						(switch
							(or (not (setq theTarget (sysFindObject gPlayerShip "sTEAN")))
									(gr (objGetDistance gPlayerShip theTarget) 100)
									)
								(objSendMessage gSender gSource (intTranslate gSource 'NoTargetInRange))
							
							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'attack theTarget)
								
								(objSetData gSource "behavior" 'attackingAtWill)
								(objSendMessage gSender gSource (intTranslate gSource 'AttackTargetAck))
								)
							)
						)
				</Invoke>
			</Message>

			<Message name="Form up" key="F">
				<OnShow>
					(and 
						(or (eq (objGetData gSource "behavior") 'waiting)
							(objCommunicate gSource gSender 'QueryAttackStatus)
							)
						(not (eq (objGetData gSource "behavior") 'goingHome))
						)
				</OnShow>

				<Invoke>
					(block (behavior)
						(setq behavior (objGetData gSource "behavior"))
						(switch
							(eq behavior 'escorting)
								(block Nil
									(objCommunicate gSource gSender 'FormUp)
									(objSendMessage gSender gSource (intTranslate gSource 'FormUpAck))
									)

							(block Nil
								(shpCancelOrders gSource)
								(shpOrder gSource 'follow gPlayerShip)
								
								(objSetData gSource "behavior" 'escorting)
								(if (or (eq behavior 'attackingTarget) (eq behavior 'attackingAtWill))
									(objSendMessage gSender gSource (intTranslate gSource 'CancelAttackAck))
									(objSendMessage gSender gSource (intTranslate gSource 'FormUpAck))
									)
								)
							)
						)
				</Invoke>
			</Message>
			
			<Message name="Status" key="S">
				<OnShow>
					True
				</OnShow>
				
				<Invoke>
					(block (behavior armorDamage shieldLevel)
						(setq behavior (objGetData gSource "behavior"))
						
						(objSendMessage gSender gSource
							(switch
								(or (eq behavior 'attackingTarget) (eq behavior 'attackingAtWill))
									(intTranslate gSource 'StatusAttackingTarget)

								(eq behavior 'goingHome)
									(intTranslate gSource 'StatusGoingHome)
								
								(eq behavior 'repairingArmor)
									(intTranslate gSource 'StatusRepairingArmor)
									
								(eq behavior 'waiting)
									(intTranslate gSource 'StatusWaiting)
									
								(and (eq (setq armorDamage (objGetVisibleDamage gSource)) 0)
										(or (eq (setq shieldLevel (objGetShieldLevel gSource)) 100) (eq shieldLevel -1))
										)
									(intTranslate gSource 'Status100Percent)

								(eq armorDamage 0)
									(cat "Shields down to " shieldLevel "%")
								
								(cat "Armor is " armorDamage "% damaged")
								)
							)
							
						(objSetShowAsDestination gSource Nil 'autoclear)
						)
				</Invoke>
			</Message>

			<Message name="Wait" key="W">
				<OnShow>
					(eq (objGetData gSource "behavior") 'escorting)
				</OnShow>

				<Invoke>
					(block Nil
						(shpCancelOrders gSource)
						(shpOrder gSource 'hold)
						
						(objSetData gSource "behavior" 'waiting)
						(objSendMessage gSender gSource (intTranslate gSource 'WaitAck))
						)
				</Invoke>
			</Message>
		</Communications>
		
		<Events>
			<OnBehavior>
				(block (behavior theTarget nextTime maxSystemLevel armorDamage)
					(setq behavior (objGetData gSource "behavior"))
					
					(switch
						; If we're injured and we're near a base that repairs armor then
						; dock with the base and get repaired

						(and (eq behavior 'escorting)
								(geq (setq armorDamage (objGetVisibleDamage gSource)) 10)
								(not (objIsUnderAttack gSource))
								)
							(switch
								; Some wingmen (like Jenna) doesn't want to proceed beyond a certain point
								(and (setq maxSystemLevel (objGetStaticData gSource "MaxSystemLevel"))
										(gr (sysGetLevel) maxSystemLevel)
										)
									(block Nil
										(shpCancelOrders gSource)
										(shpOrder gSource 'hold 30)
										(shpOrder gSource 'gate (intGetGateToSystem gSource (objGetData gSource "homeSystem")))

										(objSetData gSource "behavior" 'goingHome)
										(objSendMessage gPlayerShip gSource (intTranslate gSource 'ImGoingHome))
										)
								
								; If there is a station that can repair armor, dock with it
								(setq theTarget (srvFindRepairArmor gSource 60 (itmGetLevel (shpGetArmor gSource 0))))
									(block Nil
										(shpCancelOrders gSource)
										(shpOrder gSource 'dock theTarget)
										(shpOrder gSource 'wait (random 3 8))
										
										(objSetData gSource "behavior" 'repairingArmor)
										(objSendMessage gPlayerShip gSource (intTranslate gSource 'ImRepairingArmor))
										)
									
								; Otherwise, tell the player that we need repairs
								(and (geq armorDamage 50)
										(or (not (setq nextTime (objGetData gSource "nextArmorRepairMsg")))
											(geq (unvGetTick) nextTime)
											)
										)
									(block Nil
										(objSendMessage gPlayerShip gSource (intTranslate gSource 'MyArmorNeedsRepair))
										(objSetData gSource "nextArmorRepairMsg" (add (unvGetTick) 3600))
										)
								)
						)
					)
			</OnBehavior>

			<OnCreate>
				(block Nil
					(objSetData gSource "homeSystem" (sysGetNode))
					(sysAddObjRecurringTimerEvent 60 gSource "OnBehavior")
					)
			</OnCreate>

			<OnDestroy>
				(switch
					(eq (objGetGlobalData gSource "status") 'returnedHome)
						Nil

					(and gPlayerShip (eq aOrderGiver gPlayerShip))
						(objSetGlobalData gSource "status" 'destroyedByPlayer)

					(block Nil
						(objSetGlobalData gSource "status" 'destroyed)
						(plyMessage gPlayer (intTranslate gSource 'WingmanKilled))
						)
					)
			</OnDestroy>
			
			<OnEnteredGate>
				(if (eq (objGetData gSource "behavior") 'goingHome)
					(objSetGlobalData gSource "status" 'returnedHome)
					)
			</OnEnteredGate>
			
			<OnEnteredSystem>
				(block (maxSystemLevel)
					(setq maxSystemLevel (objGetStaticData gSource "MaxSystemLevel"))
					(switch
						(not maxSystemLevel)
							Nil
							
						(eq (objGetData gSource "homeSystem") (sysGetNode))
							Nil

						(geq (sysGetLevel) maxSystemLevel)
							(objSendMessage gPlayerShip gSource (intTranslate gSource 'ImTooFarFromHome))

						(eq (sysGetLevel) (subtract maxSystemLevel 1))
							(objSendMessage gPlayerShip gSource (intTranslate gSource 'ImFarFromHome))
						)
					)
			</OnEnteredSystem>

			<OnOrdersCompleted>
				(block (behavior theTarget)
					(setq behavior (objGetData gSource "behavior"))
					(switch
						(eq behavior 'repairingArmor)
							(block Nil
								(intArmorRepairAll gSource 25 'alwaysRepair)
								(objSendMessage gPlayerShip gSource (intTranslate gSource 'ArmorRepaired))
								)
						)
					
					; Set orders and state
					
					(switch
						(and (eq behavior 'attackingAtWill)
								(setq theTarget (sysFindObject gPlayerShip "sTEAN"))
								(leq (objGetDistance gPlayerShip theTarget) 100)
								)
							(shpOrder gSource 'attack theTarget)
								
						gPlayerShip
							(block Nil
								(shpOrder gSource 'follow gPlayerShip)
								(objSetData gSource "behavior" 'escorting)
								)

						(block Nil
							(shpOrder gSource 'hold)
							(objSetData gSource "behavior" 'waiting)
							)
						)
					)
			</OnOrdersCompleted>
			
			<OnPlayerLeftSystem>
				(block (behavior)
					(setq behavior (objGetData gSource "behavior"))
					(switch
						(or (not behavior)
								(eq behavior 'goingHome)
								)
							Nil

						; If we're waiting, stay in this system and wait for the player
						(or (eq behavior 'waiting)
								(eq behavior 'repairingArmor)
								)
							'waitForPlayer

						; Otherwise, follow the player through the gate
						'followPlayer
						)
					)
			</OnPlayerLeftSystem>
			
			<OnTranslateMessage>
				(switch
					(eq aMessage 'EscortReportingIn)
						(if (not (objGetData gSource "welcomeMsg"))
							(block Nil
								(objSetData gSource "welcomeMsg" True)
								(intTranslate gSource 'WingmanJoined)
								)
							""
							)
						
					(or (eq aMessage 'WatchYourTargets)
							(eq aMessage 'NiceShooting)
							)
						(intTranslate gSource aMessage)
						
					Nil
					)
			</OnTranslateMessage>

			<OrderJoinPlayer>
				(block Nil
					(shpSetPlayerWingman gSource)
					(objSetGlobalData gSource "status" 'joined)
					)
			</OrderJoinPlayer>
		</Events>
	</ShipClass>

<!-- SHIP CLASSES ========================================================= -->

	<!-- EI100/M Missileship-->

	<ShipClass UNID="&scEI100M;"
			manufacturer=		"Earth Industries"
			class=				"EI100/M"
			type=				"missileship"
			score=				"245"

			mass=				"250"
			cargoSpace=			"150"
			thrust=				"200"
			maneuver=			"6"
			maxSpeed=			"12"

			leavesWreck=		"75"

			attributes=			""
			>

		<Armor>
			<ArmorSection start="315" span="90" armorID="&itReactiveArmor;" areaSet="0,2" />
			<ArmorSection start="225" span="90" armorID="&itReactiveArmor;" areaSet="3,4" />
			<ArmorSection start="135" span="90" armorID="&itReactiveArmor;" areaSet="1,6" />
			<ArmorSection start="45"  span="90" armorID="&itReactiveArmor;" areaSet="7,13" />
		</Armor>

		<Devices>
			<Device deviceID="&itOmniLaserCannon;"/>
			<Device deviceID="&itNAMIMissileLauncher;" omnidirectional="true" />
			<Device deviceID="&itClass1Deflector;"/>
		</Devices>

		<Items>
			<Item count="2d6" item="&itKM500Missile;"/>
			<Item count="4d6" item="&itHelium3FuelRod;"/>
		</Items>

		<Image imageID="&rsEI100Image;" imageX="0" imageY="0" imageWidth="70" imageHeight="70"/>

		<AISettings
			fireRateAdj=		"60"
			fireAccuracy=		"100"
			perception=			"4"
			combatStyle=		"standOff"
			/>

	</ShipClass>

	<!-- Mikeno-class destroyer -->

	<ShipClass UNID="&scMikeno;"
			manufacturer=		"United African States"
			class=				"Mikeno"
			type=				"destroyer"
			score=				"705"

			mass=				"5000"
			cargoSpace=			"500"
			thrust=				"2000"
			maneuver=			"10"
			maxSpeed=			"12"

			leavesWreck=		"100"
			>

		<Armor>
			<ArmorSection start="345" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="0,2" />
			<ArmorSection start="315" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="3,4" />
			<ArmorSection start="285" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="1,6" />
			<ArmorSection start="255" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="7,13" />
			<ArmorSection start="225" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="0,2" />
			<ArmorSection start="195" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="3,4" />
			<ArmorSection start="165" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="1,6" />
			<ArmorSection start="135" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="7,13" />
			<ArmorSection start="105" span="30" armorID="&itHeavyPlasteelPlate;" areaSet="0,2" />
			<ArmorSection start="75"  span="30" armorID="&itHeavyPlasteelPlate;" areaSet="3,4" />
			<ArmorSection start="45"  span="30" armorID="&itHeavyPlasteelPlate;" areaSet="1,6" />
			<ArmorSection start="15"  span="30" armorID="&itHeavyPlasteelPlate;" areaSet="7,13" />
		</Armor>

		<Devices>
			<Device deviceID="&itDragonflyMissileSystem;" posAngle="0" posRadius="64"/>
			<Device deviceID="&itNAMIMissileLauncher;" posAngle="0" posRadius="64"/>
			<Device deviceID="&itClass3Deflector;"/>

			<Device deviceID="&itLaserCannon;" secondaryWeapon="true" minFireArc="30" maxFireArc="175" posAngle="90" posRadius="20"/>
			<Device deviceID="&itLaserCannon;" secondaryWeapon="true" minFireArc="185" maxFireArc="330" posAngle="270" posRadius="20"/>
		</Devices>

		<Items>
			<Item count="20d6" item="&itDragonflyCartridge;"/>
			<Item count="6d6" item="&itKM500Missile;"/>
		</Items>

		<Image imageID="&rsLargeShips1;" imageX="192" imageY="0" imageWidth="192" imageHeight="192" imageFrameCount="0" imageTicksPerFrame="0"/>

		<AISettings
			fireRateAdj=		"15"
			fireAccuracy=		"95"
			perception=			"4"
			/>

	</ShipClass>

	<!-- Tenhove Sentinel -->

	<ShipClass UNID="&scTenhoveSentinel;"
			manufacturer=		"Tenhove Defense Systems"
			class=				"Tenhove"
			type=				"sentinel"
			score=				"25"

			mass=				"15"
			cargoSpace=			"0"
			thrust=				"30"
			maneuver=			"1"
			maxSpeed=			"5"

			leavesWreck=		"10"

			attributes=			"genericClass"
			>

		<Armor>
			<ArmorSection start="0" span="360" armorID="&itUltraLightTitaniumPlate;"/>
		</Armor>

		<Devices>
			<Device deviceID="&itLaserCannon;"/>
		</Devices>

		<Image imageID="&rsSmallShips1;" imageX="96" imageY="0" imageWidth="32" imageHeight="32" imageFrameCount="0" imageTicksPerFrame="0"/>

		<AISettings
			fireRateAdj=		"50"
			fireAccuracy=		"80"
			perception=			"4"
			/>

	</ShipClass>

<!-- *************************************************************************** -->

<SpaceEnvironmentType UNID="&seNebula;"
		lrsJammer=			"true"
		dragFactor=			"73"
		attributes=			"nebula"
		>

	<Image imageID="&rsNebulaEnv;" 
			imageX="0" 
			imageY="0" 
			imageWidth="640" 
			imageHeight="640"/>
</SpaceEnvironmentType>

<!-- SHIP ENCOUNTER TABLES ================================================ -->

	<EncounterTable UNID="&etMarauderAmbush1;">
		<Table>
			<Ship chance="60" count="1d3+1"	class="&scViking-II;"	orders="attack"	sovereign="&svMarauders;"/>
			<Group chance="40">
				<Ship         count="1d3"	class="&scViking-II;"	orders="attack"	sovereign="&svMarauders;"/>
				<Ship         count="1"		class="&scCorsair-II;"	orders="attack"	sovereign="&svMarauders;"/>
			</Group>
		</Table>
	</EncounterTable>

	<EncounterTable UNID="&etMarauderAmbush2;">
		<Table>
			<Ship chance="40" count="2d3"	class="&scViking-II;"	orders="attack"	sovereign="&svMarauders;"/>
			<Group chance="30">
				<Ship         count="1d4+1"	class="&scViking-II;"	orders="attack"	sovereign="&svMarauders;"/>
				<Ship         count="1"		class="&scCorsair-II;"	orders="attack"	sovereign="&svMarauders;"/>
			</Group>
			<Ship chance="30" count="2"	class="&scCorsair-II;"	orders="attack"	sovereign="&svMarauders;"/>
		</Table>
	</EncounterTable>

<!-- STAR SYSTEM TOPOLOGY ================================================= -->

<!-- STATION TYPES ============================================================

	STATION ATTRIBUTES

	anarchists				anarchists
	commonwealth			commonwealth station
	commonwealthFleet		Commonwealth Fleet
	commonwealthMilitary	either Commonwealth militia or Commonwealth Fleet
	enemy					enemy of the player
	friendly				friend of the player
	populated				not an automated station
	primary					main station in the system

	ENVIRONMENT ATTRIBUTES

	envEarth				station found in earth systems
	envFire					station found in fire systems
	envWater				station found in water systems
	envAir					station found in air systems

	For example, in asteroid systems (+envEarth) any station that
	DOES NOT have the envEarth attribute is half as likely to appear
	in the system.

	Each of the above attributes also has a pair of the form envAvoidsXXX. For
	example, envAvoidsAir means that the station is less likely than average to
	be found in an ice system.

	LOCATION CRITERIA

	+planetary				station twice as likely to appear near a planet

-->

	<Effect UNID="&efLargeStationDamage;">
		<Image imageID="&rsLargeDamage;"
				imageWidth="64"
				imageHeight="64"
				imageFrameCount="5"/>
	</Effect>

	<Effect UNID="&efMediumStationDamage;">
		<Image imageID="&rsMediumDamage;"
				imageWidth="24"
				imageHeight="24"
				imageFrameCount="10"/>
	</Effect>

	<!-- Barricade -->

	<StationType UNID="&stBarricade1;"
			name=				"titanium barricade"
			sovereign=			"&svIndependent;"
			dockScreen=			"&dsBarricade;"

			maxStructuralHitPoints="25"
			ejectaType=			"&vtWreckEjecta;"

			scale=				"ship"
			mass=				"8"
			noMapIcon=			"true"
			>

		<ImageVariants>
			<Image			imageID="&rsBarricades;" imageX="0" imageY="0"   imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="80"  imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="160" imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="240" imageWidth="80" imageHeight="80" />
		</ImageVariants>

		<DockingPorts>
			<Port x="0"		y="40" />
			<Port x="0"		y="-40" />
			<Port x="40"	y="0" />
			<Port x="-40"	y="0" />
		</DockingPorts>

	</StationType>

	<StationType UNID="&stBarricade2;"
			name=				"titanium barricade"
			sovereign=			"&svIndependent;"
			dockScreen=			"&dsBarricade;"

			maxStructuralHitPoints="50"
			ejectaType=			"&vtWreckEjecta;"

			scale=				"ship"
			mass=				"15"
			noMapIcon=			"true"
			>

		<ImageVariants>
			<Image			imageID="&rsBarricades;" imageX="0" imageY="0"   imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="80"  imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="160" imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="240" imageWidth="80" imageHeight="80" />
		</ImageVariants>

		<DockingPorts>
			<Port x="0"		y="40" />
			<Port x="0"		y="-40" />
			<Port x="40"	y="0" />
			<Port x="-40"	y="0" />
		</DockingPorts>

	</StationType>

	<StationType UNID="&stBarricade3;"
			name=				"titanium barricade"
			sovereign=			"&svIndependent;"
			dockScreen=			"&dsBarricade;"

			maxStructuralHitPoints="100"
			ejectaType=			"&vtWreckEjecta;"

			scale=				"ship"
			mass=				"30"
			noMapIcon=			"true"
			>

		<ImageVariants>
			<Image			imageID="&rsBarricades;" imageX="0" imageY="0"   imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="80"  imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="160" imageWidth="80" imageHeight="80" />
			<Image			imageID="&rsBarricades;" imageX="0" imageY="240" imageWidth="80" imageHeight="80" />
		</ImageVariants>

		<DockingPorts>
			<Port x="0"		y="40" />
			<Port x="0"		y="-40" />
			<Port x="40"	y="0" />
			<Port x="-40"	y="0" />
		</DockingPorts>

	</StationType>

	<!-- Shipwreck -->

	<StationType UNID="&stShipwreck;"
			name=				"(shipwreck)"
			sovereign=			"&svIndependent;"
			dockScreen=			"&dsAbandonedShip;"
			dockingPorts=		"4"
			scale=				"ship"
			mobile=				"true"
			noMapIcon=			"true"

			ejectaType=			"&vtWreckEjecta;"
			
			attributes=			"shipwreck"
			>
		<Image imageID="&rsMediumShips1;" imageX="0" imageY="96" imageWidth="48" imageHeight="48" imageFrameCount="0" imageTicksPerFrame="0"/>

		<Events>
			<GetExplosionType>
				(intContainerGetExplosionType gSource)
			</GetExplosionType>

			<OnDamage>
				(intContainerOnDamage gSource aDamageHP)
			</OnDamage>
		</Events>

	</StationType>

	<!-- Shipwreck 1 -->

	<StationType UNID="&stShipwreck1;"
			name=				"(shipwreck I)"
			sovereign=			"&svPirates;"
			dockScreen=			"&dsAbandonedShip;"
			dockingPorts=		"4"
			scale=				"ship"
			mobile=				"true"
			noMapIcon=			"true"

			ejectaType=			"&vtWreckEjecta;"

			attributes=			"debris,friendly,shipwreck"
			levelFrequency=		"ucccu rrvv- ----- ----- -----"
			locationCriteria=	"-planetary"
			>
		<Image shipwreckID="&scCorsair;, &scBorer;, &scEarthzone;, &scRoninA;"/>

		<Items>
			<Table>
				<Null	chance="20"/>
				<Lookup chance="30" count="1d3" table="&trConsumables1;"/>
				<Lookup chance="15" count="1"	table="&trConsumables2;"/>
				<Lookup chance="25" count="1"	table="&trMinorItem2;"/>
				<Lookup chance="10" count="1"	table="&trMajorItem2;"/>
			</Table>
		</Items>

		<Events>
			<GetExplosionType>
				(intContainerGetExplosionType gSource)
			</GetExplosionType>

			<OnDamage>
				(intContainerOnDamage gSource aDamageHP)
			</OnDamage>
		</Events>

	</StationType>

	<!-- Shipwreck 2 -->

	<StationType UNID="&stShipwreck2;"
			name=				"(shipwreck II)"
			sovereign=			"&svPirates;"
			dockScreen=			"&dsAbandonedShip;"
			dockingPorts=		"4"
			scale=				"ship"
			mobile=				"true"
			noMapIcon=			"true"

			attributes=			"debris,friendly,shipwreck"
			levelFrequency=		"-uccc urrvv ----- ----- -----"
			locationCriteria=	"-planetary"

			ejectaType=			"&vtWreckEjecta;"
			>
		<Image shipwreckID="&scRoninB;, &scSotho;, &scEI100;, &scT31ArmedTransport;"/>

		<Items>
			<Table count="2">
				<Null	chance="10"/>
				<Lookup chance="15" count="1d3" table="&trConsumables1;"/>
				<Lookup chance="20" count="1"	table="&trConsumables2;"/>
				<Lookup chance="15" count="1"	table="&trConsumables3;"/>
				<Lookup chance="15" count="1"	table="&trMinorItem2;"/>
				<Lookup chance="10" count="1"	table="&trMinorItem3;"/>
				<Lookup chance="10" count="1"	table="&trMajorItem2;"/>
				<Lookup chance="5"  count="1"	table="&trMajorItem3;"/>
			</Table>
		</Items>

		<Events>
			<GetExplosionType>
				(intContainerGetExplosionType gSource)
			</GetExplosionType>

			<OnDamage>
				(intContainerOnDamage gSource aDamageHP)
			</OnDamage>
		</Events>

	</StationType>

	<!-- Shipwreck 3 -->

	<StationType UNID="&stShipwreck3;"
			name=				"(shipwreck III)"
			sovereign=			"&svPirates;"
			dockScreen=			"&dsAbandonedShip;"
			dockingPorts=		"4"
			scale=				"ship"
			mobile=				"true"
			noMapIcon=			"true"

			attributes=			"debris,friendly,shipwreck"
			levelFrequency=		"--ucc currv v---- ----- -----"
			locationCriteria=	"-planetary"

			ejectaType=			"&vtWreckEjecta;"
			>
		<Image shipwreckID="&scRepentant;, &scEI100;, &scBarbary;"/>

		<Items>
			<Table count="1d4">
				<Null	chance="5"/>
				<Lookup chance="5"  count="1d3" table="&trConsumables2;"/>
				<Lookup chance="15" count="1"	table="&trConsumables3;"/>
				<Lookup chance="16" count="1"	table="&trConsumables4;"/>
				<Lookup chance="10" count="1"	table="&trConsumables5;"/>
				<Lookup chance="10" count="1"	table="&trMinorItem2;"/>
				<Lookup chance="15" count="1"	table="&trMinorItem3;"/>
				<Lookup chance="8"  count="1"	table="&trMinorItem4;"/>
				<Lookup chance="8"  count="1"	table="&trMajorItem2;"/>
				<Lookup chance="5"  count="1"	table="&trMajorItem3;"/>
				<Lookup chance="3"  count="1"	table="&trMajorItem4;"/>
			</Table>
		</Items>

		<Events>
			<GetExplosionType>
				(intContainerGetExplosionType gSource)
			</GetExplosionType>

			<OnDamage>
				(intContainerOnDamage gSource aDamageHP)
			</OnDamage>
		</Events>

	</StationType>

	<!-- Shipwreck, Radioactive -->

	<StationType UNID="&stRadioactiveShipwreck;"
			name=				"(radioactive shipwreck)"
			sovereign=			"&svPirates;"
			dockScreen=			"&dsAbandonedShip;"
			dockingPorts=		"4"
			scale=				"ship"
			mobile=				"true"
			noMapIcon=			"true"
			radioactive=		"true"

			attributes=			"debris,friendly,shipwreck"
			levelFrequency=		"-rccc urv-- ----- ----- -----"
			locationCriteria=	"-planetary"

			ejectaType=			"&vtWreckEjecta;"
			>
		<Image shipwreckID="&scPlague;, &scEI100;, &scRevelations;"/>

		<Items>
			<Table count="1d4">
				<Null	chance="5"/>
				<Item   chance="13"	count="1d4" item="&itHeavyWater;"/>
				<Item	chance="10"	count="1d4" item="&itFusionTrigger;"/>
				<Item	chance="10"	count="1d4"	item="&itRadioactiveWaste;"/>
				<Item	chance="15"	count="1d4"	item="&itHardenedReactiveArmor;"/>
				<Item	chance="6"	count="1d4" item="&itHardenedPlasteelPlate;"/>
				<Lookup chance="5"  count="1d3" table="&trConsumables3;"/>
				<Lookup chance="10" count="1"	table="&trConsumables4;"/>
				<Lookup chance="10" count="1"	table="&trConsumables5;"/>
				<Lookup chance="5"  count="1"	table="&trMinorItem3;"/>
				<Lookup chance="5"  count="1"	table="&trMinorItem4;"/>
				<Lookup chance="3"  count="1"	table="&trMajorItem3;"/>
				<Lookup chance="3"  count="1"	table="&trMajorItem4;"/>
			</Table>
		</Items>

		<Events>
			<GetExplosionType>
				(intContainerGetExplosionType gSource)
			</GetExplosionType>

			<OnDamage>
				(intContainerOnDamage gSource aDamageHP)
			</OnDamage>
		</Events>

	</StationType>

	<!-- ADVENTURE -->
	
	<AdventureDesc
			unid=			"&adPart1Desc;"
			name=			"Transcendence Part I: The Stars of the Pilgrim"
			backgroundID=	"&rsPart1Cover;"
			
			startingShipCriteria="* -notInPartI"
			>
	</AdventureDesc>

<!-- Modules ============================================================== -->

	<Modules>
		<Module filename="AresOrthodoxy.xml"/>
		<Module filename="BlackMarket.xml"/>
		<Module filename="CentauriWarlords.xml"/>
		<Module filename="CharonPirates.xml"/>
		<Module filename="Commonwealth.xml"/>
		<Module filename="CommonwealthFleet.xml"/>
		<Module filename="CorporateHierarchy.xml"/>
		<Module filename="DwargRaiders.xml"/>
		<Module filename="EncountersVol01.xml"/>
		<Module filename="Huari.xml"/>
		<Module filename="Iocrym.xml"/>
		<Module filename="KorolovShipping.xml"/>
		<Module filename="Luminous.xml"/>
		<Module filename="MiscItems.xml"/>
		<Module filename="OutlawMiners.xml"/>
		<Module filename="StdArmor.xml"/>
		<Module filename="StdAutons.xml"/>
		<Module filename="StdDevices.xml"/>
		<Module filename="StdExplosions.xml"/>
		<Module filename="StdShields.xml"/>
		<Module filename="StdWeapons.xml"/>
		<Module filename="SungSlavers.xml"/>
		<Module filename="UrakWarlords.xml"/>
		<Module filename="UsefulItems.xml"/>
	</Modules>

</TranscendenceUniverse>
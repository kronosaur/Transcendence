<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

<!-- INSTALL DEVICE SCREEN =====================================================

	This screen asks the user to pick a device from a list of itemStructs and
	then installs the device (charging appropriately).

	gData uses the following fields:

	itemList:			This is a list of device itemStructs that we should 
						offer to install for the player.

	priceAdj:			A percent of standard price to charge. If Nil, we use
						the source's Trade directives. If an integer, we treat
						it as a % price adjustment (100 = 100% of price). If a
						function, we evaluate it to determine the price.

	installPriceAdj:	The price to install the device. If Nil, we use the 
						item's default install price. If an integer, we treat it
						as a % price adjustment. If a function, we evaluate it
						to determine the price.

	checkMilitaryID:	If True we check to make sure the player has a military
						ID before selling them a military reactor.

	noItemsText:		Text to show if itemList is empty

-->

	<DockScreen UNID="&dsRPGInstallDeviceFromList;"
			type=           "customItemPicker"
			backgroundID=   "&rsItemListScreen;"
			nestedScreen=   "true"
			>

        <List>
			(@ gData 'itemList)
        </List>

        <Panes>
            <Default>
                <onPaneInit>
					(block (result)
						(setq gItem (scrGetItem gScreen))

						(if gItem
							(block (result)
								(setq gCost
									(add
										(rpgAdjustPrice gSource gItem (@ gData 'priceAdj) (objGetDefaultCurrency gSource) 'noInventoryCheck)
										(rpgAdjustInstallPrice gSource gItem (@ gData 'installPriceAdj) (objGetDefaultCurrency gSource))
										)
									)

								(setq result (rpgInstallDevicePrep
									{
									item: gItem
									totalPrice: gCost
									currencyUsed: (objGetDefaultCurrency gSource)
									checkMilitaryID: (@ gData 'checkMilitaryID)
									}))

								(scrSetDesc gScreen (@ result 'desc))
								(scrEnableAction gScreen 0 (@ result 'canInstall))
								)

							; No items in list
							(block Nil
								(scrSetDesc gScreen
									(if (@ gData 'noItemsText)
										(@ gData 'noItemsText)
										"You cannot install any items."
										)
									)
								(scrEnableAction gScreen 0 Nil)
								)
							)
						)
                </onPaneInit>

                <Actions>
                    <Action name="Buy &amp; Install this item" default="1" key="B">
						(block Nil
							(rpgBuyItem gSource gItem gCost (objGetDefaultCurrency gSource))
							(shpInstallDevice gPlayerShip gItem)
							(scrShowPane gScreen "InstallSuccess")
							)
                    </Action>

                    <Action name="Cancel" cancel="1" key="C">
                        (scrExitScreen gScreen)
                    </Action>
                </Actions>
            </Default>

			<InstallSuccess
					noListNavigation="true"
					>
				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen
							(cat (itmGetName gItem 0x01) " installed successfully.")
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</InstallSuccess>
        </Panes>
    </DockScreen>

<!-- JETTISON SCREEN ===========================================================

	This screen allows the player to jettison items either to the docked object
	or to a crate in space.

-->

	<DockScreen UNID="&dsRPGJettison;"
			name=				"Ship's Cargo Hold"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=	"There are no items in your cargo hold that can be jettisoned.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))

						(if thisItem
							(block (availCount fitCount)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gSource thisItem))
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(if (ls (objGetCargoSpaceLeft gSource) 200000)
									(setq desc (cat desc "\nCapacity: " (strMassString (objGetCargoSpaceLeft gSource))))
									)

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "\n\nThere is not enough space here to jettison " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "\n\nThere is enough space to jettison one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "\n\nThere is enough space to jettison only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "\n\nThere is enough space to jettison all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison this Item" default="1" key="J" >
						(switch
							(gr gMaxCount 1)
								(scrShowPane gScreen "JettisonQuantity")

							(eq gMaxCount 1)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen 1))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>

			<JettisonQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to jettison?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Jettison" default="1" key="J">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToJettison)
									; Dump items
									(setq itemsToJettison (scrRemoveItem gScreen count))
									(intJettisonItem gSource itemsToJettison)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>
				</Actions>
			</JettisonQuantity>
		</Panes>
	</DockScreen>

<!-- LOOT SCREEN ===============================================================

	This screen allows the player to loot items from the object that we're 
	docked with.

	gData uses the following fields:

	nextScreen:			If specified, we navigate to the given screen when we're
						done. This may also be a list consisting of a screen and
						a pane.
-->

	<DockScreen UNID="&dsRPGLoot;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*U"
			/>

		<Panes>
			<Default
					desc=		"There are no items here.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (fitCount availCount desc)
								(setq availCount (itmGetCount thisItem))
								(setq fitCount (objGetFitCount gPlayerShip thisItem))
								
								(setq gMaxCount (min availCount fitCount))

								(setq desc (cat "Unit mass: " (strMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (strMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You do not have enough space to carry " (itmGetName thisItem 4) "."))
									(eq gMaxCount 1)
										(setq desc (cat desc "You have enough room to carry one " (itmGetName thisItem 0) "."))
									(gr availCount fitCount)
										(setq desc (cat desc "You have enough room to carry only " fitCount " " (itmGetName thisItem 2) "."))
									(setq desc (cat desc "You have enough room to carry all " (itmGetName thisItem 8) "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot this Item" key="L" default="1" >
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "LootQuantity")
							(if (eq gMaxCount 1)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(block Nil
							(scrExitScreen gScreen)

							(if (@ gData 'nextScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>

				</Actions>
			</Default>

			<LootQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to loot?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Loot" default="1" key="L">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToLoot)
									(setq itemsToLoot (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToLoot)
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</LootQuantity>
		</Panes>

	</DockScreen>

<!-- MESSAGE SCREEN ============================================================

	This screen is used to show a simple message.

	gData uses the following fields:

	desc: The text to display.

	nextScreen:	If specified, we navigate to the given screen when we're done
			This may also be a list consisting of a screen and a pane.

			If nextScreen is equal to 'forceUndock, then we force undock when we
			exit.

	textID: If specified, we obtain the text to display by asking gSource to
			translate the ID. (desc is ignored.)

-->

	<DockScreen UNID="&dsRPGMessage;"
			nestedScreen=		"true"
			>
		<Panes>
			<Default>
				<OnPaneInit>
					(switch
						(@ gData 'textID)
							(scrSetDesc gScreen (objTranslate gSource (@ gData 'textID)))

						(scrSetDesc gScreen (@ gData 'desc))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Continue" key="C" default="1" cancel="1">
						(switch
							(not (@ gData 'nextScreen))
								(scrExitScreen gScreen)

							(eq (@ gData 'nextScreen) 'forceUndock)
								(scrExitScreen gScreen 'forceUndock)

							(block Nil
								(scrExitScreen gScreen)
								(scrShowScreen gScreen (@ gData 'nextScreen))
								)
							)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- REFUEL SCREEN =============================================================

	This screen allows the player to refuel from a station. It requires the
	station to use the <Refuel> directive in its <Trade> section.

-->

	<DockScreen UNID="&dsRPGRefuel;"
			nestedScreen="true"
			>

		<Panes>
			<Default
					showCounter=	"true">

				<OnPaneInit>
					(block (maxAfford currencyUsed fuelToUse)
						(setq currencyUsed (objGetDefaultCurrency gSource))

						(setq fuelToUse (objGetRefuelItemAndPrice gSource gPlayerShip))
						(setq gItem (@ fuelToUse 0))
						(setq gCost (@ fuelToUse 1))
						
						(if fuelToUse
							(setq gMaxCount (shpGetFuelNeeded gPlayerShip gItem))
							(setq gMaxCount 0)
							)

						(if (gr gCost 0)
							(setq maxAfford (divide (objGetBalance gPlayerShip currencyUsed) gCost))
							)

						(switch
							(not fuelToUse)
								(block Nil
									(setq gMaxCount 0)
									(scrSetDesc gScreen (cat "This refueling facility does not have fuel compatible with your ship's reactor."))
									)

							(eq gCost 0)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "Your ship is does not need any fuel.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Your ship needs one " (itmGetName gItem 0) " to refuel. We can refuel you free of charge."))
									(scrSetDesc gScreen (cat "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. We can refuel you free of charge. How many do you wish to use?"))
									)

							(geq maxAfford gMaxCount)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "Your ship is does not need any fuel.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Your ship needs one " (itmGetName gItem 0) " to refuel for a total cost of " (fmtCurrency currencyUsed gCost) "."))
									(scrSetDesc gScreen (cat "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. Each " (itmGetName gItem 0) " costs " (fmtCurrency currencyUsed gCost) " (" (fmtCurrency currencyUsed (multiply gCost gMaxCount)) " total). How many do you wish to buy?"))
									)

							(block Nil
								(setq gMaxCount maxAfford)
								(switch
									(eq gMaxCount 0)
										(scrSetDesc gScreen "You cannot afford to refuel your ship.")
									(eq gMaxCount 1)
										(scrSetDesc gScreen (cat "Each " (itmGetName gItem 0) " costs " (fmtCurrency currencyUsed gCost) ". You can only afford a single one."))
									(scrSetDesc gScreen (cat "Each " (itmGetName gItem 0) " costs " (fmtCurrency currencyUsed gCost) ". You can only afford " gMaxCount " " (itmGetName gItem 2) ". How many do you wish to buy?"))
									)
								)
							)

						(scrSetCounter gScreen gMaxCount)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								
								(block (itemsToUse currencyUsed)
									(setq itemsToUse (itmCreate (itmGetType gItem) count))
									(setq currencyUsed (objGetDefaultCurrency gSource))
									
									(shpRefuelFromItem gPlayerShip itemsToUse)
									
									(objCharge gPlayerShip currencyUsed (multiply count gCost))
									(plyRecordBuyItem gPlayer itemsToUse currencyUsed (multiply count gCost))
									
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- REPAIR ARMOR SCREEN =======================================================

	This screen allows the player to repair armor at a station. It requires the
	station to use the <RepairArmor> directive in its <Trade> section.

	gData uses the following fields:

	'checkMilitaryID: If True, we should check for a military ID.

-->

	<DockScreen UNID="&dsRPGRepairArmor;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(block (
				(desiredSeg (scrGetData gScreen 'armorSeg))
				(seg (itmGetArmorInstalledLocation (scrGetItem gScreen)))
				)

				(or (not desiredSeg) (eq seg desiredSeg))
				)"
			/>

		<Panes>
			<Default>
				<OnPaneInit>
					(block (currencyUsed damage desc theArmor canRepair)
						(setq theArmor (scrGetItem gScreen))
						(setq damage (objGetArmorDamage gPlayerShip theArmor))
						(setq maxHP (shpGetArmorMaxHitPoints gPlayerShip theArmor))

						; Remember the armor segment so that we can come back to 
						; this same selection (e.g., when we go to replace armor)

						(scrSetData gScreen 'armorSeg (itmGetArmorInstalledLocation theArmor))

						; Ask the station to compute the cost of repairing the given hit points

						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gCost (objGetArmorRepairPrice gSource theArmor damage))

						; Compose repair message for this segment

						(setq desc (cat "The ship's " (objGetArmorName gPlayerShip theArmor) " " (itmGetName theArmor 0)))
						(setq canRepair True)

						(switch
							(eq damage 0)
								(block Nil
									(setq desc (cat desc " is not damaged."))
									(setq canRepair Nil)
									)

							(and (not gCost)
									(gr (itmGetLevel theArmor) (objGetProperty gSource 'repairArmorMaxLevel)))
								(block Nil
									(setq desc (cat desc " cannot be repaired. The technology required is not available at this station."))
									(setq canRepair Nil)
									)

							(not gCost)
								(block Nil
									(setq desc (cat desc " cannot be repaired at this station."))
									(setq canRepair Nil)
									)

							(ls (subtract maxHP damage) (divide maxHP 4))
								(block Nil
									(setq desc (cat desc " is heavily damaged and cannot be repaired."))
									(setq canRepair Nil)
									)

							(ls (objGetBalance gPlayerShip currencyUsed) gCost)
								(block Nil
									(setq desc (cat desc " can be repaired for " (fmtCurrency currencyUsed gCost) ", which, unfortunately, is more than you can afford."))
									(setq canRepair Nil)
									)

							(eq gCost 0)
								(setq desc (cat desc " is damaged and can be repaired free of charge."))

							(setq desc (cat desc " is damaged and will cost " (fmtCurrency currencyUsed gCost) " to repair."))
							)

						; Initialize the pane

						(scrSetDesc gScreen desc)
						(scrEnableAction gScreen 0 canRepair)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair" key="R" >
						(block Nil
							(objRepairArmor gPlayerShip (scrGetItem gScreen))
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							(scrShowPane gScreen "Default")
							)
					</Action>

					<Action name="Replace" key="P" >
						(scrShowScreen gScreen &dsRPGReplaceArmor; {
							armorSeg: (scrGetData gScreen 'armorSeg)
							checkMilitaryID: (@ gData 'checkMilitaryID)
							})
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- REPLACE ARMOR SCREEN ======================================================

	This screen allows the player to refuel from a station. It requires the
	station to use the <Refuel> directive in its <Trade> section.

	gData uses the following fields:

	'armorSeg: The armor segment to replace on the player
	'checkMilitaryID: If True, we should check for a military ID before 
			installing Military armor. We also refuse to install Illegal armor.

-->

	<DockScreen UNID="&dsRPGReplaceArmor;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			/>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<OnPaneInit>
					(block (thisItem canInstall currencyUsed armorSeg)
						(setq armorSeg (@ gData 'armorSeg))
						(setq thisItem (scrGetItem gScreen))
						(setq canInstall True)
						(setq currencyUsed (objGetDefaultCurrency gSource))
						
						(if thisItem
							(block (desc cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem))
								(setq gCost (objGetArmorReplacePrice gSource thisItem))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip armorSeg)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " are too heavy for your ship's hull."))
											(setq canInstall Nil)
											)

									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Military")
											(not (objGetItems gPlayerShip "*+MilitaryID"))
											)
										(block Nil
											(setq desc (cat "You must have a military ID to install " (itmGetName thisItem 0x80) "."))
											(setq canInstall Nil)
											)
											
									(and (@ gData 'checkMilitaryID) 
											(itmHasModifier thisItem "Illegal")
											)
										(block Nil
											(setq desc "We do not install illegal armor segments.")
											(setq canInstall Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(setq desc gResult)
											(setq canInstall Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)

									(not gCost)
										(block Nil
											(setq desc "This armor segment cannot be installed at this station.")
											(setq canInstall Nil)
											)

									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)

									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(block Nil
											(setq desc (cat "This armor segment can be installed for " (fmtCurrency currencyUsed gCost) ". Unfortunately, you cannot afford this cost."))
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc "This armor segment can be installed free of charge.")

									(setq desc (cat "This armor segment can be installed for " (fmtCurrency currencyUsed gCost) "."))
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen "You do not have any armor segments in your cargo hold.")
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Install this Armor" default="1" key="I" >
						(block (thisItem currencyUsed)
							(setq thisItem (scrGetItem gScreen))
							(setq currencyUsed (objGetDefaultCurrency gSource))

							(if (and thisItem (geq (objGetBalance gPlayerShip currencyUsed) gCost))
								(block Nil
									(shpInstallArmor gPlayerShip thisItem (@ gData 'armorSeg))
									(objCharge gPlayerShip currencyUsed gCost)
									
									(scrExitScreen gScreen)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrExitScreen gScreen)
					</Action>
				</Actions>
			</Default>
		</Panes>
	</DockScreen>

<!-- REPAIR ITEM SCREEN ========================================================

	This screen allows the player to repair an item.

	gData uses the following fields:

	criteria:			This is the criteria for items that we can repair.

	priceAdj:			Cost to repair the item as a percent of the standard
						repair price. The standard repair price is equal to the
						difference between the full price and the price of a
						damaged item.

-->
	<DockScreen UNID="&dsRPGRepairItem;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			nestedScreen=		"true"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(scrSetListFilter gScreen (@ gData 'criteria))
		</ListOptions>

		<Panes>
			<Default
					desc=	"You do not have any items that we can repair.">

				<OnPaneInit>
					(block (thisItem currencyUsed)
						(setq thisItem (scrGetItem gScreen))
						(setq currencyUsed (objGetDefaultCurrency gSource))
						(setq gResult Nil)

						(if thisItem
							(block (desc stdRepairCost)
								; Compute the standard repair cost
								(setq stdRepairCost (subtract (itmGetPrice (itmSetProperty thisItem 'damaged Nil) currencyUsed) (itmGetPrice thisItem currencyUsed)))

								; Compute the cost to repair the item
								(setq gCost (divide (multiply stdRepairCost (@ gData 'priceAdj)) 100))

								(switch
									(gr gCost (objGetBalance gPlayerShip currencyUsed))
										(setq desc (cat "It will cost " (fmtCurrency currencyUsed gCost) " to repair " (itmGetName thisItem 0x04) ". Unfortunately, you cannot afford the cost."))

									(block Nil
										(setq desc (cat "We can repair " (itmGetName thisItem 0x04) " for " (fmtCurrency currencyUsed gCost) "."))
										(setq gResult True)
										)
									)

								(scrSetDesc gScreen desc)
								)
							)

						(scrEnableAction gScreen 0 gResult)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair Item" default="1" key="R">
						(block Nil
							(setq gItem (scrGetItem gScreen))
							
							(shpEnhanceItem gPlayerShip gItem)
							(objCharge gPlayerShip (objGetDefaultCurrency gSource) gCost)
							
							(scrShowPane gScreen "Success")
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>

			</Default>

			<Success
					noListNavigation="true"
					>
				<OnPaneInit>
					(scrSetDesc gScreen (cat "Your " (itmGetName gItem 0) " has been repaired successfully."))
				</OnPaneInit>

				<Actions>
					<Action name="Continue" default="1" cancel="1" key="C">
                        (scrExitScreen gScreen)
					</Action>
				</Actions>
			</Success>
		</Panes>

	</DockScreen>

</TranscendenceModule>

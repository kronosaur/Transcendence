<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>

	<!-- Ringer Buy
	
		OBSOLETE: This screen is deprecated. Use the scrShowBuyScreen function with an
		appropriate <Trade> element that uses rin.

		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane
				to navigate to when done.
		gMargin: Function that calculate the value of an item

		-->

	<DockScreen UNID="&dsRingerBuy;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"station"
			list=		"*"
			>
			(if (isfunction gMargin)
				(scrSetListFilter gScreen gMargin)
				(scrSetListFilter gScreen "*NU -Res; -RingerValuable;")
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc fitCount rins)

								(setq rins (objGetData gPlayerShip "rins"))

								; Compute the cost of the item the exchange rate
								; is at 5 credits per rin
								(if (isfunction gMargin)
									(setq gCost (int (apply gMargin thisItem Nil)))
									(setq gCost (int (intRingerBuyMargin thisItem)))
									)
									
								(if (not gCost)
									(setq gCost 0)
									)

								(setq availCount (itmGetCount thisItem))

								(if (gr gCost 0)
									(setq affordCount (divide rins gCost))
									(setq affordCount 0)
									)
								(setq gMaxCount (min availCount affordCount (objGetFitCount gPlayerShip thisItem)))

								; Set the price and description
								(setq desc (cat "Balance: " rins " rin"))
								(setq desc (cat desc "\nUnit price: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " for " (multiply gCost gMaxCount) ")"))
									)

								(setq desc (cat desc "\nUnit mass: " (intMassString (itmGetMass thisItem))))
								(if (gr gMaxCount 1)
									(setq desc (cat desc " (" gMaxCount " at " (intMassString (multiply (itmGetMass thisItem) gMaxCount)) ")"))
									)

								(setq desc (cat desc "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat desc "This item is not for sale."))
									(eq affordCount 0)
										(setq desc (cat desc "You do not have enough rin to purchase any."))
									(eq fitCount 0)
										(setq desc (cat desc "Unfortunately, you cannot fit any in your cargo hold."))
									(and (gr availCount affordCount) (gr fitCount affordCount))
										(setq desc (cat desc "You have enough rin to buy " affordCount "."))
									(and (gr availCount fitCount))
										(setq desc (cat desc "You have enough room in your cargo hold to carry " fitCount "."))
									)

								(scrSetDesc gScreen desc)
								)
							(setq gMaxCount 0)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Buy this Item" default="1" key="B">
						(if (gr gMaxCount 1)
							(scrShowPane gScreen "BuyQuantity")
							(if (eq gMaxCount 1)
								(block Nil
									(setq itemsToBuy (scrRemoveItem gScreen 1))
									(objAddItem gPlayerShip itemsToBuy)
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(plyRecordBuyItem gPlayer itemsToBuy (multiply gCost 5))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<BuyQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to purchase at " gCost " rin each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Buy" default="1" key="B">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block Nil
									(setq itemsToBuy (scrRemoveItem gScreen count))
									(objAddItem gPlayerShip itemsToBuy)
									(objIncData gPlayerShip "rins" (subtract 0 (multiply count gCost)))
									(plyRecordBuyItem gPlayer itemsToBuy (multiply count gCost 5))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</BuyQuantity>
		</Panes>

	</DockScreen>

	<!-- Ringer Install device screen

		OBSOLETE: This screen is deprecated. Use the dsInstallDevice screen with an
		appropriate <Trade> element that uses rin.
		
		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gTechLevel: Tech level at which station installs
		gTechModifier: Can install if item has given modifier
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
		gMargin: Surcharge/discount percent
	-->

	<DockScreen UNID="&dsRingerInstallDevice;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dUN"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to install.">

				<OnPaneInit>
					(block Nil
						(intRingerInstallDevicePrep (scrGetItem gScreen) Nil True)

						; Disable actions
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Install this Device" default="1" key="I">
						(if gCanInstall
							(block Nil
								(shpInstallDevice gPlayerShip (scrGetItem gScreen))
								(objIncData gPlayerShip "rins" (subtract 0 gCost))
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Install a specific device

		gPrevScreen: Must be set to the name/UNID of the screen to
				navigate to when done.
		gPrevPane: Must be set to the name of the pane to navigate
				to when done.
		gItem: Item to install
		gCost: Cost of installation
		gCheckMilitaryID: If True, this screen does not allow installing
				military weapons without an ID
	-->

	<DockScreen UNID="&dsRingerInstallSpecificDevice;">

		<Panes>
			<Default>

				<OnPaneInit>
					(block (desc okToInstall)
						(setq gTechLevel 25)
						(setq gTechModifier Nil)
						(intRingerInstallDevicePrep gItem gCost Nil)

						; Enable/disable buttons
						(scrEnableAction gScreen 0 gCanInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Install this Device" default="1" key="I">
						(if gCanInstall
							(block Nil
								; Install the new items
								(objAddItem gPlayerShip gItem)
								(shpInstallDevice gPlayerShip gItem)
								(objIncData gPlayerShip "rins" (subtract 0 gCost))

								(setq gResult True)
								(scrShowScreen gScreen gPrevScreen gPrevPane)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(block Nil
							(setq gResult Nil)
							(scrShowScreen gScreen gPrevScreen gPrevPane)
							)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Refuel

		OBSOLETE: This screen is deprecated. Use the dsRefuel screen with an
		appropriate <Trade> element that uses rin.
		
		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane to
				navigate to when done.
		gCost: This is the cost of one fuel rod (in rins)
		gItem: Fuel item to refuel with

		-->

	<DockScreen UNID="&dsRingerRefuel;">

		<Panes>
			<Default
					showCounter=	"true">

				<OnPaneInit>
					(block (desc maxAfford rins)
						(setq rins (objGetData gPlayerShip "rins"))
						(setq gMaxCount (shpGetFuelNeeded gPlayerShip gItem))
						(setq maxAfford (divide rins gCost))

						; Set the description

						(setq desc (cat "Balance: " rins " rin"))
						(setq desc (cat desc "\nUnit price: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
						(if (gr gMaxCount 1)
							(setq desc (cat desc " (" gMaxCount " for " (multiply gCost gMaxCount) ")"))
							)

						(setq desc (cat desc "\n\n"))

						; Figure out how much we need/can afford

						(switch
							(not (shpIsFuelCompatible gPlayerShip gItem))
								(block Nil
									(setq gMaxCount 0)
									(setq desc (cat desc "This refueling facility uses " (itmGetName gItem 2) ", which are not compatible with your ship's reactor."))
									)

							(geq maxAfford gMaxCount)
								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "Your ship is does not need any fuel."))
									(eq gMaxCount 1)
										(setq desc (cat desc "Your ship needs one " (itmGetName gItem 0) " to refuel for a total cost of " gCost " rin."))
									(setq desc (cat desc "Your ship needs " gMaxCount " " (itmGetName gItem 2) " to refuel. Each " (itmGetName gItem 0) " costs " gCost " rin (" (multiply gCost gMaxCount) " rin total). How many do you wish to buy?"))
									)

							(block Nil
								(setq gMaxCount maxAfford)
								(switch
									(eq gMaxCount 0)
										(setq desc (cat desc "You cannot afford to refuel your ship."))
									(eq gMaxCount 1)
										(setq desc (cat desc "Each " (itmGetName gItem 0) " costs " gCost " rin. You can only afford a single one."))
									(setq desc (cat desc "Each " (itmGetName gItem 0) " costs " gCost " rin. You can only afford " gMaxCount " " (itmGetName gItem 2) ". How many do you wish to buy?"))
									)
								)
							)

						(scrSetDesc gScreen desc)
						(scrSetCounter gScreen gMaxCount)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (gr gMaxCount 0))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Refuel" default="1" key="R">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToUse)
									(setq itemsToUse (itmCreate (itmGetType gItem) count))
									(shpRefuelFromItem gPlayerShip itemsToUse)
									(objIncData gPlayerShip "rins" (subtract 0 (multiply count gCost)))
									(plyRecordBuyItem gPlayer itemsToUse (multiply count gCost 5))
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>
		</Panes>
	</DockScreen>

	<!-- Ringer Remove device screen -->

	<DockScreen UNID="&dsRingerRemoveDevice;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"dI"
			/>

		<Panes>
			<Default
					desc=	"Pick a device to remove.">

				<OnPaneInit>
					(block (thisItem desc)
						(setq thisItem (scrGetItem gScreen))
						(setq rins (objGetData gPlayerShip "rins"))

						(setq desc (cat "Balance: " rins " rin\n\n"))

						(if thisItem
							(block Nil
								(setq gResult (shpCanRemoveDevice gPlayerShip thisItem))

								; Half the price of install cost
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 1000))

								(switch
									(eq gResult 1)
										(block Nil
											(scrSetDesc gScreen "Your ship has too much cargo to be able to remove the cargo expansion.")
											(setq thisItem Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(scrSetDesc gScreen gResult)
											(setq thisItem Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(scrSetDesc gScreen "The device cannot be removed.")
											(setq thisItem Nil)
											)

									(gr (itmGetMass thisItem) (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(scrSetDesc gScreen "This device cannot be removed because there is no room in your cargo hold to store it.")
											(setq thisItem Nil)
											)

									(ls rins gCost)
										(scrSetDesc gScreen (cat desc "This device can be removed from your ship for " gCost " rin. Unfortunately, you cannot afford the cost."))

									(eq gCost 0)
										(scrSetDesc gScreen (cat desc "This device can be removed from your ship free of charge."))

									(scrSetDesc gScreen
										(cat desc "This device can be removed from your ship for " gCost " rin.")
										)
									)
								)
							(scrSetDesc gScreen desc "You do not have any devices that can be removed.")
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0
							(and thisItem (geq rins gCost))
							)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Remove this Device" default="1" key="R">
						(block (dsDryDock thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (objGetData gPlayerShip "rins") gCost))
								(block Nil
									(shpRemoveDevice gPlayerShip (scrGetItem gScreen))
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(scrShowScreen gScreen gPrevScreen gPrevPane)
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Repair armor 

		gPrevScreen: Previous screen
		gPrevPane: Previous pane
		gTechLevel: Tech level at which armor is repaired
		gArmorSegment: Armor segment being repaired/replaced (0-3)
		gMargin: Cost multiplies (100 = no adjustment; <100 = discount; >100 = surcharge)

	-->

	<DockScreen UNID="&dsRingerRepairArmor;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aI"

			initialItem="=(eq (itmGetArmorInstalledLocation (scrGetItem gScreen)) gArmorSegment)"
			/>

		<Panes>

			<Default
					desc=	"">

				<OnPaneInit>
					(block (type damage desc rins)
						(setq gArmorSegment (itmGetArmorInstalledLocation (scrGetItem gScreen)))
						(setq type (objGetArmorType gPlayerShip gArmorSegment))
						(setq damage (objGetArmorDamage gPlayerShip gArmorSegment))
						(setq maxHP (shpGetArmorMaxHitPoints gPlayerShip gArmorSegment))
						(setq gCanRepair True)
						(setq gCost (multiply damage (armGetRepairCost type)))
						(setq gCost (divide (multiply gMargin gCost) 500))
						(setq gCost (if (eq gCost 0) 1 gCost))
						(setq rins (objGetData gPlayerShip "rins"))

						(setq desc (cat "Balance: " rins " rin\n\n"))
						(setq desc (cat desc "The ship's " (objGetArmorName gPlayerShip gArmorSegment) " " (armGetName type)))

						(switch
							(eq damage 0)
								(block Nil
									(setq desc (cat desc " is not damaged."))
									(setq gCanRepair Nil)
									)
							(gr (armGetRepairTech type) gTechLevel)
								(block Nil
									(setq desc (cat desc " cannot be repaired. The technology required is not available to the Ringers."))
									(setq gCanRepair Nil)
									)
							(ls rins gCost)
								(block Nil
									(setq desc (cat desc " can be repaired for " gCost " rin, which, unfortunately, is more than you can afford."))
									(setq gCanRepair Nil)
									)
							(eq gCost 0)
								(setq desc (cat desc " is damaged and can be repaired free of charge."))

							(setq desc (cat desc " is damaged and will cost " gCost " rin to repair."))
							)
						(scrSetDesc gScreen desc)

						; Disable actions if we cannot repair
						(scrEnableAction gScreen 0 gCanRepair)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Repair" key="R" >
						(if gCanRepair
							(block Nil
								(objRepairArmor gPlayerShip gArmorSegment)
								(objIncData gPlayerShip "rins" (subtract 0 gCost))
								(scrShowPane gScreen "Default")
								)
							)
					</Action>

					<Action name="Replace" key="P" >
						(scrShowScreen gScreen "&dsRingerReplaceArmor;")
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Replace armor screen -->

	<DockScreen UNID="&dsRingerReplaceArmor;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"aU"
			/>

		<Panes>
			<Default
					desc=	"Pick an armor segment to install.">

				<OnPaneInit>
					(block (thisItem canInstall rins desc)
						(setq thisItem (scrGetItem gScreen))
						(setq canInstall True)
						(setq rins (objGetData gPlayerShip "rins"))

						(setq desc (cat "Balance: " rins " rin\n\n"))

						(if thisItem
							(block (cargoNeeded)
								(setq gResult (shpCanInstallArmor gPlayerShip thisItem))
								(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 500))
								(setq cargoNeeded (subtract (itmGetMass (shpGetArmor gPlayerShip gArmorSegment)) (itmGetMass thisItem)))

								(switch
									(eq gResult 1)
										(block Nil
											(setq desc (cat (itmGetName thisItem 3) " is too heavy for your ship's hull."))
											(setq canInstall Nil)
											)
											
									(not (isint gResult))
										(block Nil
											(setq desc gResult)
											(setq canInstall Nil)
											)

									(not (eq gResult 0))
										(block Nil
											(setq desc "This armor segment cannot be installed.")
											(setq canInstall Nil)
											)

									(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
										(block Nil
											(setq desc "There is no room in your cargo hold to store the old armor segment.")
											(setq canInstall Nil)
											)

									(gr gCost rins)
										(block Nil
											(setq desc (cat desc "This armor segment can be installed for " gCost " rin. Unfortunately, you cannot afford this cost."))
											(setq canInstall Nil)
											)

									(eq gCost 0)
										(setq desc (cat desc "This armor segment can be installed free of charge."))

									(setq desc (cat desc "This armor segment can be installed for " gCost " rin."))
									)

								(scrSetDesc gScreen desc)
								)

							(block Nil
								(scrSetDesc gScreen (cat desc "You do not have any armor segments in your cargo hold."))
								(setq canInstall Nil)
								)
							)

						(scrEnableAction gScreen 0 canInstall)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Install this Armor" default="1" key="I" >
						(block (thisItem)
							(setq thisItem (scrGetItem gScreen))

							(if (and thisItem (geq (objGetData gPlayerShip "rins") gCost))
								(block Nil
									(shpInstallArmor gPlayerShip (scrGetItem gScreen) gArmorSegment)
									(objIncData gPlayerShip "rins" (subtract 0 gCost))
									(scrShowScreen gScreen "&dsRingerRepairArmor;")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<Navigate screen="&dsRingerRepairArmor;"/>
					</Action>

				</Actions>

			</Default>

		</Panes>

	</DockScreen>

	<!-- Ringer Sell

		OBSOLETE: This screen is deprecated. Use the scrShowSellScreen function with an
		appropriate <Trade> element that uses rin.

		gPrevScreen, gPrevPane: Must be set to the name/UNID of the screen/pane
				to navigate to when done.
		gMargin: Function to compute price

		-->

	<DockScreen UNID="&dsRingerSell;"
			type=				"itemPicker"
			backgroundID=		"&rsItemListScreen;"
			>

		<ListOptions
			dataFrom=	"player"
			list=		"*"
			>
			(if (isfunction gMargin)
				(scrSetListFilter gScreen gMargin)
				(scrSetListFilter gScreen intRingerSellMargin)
				)
		</ListOptions>

		<Panes>
			<Default
					desc=			"There are no items here.">

				<OnPaneInit>
					(block (thisItem)
						(setq thisItem (scrGetItem gScreen))
						(if thisItem
							(block (affordCount availCount desc priceText rins)
								(setq rins (objGetData gPlayerShip "rins"))

								; Compute the cost
								(if (isfunction gMargin)
									(setq gCost (int (apply gMargin thisItem Nil)))
									(setq gCost (int (intRingerSellMargin thisItem)))
									)
									
								(if (not gCost)
									(setq gCost 0)
									)

								(setq availCount (itmGetCount thisItem))
								(setq gMaxCount availCount)

								; Set the price and description
								(setq priceText (cat "Balance: " rins " rin"))
								(if (gr gCost 0)
									(block Nil
										(setq priceText (cat priceText "\nUnit offer: " (if (eq gCost 0) "N/A" (cat gCost " rin"))))
										(if (gr availCount 1)
											(setq priceText (cat priceText " (" availCount " for " (multiply gCost availCount) ")"))
											)

										(setq priceText (cat priceText "\nUnit mass: " (intMassString (itmGetMass thisItem))))
										(if (gr availCount 1)
											(setq priceText (cat priceText " (" availCount " at " (intMassString (multiply (itmGetMass thisItem) availCount)) ")"))
											)
										)
									)

								(setq priceText (cat priceText "\n\n"))

								(switch
									(eq gCost 0)
										(setq desc (cat priceText "The Collective is not interested in buying " (itmGetName thisItem 2) "."))
									(eq availCount 1)
										(setq desc (cat priceText "The Collective offers " gCost " rin for your " (itmGetName thisItem 0) "."))
									(setq desc (cat priceText "The Collective offers " gCost " rin for each " (itmGetName thisItem 0) "."))
									)

								(scrSetDesc gScreen desc)
								)
								
							; If there are no items, then set to 0
							
							(block Nil
								(setq gCost 0)
								(setq gMaxCount 0)
								)
							)

						; Enable/disable actions
						(scrEnableAction gScreen 0 (and (gr gCost 0) (gr gMaxCount 0)))
						)
				</OnPaneInit>

				<Actions>
					<Action name="Sell this Item" default="1" key="S">
						(if (gr gCost 0)
							(if (gr gMaxCount 1)
								(scrShowPane gScreen "SellQuantity")
								(if (eq gMaxCount 1)
									(block (itemsToSell)
										(setq itemsToSell (scrRemoveItem gScreen 1))
										(objAddItem gSource itemsToSell)
										(objIncData gPlayerShip "rins" gCost)
										(plyRecordSellItem gPlayer itemsToSell (multiply gCost 5))
										(scrShowPane gScreen "Default")
										)
									)
								)
							)
					</Action>

					<Action name="Done" cancel="1" key="D">
						(scrShowScreen gScreen gPrevScreen gPrevPane)
					</Action>

				</Actions>

			</Default>

			<SellQuantity
					showCounter=	"true">

				<OnPaneInit>
					(block Nil
						(scrSetDesc gScreen (cat "How many items do you wish to sell at " gCost " rin each?"))
						(scrSetCounter gScreen gMaxCount)
						)
				</OnPaneInit>

				<Actions>
					<Action name="Sell" default="1" key="S">
						(block (count)
							(setq count (scrGetCounter gScreen))
							(if (gr count gMaxCount)
								(scrSetCounter gScreen gMaxCount)
								(block (itemsToSell)
									(setq itemsToSell (scrRemoveItem gScreen count))
									(objAddItem gSource itemsToSell)
									(objIncData gPlayerShip "rins" (multiply count gCost))
									(plyRecordSellItem gPlayer itemsToSell (multiply count gCost 5))
									(scrShowPane gScreen "Default")
									)
								)
							)
					</Action>

					<Action name="Cancel" cancel="1" key="C">
						<ShowPane pane="Default"/>
					</Action>

				</Actions>

			</SellQuantity>
		</Panes>
	</DockScreen>
	
<!-- GLOBALS 

	These global functions are deprecated.
	
-->

	<Globals>
		(block Nil
			(setq intCommonwealthOnInit (lambda (prevScreen)
				; OBSOLETE
				;
				; All the screens that used to be brought up by this function have
				; been redirected to use the GetGlobalDockScreen event. This is left here for any older
				; mods that call it.
				Nil
				))

			(setq intCorporateOnInit (lambda (prevScreen)
				Nil
				))

			(setq intInstallAfterPurchase (lambda (theItem theInstallCriteria theInstallMargin itemCost)
				(block Nil
					(if (and theInstallCriteria (itmMatches theItem theInstallCriteria))
						(block (installCost)
							(setq installCost (divide (multiply theInstallMargin (itmGetInstallCost theItem)) 100))
							(intInstallDevicePrep theItem installCost True True 'gCanInstall2 'gCost2 'gDesc2)
							)
						(setq gCanInstall2 Nil)
						)

					gCanInstall2
					)
				))

			(setq intInstallDevicePrep (lambda (thisItem costToInstall isItemInCargo buyAndInstall varCanInstall varCost varDesc)
			
				; OBSOLETE: Use intInstallDevicePrepEx instead
				;
				; gTechLevel: The max tech level that we will install
				; gTechModifier: If not Nil, only install if item has this modified
				; gCheckMilitaryID: If True, check to make sure player has military ID
				; gMargin: 100 = same as install cost (only if costToInstall is Nil)

				(block (totalCost canInstall desc theResult itemName)
					(setq itemName (itmGetName thisItem (if buyAndInstall 0x40 0x04)))
					(setq canInstall Nil)

					(if thisItem
						(block (cargoNeeded replaceCriteria)
							; Compute the cost to install
							(if costToInstall
								(setq totalCost costToInstall)
								(setq totalCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 100))
								)

							(setq theResult (shpCanInstallDevice gPlayerShip thisItem))
							(setq replaceCriteria Nil)

							(switch
								; If we don't have the technology, we cannot install
								; (except for specific items that we know about)
								(and (gr (itmGetLevel thisItem) gTechLevel)
										(or (not gTechModifier)
											(not (itmHasModifier thisItem gTechModifier)))
										)
									(setq desc (cat "We do not have the technology to install " itemName " on your ship."))

								(and gCheckMilitaryID 
										(itmHasModifier thisItem "Military")
										(not (objGetItems gPlayerShip "*+MilitaryID"))
										)
									(setq desc (cat "You must have a military ID to use " itemName "."))
									
								(and gCheckMilitaryID
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc "We do not install illegal items.")

								(eq theResult 2)
									(setq desc "Your ship cannot support any more devices.")

								(eq theResult 4)
									(block Nil
										(setq desc (cat "We can remove your shield generator and install " itemName))
										(setq replaceCriteria "sI")
										(setq canInstall True)
										)

								(eq theResult 5)
									(block Nil
										(setq desc (cat "We can remove your propulsion system and install " itemName))
										(setq replaceCriteria "vI")
										(setq canInstall True)
										)

								(eq theResult 6)
									(block Nil
										(setq desc (cat "We can remove your missile launcher and install " itemName))
										(setq replaceCriteria "lI")
										(setq canInstall True)
										)

								(eq theResult 7)
									(setq desc "Your ship's reactor is not powerful enough for this device.")

								(eq theResult 8)
									(setq desc "You already have a cargo expansion system installed.")

								(eq theResult 9)
									(block Nil
										(setq desc (cat "We can remove your reactor upgrade and install " itemName))
										(setq replaceCriteria "rI")
										(setq canInstall True)
										)

								(eq theResult 10)
									(setq desc "The cargo expansion system is too large to be installed in your ship.")

								(eq theResult 11)
									(setq desc (cat "The power output of " itemName " is too high for your ship."))

								(eq theResult 12)
									(setq desc "Your ship cannot support any more weapons.")

								(eq theResult 13)
									(setq desc "Your ship cannot support any more non-weapon devices.")

								(not (isint theResult))
									(setq desc theResult)

								(not (eq theResult 0))
									(setq desc "This device cannot be installed.")

								(block Nil
									(setq desc (cat "We can install " itemName " on your ship"))
									(setq canInstall True)
									)
								)

							; If we need to remove a device, then it will cost more

							(setq cargoNeeded 0)
							(if (and canInstall replaceCriteria)
								(objEnumItems gPlayerShip replaceCriteria itemToRemove
									(block Nil
										(if (not costToInstall)
											(setq totalCost 
												(add totalCost 
													; Remove cost is 1/2 of install cost
													(ecoExchange (divide (multiply gMargin (itmGetInstallCost itemToRemove)) 200) (itmGetDefaultCurrency itemToRemove) (itmGetDefaultCurrency thisItem))
													)
												)
											)

										; See how much cargo space we need to store the old item

										(setq cargoNeeded (itmGetMass itemToRemove))
										(if isItemInCargo
											(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
											)
										)
									)
								)

							; See if the item fits

							(if canInstall
								(if (gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
									(block Nil
										(setq desc (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
										(setq canInstall Nil)
										)
									)
								)

							; See if we can afford the installation

							(if canInstall
								(if (gr totalCost 0)
									(if (gr totalCost (plyGetCredits gPlayer))
										(block Nil
											(setq desc (cat desc " for " totalCost " credits. Unfortunately, you cannot afford the cost."))
											(setq canInstall Nil)
											)
										(setq desc (cat desc " for " (if buyAndInstall "an additional " "") totalCost " credits."))
										)
									(setq desc (cat desc " at no charge."))
									)
								)
							)
						(setq desc "You do not have any devices that can be installed.")
						)

					; Return variables
					(set varCanInstall canInstall)
					(set varCost totalCost)
					(set varDesc desc)
					)
				))
				
			(setq intRingerBuyMargin (lambda (thisItem)
				(block (cost)
					(switch
						; We charge extra for Promethium crystals, etc.
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (divide (multiply 110 (itmGetPrice thisItem)) 100))

						; Otherwise, convert to rins
						(setq cost (divide (itmGetPrice thisItem) 5))
						)

					; round up
					(setq cost (multiply (divide (add cost 4) 5) 5))

					(if (gr cost 0)
						cost
						Nil
						)
					)
				))

			(setq intRingerInstallDevicePrep (lambda (thisItem costToInstall isItemInCargo)
				(block (desc rins cargoNeeded)
					(setq gCanInstall Nil)
					(setq rins (objGetData gPlayerShip "rins"))

					(setq desc (cat "Balance: " rins " rin\n\n"))

					(if thisItem
						(block Nil
							(if costToInstall
								(setq gCost costToInstall)
								(block Nil
									(setq gCost (divide (multiply gMargin (itmGetInstallCost thisItem)) 500))

									; Weapons cost twice as much to install
									(if (eq (itmGetCategory thisItem) 4)
										(setq gCost (multiply gCost 2))
										)
									)
								)

							; See if we can install
							(setq gResult (shpCanInstallDevice gPlayerShip thisItem))
							(setq gCriteria Nil)

							(switch
								; If we don't have the technology, we cannot install
								; (except for specific items that we know about)
								(and (gr (itmGetLevel thisItem) gTechLevel)
										(or (not gTechModifier)
											(not (itmHasModifier thisItem gTechModifier)))
										)
									(setq desc (cat desc "We do not have the technology to install " (itmGetName thisItem 4) " on your ship."))

								(and gCheckMilitaryID 
										(itmHasModifier thisItem "Military")
										(not (objGetItems gPlayerShip "*+MilitaryID"))
										)
									(setq desc (cat desc "You must have a military ID to to use " (itmGetName thisItem 4) "."))
									
								(and gCheckMilitaryID
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc "We do not install illegal items.")

								(eq gResult 2)
									(setq desc (cat desc "Your ship cannot support any more devices."))

								(eq gResult 4)
									(block Nil
										(setq desc (cat desc "We can replace your shield generator with " (itmGetName thisItem 4)))
										(setq gCriteria "sI")
										(setq gCanInstall True)
										)

								(eq gResult 5)
									(block Nil
										(setq desc (cat desc "We can replace your propulsion system with " (itmGetName thisItem 4)))
										(setq gCriteria "vI")
										(setq gCanInstall True)
										)

								(eq gResult 6)
									(block Nil
										(setq desc (cat desc "We can replace your missile launcher with " (itmGetName thisItem 4)))
										(setq gCriteria "lI")
										(setq gCanInstall True)
										)

								(eq gResult 7)
									(setq desc (cat desc "Your ship's reactor is not powerful enough for this device."))

								(eq gResult 8)
									(setq desc (cat desc "You already have a cargo expansion system installed."))

								(eq gResult 9)
									(block Nil
										(setq desc (cat desc "We can replace your reactor with " (itmGetName thisItem 4)))
										(setq gCriteria "rI")
										(setq gCanInstall True)
										)

								(eq gResult 10)
									(setq desc (cat desc "The cargo expansion system is too large to be installed in your ship."))

								(eq gResult 11)
									(setq desc (cat desc "The power output of " (itmGetName thisItem 4) " is too high for your ship."))

								(eq gResult 12)
									(setq desc (cat desc "Your ship cannot support any more weapons."))

								(eq gResult 13)
									(setq desc (cat desc "Your ship cannot support any more non-weapon devices."))
									
								(not (isint gResult))
									(setq desc (cat desc gResult))

								(not (eq gResult 0))
									(setq desc (cat desc "This device cannot be installed."))

								(block Nil
									(setq desc (cat desc "We can install " (itmGetName thisItem 4) " on your ship"))
									(setq gCanInstall True)
									)
								)

							; If we have to uninstall an item, then it will cost more

							(setq cargoNeeded 0)
							(if (and gCriteria gCanInstall)
								(objEnumItems gPlayerShip gCriteria itemToRemove
									(block Nil
										(if (not costToInstall)
											(setq gCost (add gCost (divide (multiply gMargin (itmGetInstallCost itemToRemove)) 1000)))
											)

										(setq cargoNeeded (itmGetMass itemToRemove))
										(if isItemInCargo
											(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
											)
										)
									)
								)
								
							; Additional checks
							
							(switch
								; If we already know we can't install, no need to continue
								(not gCanInstall)
									Nil
									
								; See if the item fits
								(gr cargoNeeded (objGetCargoSpaceLeft gPlayerShip))
									(block Nil
										(setq desc (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
										(setq gCanInstall Nil)
										)
										
								; We don't have enough
								(gr gCost rins)
									(block Nil
										(setq desc (cat desc " for " gCost " rin. Unfortunately, you cannot afford the cost."))
										(setq gCanInstall Nil)
										)
								
								; If no cost
								(eq gCost 0)
									(setq desc (cat desc " at no charge."))

								; We have enough
								(setq desc (cat desc " for " gCost " rin."))
								)

							; Done
															
							(scrSetDesc gScreen desc)
							)
						(scrSetDesc gScreen (cat desc "You do not have any devices that can be installed."))
						)
					)
				))

			(setq intRingerSellMargin (lambda (thisItem)
				(block (cost)
					(switch
						; Better not be installed
						(itmIsInstalled thisItem)
							(setq cost 0)

						; We pay extra for Promethium crystals, etc.
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (itmGetPrice thisItem))

						; We buy high-level resources
						(and (itmHasModifier thisItem "Res")
								(geq (itmGetLevel thisItem) 4))
							(setq cost (divide (itmGetPrice thisItem) 8))

						; Otherwise, no sale
						(setq cost 0)
						)

					; Unknown items are discounted
					(if (not (itmIsKnown thisItem))
						(setq cost (divide cost 10))
						)

					(if (gr cost 0)
						cost
						Nil
						)
					)
				))
				
			(setq intRingerOnInit (lambda (prevScreen)
				Nil
				))
				
			(setq intSetCompatibleFuel (lambda (fuelList)
				; This function is deprecated, used only by older mods. Newer
				; mods should use intSetCompatibleFuelEx, which uses a percent
				; value for price.
				(block (fuelFound)
					(setq fuelFound Nil)
					(enumwhile fuelList (not fuelFound) theFuel
						(block Nil
							(setq gItem (itmCreate (item theFuel 0) 1))
							(setq gCost (item theFuel 1))
							(if (shpIsFuelCompatible gPlayerShip gItem)
								(setq fuelFound True)
								)
							)
						)

					fuelFound
					)
				))

			(setq intTaikonBuyMargin (lambda (thisItem)
				(block (cost)
					(switch
						; Better not be installed or damaged
						(or (itmIsInstalled thisItem) (itmIsDamaged thisItem))
							(setq cost 0)

						; 'Taikon' items are cheaper here
						(itmHasModifier thisItem "Taikon")
							(setq cost (divide (multiply (itmGetPrice thisItem) 17) 100))

						; 'RingerValuable' items are expensive
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (divide (multiply (itmGetPrice thisItem) 102) 100))

						; 'Alien' items for 1/4 cost
						(itmHasModifier thisItem "Alien")
							(setq cost (divide (multiply (itmGetPrice thisItem) 25) 100))

						; All other items for 1/5 price
						(setq cost (divide (multiply (itmGetPrice thisItem) 20) 100))
						)

					; round up
					(setq cost (multiply (divide (add cost 4) 5) 5))

					(if (gr cost 0)
						cost
						Nil
						)
					)
				))
				
			(setq intTeratonBuyMargin (lambda (thisItem)
				(block (cost)
					(switch
						; Better not be installed or damaged
						(or (itmIsInstalled thisItem) (itmIsDamaged thisItem))
							(setq cost 0)

						; Player cannot buy 'Soul' items
						(itmHasModifier thisItem "Soul")
							(setq cost 0)

						; 'RingerValuable' items are cheaper here
						(itmHasModifier thisItem "RingerValuable")
							(setq cost (divide (multiply (itmGetPrice thisItem) 4) 5))

						; 'Alien' items for 1/4 cost
						(itmHasModifier thisItem "Alien")
							(setq cost (divide (itmGetPrice thisItem) 4))

						; All other items for 1/5 price
						(setq cost (divide (itmGetPrice thisItem) 5))
						)

					; round up
					(setq cost (multiply (divide (add cost 4) 5) 5))

					(if (gr cost 0)
						cost
						Nil
						)
					)
				))
				
			(setq intTeratonSellMargin (lambda (thisItem)
				(block (cost)
					(switch
						; Better not be installed or damaged
						(or (itmIsInstalled thisItem) (itmIsDamaged thisItem))
							(setq cost 0)

						; We pay 1000 rin for 'Soul' items
						(itmHasModifier thisItem "Soul")
							(setq cost 1000)

						; We buy 'Alien' items
						(itmHasModifier thisItem "Alien")
							(setq cost (divide (itmGetPrice thisItem) 10))

						; We buy high-level resources
						(and (itmHasModifier thisItem "Res")
								(geq (itmGetLevel thisItem) 6))
							(setq cost (divide (itmGetPrice thisItem) 12))

						; We buy high-level weapons and ammo
						(itmMatches thisItem "wm &gt;6")
							(setq cost (divide (itmGetPrice thisItem) 20))

						; Otherwise, no sale
						(setq cost 0)
						)

					; Unknown items are discounted
					(if (not (itmIsKnown thisItem))
						(setq cost (divide cost 10))
						)

					; round down
					(setq cost (multiply (divide cost 5) 5))

					(if (gr cost 0)
						cost
						Nil
						)
					)
				))
			)
	</Globals>

<!-- LEVEL XI -->

	<!-- Segment of Neutronium Plate -->

	<ItemType UNID="&itNeutroniumPlate;"
			name=				"[segment(s) of ]neutronium armor"
			level=				"11"
			value=				"100000"
			mass=				"15000"
			attributes=			"MinorItem; Specialty; Military"
			frequency=			"uncommon"
			numberAppearing=	"1d4"

			description=		"Forged in the heart of a neutron star, neutronium is massive, nearly indestructible, and impossible to repair."

			sortName=			"neutronium armor, segment of"
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="0" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"1000"

				repairTech=	"21"

				disintegrationImmune="true"
				/>

	</ItemType>

<!-- LEVEL XII -->

<!-- LEVEL XV -->

	<!-- Segment of Dark Matter Plate -->

	<ItemType UNID="&itDarkMatterPlate;"
			name=				"[segment(s) of ]dark matter armor"
			level=				"15"
			value=				"2000000"
			mass=				"5000"
			attributes=			"Alien; MinorItem"
			frequency=			"uncommon"
			numberAppearing=	"1d4"

			description=		"Very little is known about this exotic form of dark-matter. It is impervious to most low-level forms of energy and yet light enough to protect a small ship."

			sortName=			"dark matter armor, segment of"
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="0" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"900"
				radiationImmune="true"
				disintegrationImmune="true"
				/>

	</ItemType>

<!-- LEVEL XXI -->

	<!-- Segment of Hierosteel Plate -->

	<ItemType UNID="&itHierosteelPlate;"
			name=				"[segment(s) of ]hierosteel armor"
			level=				"21"
			value=				"20000000"
			mass=				"5000"
			attributes=			"Alien; MinorItem"
			frequency=			"uncommon"
			numberAppearing=	"1d4"

			description=		"Forged by the ancient Hierodules, this miraculous material can withstand all but the most brutal forms of energy."

			sortName=			"hierosteel armor, segment of"
			>

		<Image imageID="&rsItems1;" imageX="0" imageY="0" imageWidth="96" imageHeight="96"/>

		<Armor
				hitPoints=	"4000"
				radiationImmune="true"
				disintegrationImmune="true"
				/>

	</ItemType>

<!-- RESOURCE -->

	<Image UNID="&rsEI100XShields;"		bitmap="Resources\ShieldsHUD_EI100X.bmp" />
	<Image UNID="&rsWolfenShields;"		bitmap="Resources\ShieldsHUD_Wolfen.bmp" />
	<Image UNID="&rsZubrinShields;"		bitmap="Resources\ShieldsHUD.bmp" />
	
</TranscendenceModule>

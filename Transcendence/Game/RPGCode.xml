<?xml version="1.0" encoding="utf-8"?>

<TranscendenceModule>
	<Globals>
		(block Nil

			(setq rpgAdjustInstallPrice (lambda (theObj theItem thePriceAdj theCurrency)
				(switch
					(isInt thePriceAdj)
						(divide
							(multiply thePriceAdj (itmGetInstallCost theItem theCurrency))
							100
							)

					(isFunction thePriceAdj)
						(apply thePriceAdj theItem Nil)

					(itmGetInstallCost theItem theCurrency)
					)
				))

			(setq rpgAdjustPrice (lambda (theObj theItem thePriceAdj theCurrency noInventoryCheck)
				(switch
					(isInt thePriceAdj)
						(divide
							(multiply thePriceAdj (itmGetPrice theItem theCurrency))
							100
							)

					(isFunction thePriceAdj)
						(apply thePriceAdj theItem Nil)

					(objGetSellPrice theObj theItem noInventoryCheck)
					)
				))

			(setq rpgBuyItem (lambda (theObj theItem thePrice theCurrency)
				(block Nil
					; Add to player ship
					(objAddItem gPlayerShip theItem)
					
					; Charge the player
					(objCharge gPlayerShip theCurrency thePrice)
					(plyRecordBuyItem gPlayer theItem theCurrency thePrice)

					; Add to station balance
					(objCredit gSource theCurrency thePrice)

					; If the player bought items at a black market station then
					; increase xp
					(if (and
							(objHasAttribute theObj "blackmarket")
							(itmHasModifier theItem "Illegal")
							)
						(objIncData gPlayerShip "blackMarketXP" (divide thePrice 100))
						)
					)
				))

			(setq rpgGetReactorUpgradeList (lambda (theObj theShip theCriteria)
				(block (minPower reactorList additionalList)

					; Compute the current reactor power of the player ship
					; NOTE: We have to multiply by 100 to get to kilowatts
					(setq minPower (multiply (objGetMaxPower theShip) 100))

					; Make a list of reactor items, filtering out any that are
					; too small for the ship.
					(setq reactorList (map (itmGetTypes theCriteria) 'excludeNil theUNID
						(switch

							; If this reactor has less power than the player's
							; current reactor, then skip it.
							(leq (typGetDataField theUNID 'power) minPower)
								Nil

							; Not if the object wouldn't normally sell it
							(not (objGetSellPrice theObj (itmCreate theUNID 1) 'noInventoryCheck))
								Nil

							; Otherwise, add the reactor to the list
							(itmCreate theUNID 1)
							)
						))

					; Append any reactors that the object happens to have. But 
					; make sure that we don't duplicate.
					(setq additionalList (map (objGetItems theObj "rNU") 'excludeNil theItem
						(switch
							; Not if we already have it in our list
							(find reactorList (itmSetCount theItem 1))
								Nil

							; If this reactor has less power than the player's
							; current reactor, then skip it.
							(leq (typGetDataField (itmGetType theItem) 'power) minPower)
								Nil

							; Not if the object wouldn't normally sell it
							(not (objGetSellPrice theObj theItem 'noInventoryCheck))
								Nil

							; Add it
							theItem
							)
						))

					; Return the list
					(append reactorList additionalList)
					)
				))

			(setq rpgInstallDevicePrep (lambda (data)

				; Data must have the following fields
				;
				;	item:					The item to install
				;
				; In addition, the following optional fields are supported
				;
				;	buyAndInstall:			If True, we're installing as part of purchase
				;	checkMilitaryID:		If True, we check for military ID, if necessary
				;	checkTotalPower:		If True, we fail unless the total power of all devices matches reactor output
				;	currencyUsed:			The currency used
				;	installerObj:			Object installing the device (if Nil, we assume a station)
				;	installPriceAdj:		Installation price (only if totalPrice is Nil)
				;	itemInCargo:			If True, item is in player's cargo hold
				;	maxTechLevel:			The maximum tech level we will install
				;	noCargoCheck:			If True, then we don't check to see if the old device fits in cargo
				;	targetObj:				Object on which to install (if Nil, we assume player ship)
				;	techCriteria:			If not Nil, the item must match this criteria
				;	totalPrice:				The total price to install (may include purchase price)
				;
				; We return a struct with the following elements:
				;
				;	canInstall:				True if installation can proceed
				;	price:					Total installation cost
				;	desc:					Description of installation attempt

				(block (thisItem totalCost canInstall desc itemName currencyUsed targetObj installerObj textYourShip textWe textYour)
				
					(setq thisItem (@ data 'item))
					(setq currencyUsed (@ data 'currencyUsed))
					(setq targetObj (if (@ data 'targetObj) (@ data 'targetObj) gPlayerShip))
					(setq installerObj (if (@ data 'installerObj) (@ data 'installerObj) gSource))
					(if (not currencyUsed) (setq currencyUsed (objGetDefaultCurrency targetObj)))
					(setq itemName (itmGetName thisItem (if (@ data 'buyAndInstall) 0x40 0x04)))
					(setq canInstall Nil)
					
					;	If the target object is not the player's ship, then we need to modify
					;	some text
					
					(setq textYourShip
						(if (eq targetObj gPlayerShip)
							"your ship"
							(cat "the " (objGetName targetObj 0x00))
							)
						)
						
					(setq textWe
						(if (eq installerObj gPlayerShip)
							"you"
							"we"
							)
						)
						
					(setq textYour
						(if (eq targetObj gPlayerShip)
							"your"
							"the"
							)
						)
						
					(if thisItem
						(block (cargoNeeded itemToReplace resultMessage resultCode returnValue)
						
							;	Compute the cost to install
							
							(switch
								(@ data 'totalPrice)
									(setq totalCost (@ data 'totalPrice))
								
								(setq totalCost (rpgAdjustInstallPrice Nil thisItem (@ data 'installPriceAdj) currencyUsed))
								)
								
							;	Ask the object is we can install the item

							(setq returnValue (objCanInstallItem targetObj thisItem))
							(setq resultCode (@ returnValue 1))
							(setq resultMessage (@ returnValue 2))
							(setq itemToReplace (@ returnValue 3))
							
							(switch
								;	If we don't have the technology, we cannot install
								;	(except for specific items that we know about)
								
								(or (gr (itmGetLevel thisItem) (if (@ data 'maxTechLevel) (@ data 'maxTechLevel) 30))
										(and (@ data 'techCriteria)
											(not (itmMatches thisItem (@ data 'techCriteria)))
											)
										)
									(setq desc (cat (strCapitalize textWe) " do not have the technology to install " itemName " on " textYourShip "."))

								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Military")
										(not (objGetItems targetObj "*+MilitaryID"))
										)
									(setq desc (cat "You must have a military ID to use " itemName "."))
									
								(and (@ data 'checkMilitaryID)
										(itmHasModifier thisItem "Illegal")
										)
									(setq desc "We do not install illegal items.")

								(eq resultCode 'cannotInstall)
									(setq desc resultMessage)

								(eq resultCode 'noDeviceSlotsLeft)
									(setq desc (cat (strCapitalize textYourShip) " cannot support any more devices."))

								(eq resultCode 'reactorTooWeak)
									(setq desc (cat (strCapitalize textYourShip) "'s reactor is not powerful enough for this device."))

								(eq resultCode 'reactorIncompatible)
									(setq desc (cat "The power output of " itemName " is too high for " textYourShip "."))

								(eq resultCode 'noWeaponSlotsLeft)
									(setq desc (cat (strCapitalize textYourShip) " cannot support any more weapons."))

								(eq resultCode 'noNonWeaponSlotsLeft)
									(setq desc (cat (strCapitalize textYourShip) " cannot support any more non-weapon devices."))
									
								(and (eq resultCode 'replacementRequired)
										(eq (itmGetType thisItem) (itmGetType itemToReplace))
										(eq (itmIsEnhanced thisItem) (itmIsEnhanced itemToReplace))
										(eq (itmGetProperty thisItem 'damaged) (itmGetProperty itemToReplace 'damaged))
										(geq (itmGetProperty thisItem 'charges) (itmGetProperty itemToReplace 'charges))
										)
									(setq desc (cat (strCapitalize textYourShip) " already has " itemName " (and cannot support more devices unless you remove one first)."))
									
								(eq resultCode 'replacementRequired)
									(block Nil
										(setq desc (cat (strCapitalize textWe) " can remove " textYour " " (itmGetName itemToReplace 0x80) " and install " itemName))
										(setq canInstall True)
										)
									
								(not (eq resultCode 'ok))
									(setq desc "This device cannot be installed.")

								(block Nil
									(setq desc (cat (strCapitalize textWe) " can install " itemName " on " textYourShip))
									(setq canInstall True)
									)
								)

							; If we need to remove a device, then it will cost more

							(setq cargoNeeded 0)
							(if (and canInstall itemToReplace)
								(block Nil
									(if (not (@ data 'totalPrice))
										(setq totalCost 
											(add totalCost 
												; Remove cost is 1/2 of install cost
												(divide (multiply gMargin (itmGetInstallCost itemToReplace currencyUsed)) 200)
												)
											)
										)

									; See how much cargo space we need to store the old item

									(setq cargoNeeded (itmGetMass itemToReplace))
									(if (@ data 'itemInCargo)
										(setq cargoNeeded (subtract cargoNeeded (itmGetMass thisItem)))
										)
									)
								)

							; See if the item fits

							(if (and canInstall
									(gr cargoNeeded (objGetCargoSpaceLeft targetObj))
									(not (@ data 'noCargoCheck))
									)
								(block Nil
									(setq desc (cat desc ". Unfortunately, there isn't enough room in your cargo hold to do the swap."))
									(setq canInstall Nil)
									)
								)

							; See if we can afford the installation

							(if canInstall
								(if (gr totalCost 0)
									(if (gr totalCost (objGetBalance targetObj currencyUsed))
										(block Nil
											(setq desc (cat desc " for " (fmtCurrency currencyUsed totalCost) ". Unfortunately, you cannot afford the cost."))
											(setq canInstall Nil)
											)
										(setq desc (cat desc " for " (if (@ data 'buyAndInstall) "an additional " "") (fmtCurrency currencyUsed totalCost) "."))
										)
										
									(if (not (eq installerObj gPlayerShip))
										(setq desc (cat desc " at no charge."))
										(setq desc (cat desc "."))
										)
									)
								)
								
							;	See if we are downgrading
							
							(if (and canInstall
									itemToReplace
									(ls (itmGetLevel thisItem) (itmGetLevel itemToReplace))
									)
								(setq desc (cat desc "  (However, the " (itmGetName itemToReplace 0x00) " is higher level.)"))
								)
							)
							
						(setq desc "You do not have any devices that can be installed.")
						)

					; Return variables
					{
						canInstall: canInstall
						price: totalCost
						desc: desc
						}
					)
				))

			(setq rpgPageCount (lambda (textDesc)
				(if (isatom textDesc) 1 (count textDesc))
				))

			(setq rpgPageDesc (lambda (textDesc pageNo)
				(block (pageDesc)
					(switch
						(eq (typeof textDesc) 'struct)
							(setq pageDesc textDesc)

						(eq (typeof textDesc) 'string)
							(setq pageDesc {
								desc: textDesc
								})

						(eq (typeof (@ textDesc pageNo)) 'struct)
							(setq pageDesc (@ textDesc pageNo))

						(setq pageDesc {
							desc: (@ textDesc pageNo)
							})
						)

					(if (not (@ pageDesc 'desc))
						(set@ pageDesc 'desc "You have successfully completed the mission.")
						)

					(if (and (@ pageDesc 'nextLabel) (not (@ pageDesc 'nextKey)))
						(set@ pageDesc 'nextKey
							(@ (regex (@ pageDesc 'nextLabel) "{$?}*{{$A}+}{$?}*" 'subex) 1)
							)
						)

					pageDesc
					)
				))

			(setq rpgRestorePlayer (lambda ()

			; Repairs and restores the player's ship and places it at a random, safe
			; position in the system.

				(block (portObj newPos)

					; Find the nearest friendly station in the system
					(setq portObj (sysFindObject gPlayerShip "TAFN +populated; -occupation;"))
					(if (not portObj)
						(enumwhile (sysFindObject gPlayerShip "tF") (not portObj) theObj
							(if (not (sysFindObject theObj "sTEN:75"))
								(setq portObj theObj)
								)
							)
						)
					(if (not portObj)
						(setq portObj (sysFindObject gPlayerShip "tFN"))
						)

					; Pick a random position
					(setq newPos (sysVectorRandom portObj (random 30 40) 10 "t"))

					; Place the ship there
					(objMoveTo gPlayerShip newPos)

					; Repair the ship
					(intArmorRepairAll gPlayerShip 25 'alwaysRepair)
					(intDeviceRepairAll gPlayerShip)
					(shpRechargeShield gPlayerShip 1000)
					(shpRefuelFromItem gPlayerShip (itmCreate &itHelium3FuelRod; (shpGetFuelNeeded gPlayerShip (itmCreate &itHelium3FuelRod; 1))))
					(objChangeEquipmentStatus gPlayerShip 'SRS 'repair)
					(objFixParalysis gPlayerShip)
					(shpDecontaminate gPlayerShip)
					
					; Remove any overlays that shouldn't be there (e.g., pteravores)
					(enum (objGetOverlays gPlayerShip) theOverlay
						(objFireOverlayEvent gPlayerShip theOverlay "OnInsuranceClaim")
						)
					)
				))
			)
	</Globals>

</TranscendenceModule>